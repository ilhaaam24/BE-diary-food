
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  name           String
  email          String       @unique
  password       String
  role           Role         @default(user)
  photo          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  phoneNumber    String?
  comment        Comment[]    @relation("UserComment")
  feedback       Feedback[]   @relation("UserFeedback")
  resepDisetujui Resep[]      @relation("ResepDisetujuiAdmin")
  resepDiunggah  Resep[]      @relation("UserUploadResep")
  savedResep     SavedResep[]
  Thread         Thread[]
}

model Resep {
  id              Int                @id @default(autoincrement())
  nama            String
  photoResep      String?
  kategoriId      Int
  tanggalUnggahan DateTime           @default(now())
  userId          Int
  tanggalAcc      DateTime?
  disetujuiOleh   Int?
  isApproved      StatusResep        @default(PENDING)
  cookingTime     String
  note            String?
  rating          Int?
  servingTime     String
  description     String
  preparationTime String
  bahanList       Bahan[]
  comment         Comment[]          @relation("RecipeComment")
  langkahList     LangkahPembuatan[]
  admin           User?              @relation("ResepDisetujuiAdmin", fields: [disetujuiOleh], references: [id])
  kategori        Kategori           @relation(fields: [kategoriId], references: [id])
  user            User               @relation("UserUploadResep", fields: [userId], references: [id], onDelete: Cascade)
  disimpanOleh    SavedResep[]
}

model SavedResep {
  id      Int      @id @default(autoincrement())
  userId  Int
  resepId Int
  savedAt DateTime @default(now())
  resep   Resep    @relation(fields: [resepId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resepId])
}

model Kategori {
  id            Int        @id @default(autoincrement())
  nama          String
  createdAt     DateTime   @default(now())
  parentId      Int?       @map("parent_id")
  updatedAt     DateTime?  @updatedAt
  parent        Kategori?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories Kategori[] @relation("CategoryToSubcategory")
  resep         Resep[]
}

model Bahan {
  id      Int    @id @default(autoincrement())
  resepId Int
  nama    String
  jumlah  String
  resep   Resep  @relation(fields: [resepId], references: [id], onDelete: Cascade)
}

model LangkahPembuatan {
  id        Int    @id @default(autoincrement())
  resepId   Int
  urutan    Int
  deskripsi String
  resep     Resep  @relation(fields: [resepId], references: [id], onDelete: Cascade)
}

model Thread {
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  id        Int       @id @default(autoincrement())
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  role      RoleChat
  content   String
  thought   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  threadId  Int
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model Feedback {
  id              Int      @id @default(autoincrement())
  userId          Int
  email           String
  tanggalFeedback DateTime @default(now())
  subject         String
  message         String
  fullname        String
  user            User     @relation("UserFeedback", fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  resepId   Int
  userId    Int
  comment   String
  createdAt DateTime @default(now())
  rating    Int      @default(0)
  resep     Resep    @relation("RecipeComment", fields: [resepId], references: [id], onDelete: Cascade)
  user      User     @relation("UserComment", fields: [userId], references: [id], onDelete: Cascade)
}

enum StatusResep {
  PENDING
  APPROVED
  REJECTED
}

enum RoleChat {
  user
  assistant
}

enum Role {
  admin
  user
}
