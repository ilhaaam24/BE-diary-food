
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Resep
 * 
 */
export type Resep = $Result.DefaultSelection<Prisma.$ResepPayload>
/**
 * Model SavedResep
 * 
 */
export type SavedResep = $Result.DefaultSelection<Prisma.$SavedResepPayload>
/**
 * Model Kategori
 * 
 */
export type Kategori = $Result.DefaultSelection<Prisma.$KategoriPayload>
/**
 * Model Bahan
 * 
 */
export type Bahan = $Result.DefaultSelection<Prisma.$BahanPayload>
/**
 * Model LangkahPembuatan
 * 
 */
export type LangkahPembuatan = $Result.DefaultSelection<Prisma.$LangkahPembuatanPayload>
/**
 * Model Thread
 * 
 */
export type Thread = $Result.DefaultSelection<Prisma.$ThreadPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StatusResep: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type StatusResep = (typeof StatusResep)[keyof typeof StatusResep]


export const RoleChat: {
  user: 'user',
  assistant: 'assistant'
};

export type RoleChat = (typeof RoleChat)[keyof typeof RoleChat]


export const Role: {
  admin: 'admin',
  user: 'user'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type StatusResep = $Enums.StatusResep

export const StatusResep: typeof $Enums.StatusResep

export type RoleChat = $Enums.RoleChat

export const RoleChat: typeof $Enums.RoleChat

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resep`: Exposes CRUD operations for the **Resep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reseps
    * const reseps = await prisma.resep.findMany()
    * ```
    */
  get resep(): Prisma.ResepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.savedResep`: Exposes CRUD operations for the **SavedResep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedReseps
    * const savedReseps = await prisma.savedResep.findMany()
    * ```
    */
  get savedResep(): Prisma.SavedResepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kategori`: Exposes CRUD operations for the **Kategori** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kategoris
    * const kategoris = await prisma.kategori.findMany()
    * ```
    */
  get kategori(): Prisma.KategoriDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bahan`: Exposes CRUD operations for the **Bahan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bahans
    * const bahans = await prisma.bahan.findMany()
    * ```
    */
  get bahan(): Prisma.BahanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.langkahPembuatan`: Exposes CRUD operations for the **LangkahPembuatan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LangkahPembuatans
    * const langkahPembuatans = await prisma.langkahPembuatan.findMany()
    * ```
    */
  get langkahPembuatan(): Prisma.LangkahPembuatanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.thread`: Exposes CRUD operations for the **Thread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Threads
    * const threads = await prisma.thread.findMany()
    * ```
    */
  get thread(): Prisma.ThreadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Resep: 'Resep',
    SavedResep: 'SavedResep',
    Kategori: 'Kategori',
    Bahan: 'Bahan',
    LangkahPembuatan: 'LangkahPembuatan',
    Thread: 'Thread',
    Message: 'Message',
    Feedback: 'Feedback',
    Comment: 'Comment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "resep" | "savedResep" | "kategori" | "bahan" | "langkahPembuatan" | "thread" | "message" | "feedback" | "comment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Resep: {
        payload: Prisma.$ResepPayload<ExtArgs>
        fields: Prisma.ResepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>
          }
          findFirst: {
            args: Prisma.ResepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>
          }
          findMany: {
            args: Prisma.ResepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>[]
          }
          create: {
            args: Prisma.ResepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>
          }
          createMany: {
            args: Prisma.ResepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>[]
          }
          delete: {
            args: Prisma.ResepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>
          }
          update: {
            args: Prisma.ResepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>
          }
          deleteMany: {
            args: Prisma.ResepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>[]
          }
          upsert: {
            args: Prisma.ResepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResepPayload>
          }
          aggregate: {
            args: Prisma.ResepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResep>
          }
          groupBy: {
            args: Prisma.ResepGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResepGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResepCountArgs<ExtArgs>
            result: $Utils.Optional<ResepCountAggregateOutputType> | number
          }
        }
      }
      SavedResep: {
        payload: Prisma.$SavedResepPayload<ExtArgs>
        fields: Prisma.SavedResepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SavedResepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedResepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>
          }
          findFirst: {
            args: Prisma.SavedResepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedResepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>
          }
          findMany: {
            args: Prisma.SavedResepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>[]
          }
          create: {
            args: Prisma.SavedResepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>
          }
          createMany: {
            args: Prisma.SavedResepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SavedResepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>[]
          }
          delete: {
            args: Prisma.SavedResepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>
          }
          update: {
            args: Prisma.SavedResepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>
          }
          deleteMany: {
            args: Prisma.SavedResepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SavedResepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SavedResepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>[]
          }
          upsert: {
            args: Prisma.SavedResepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResepPayload>
          }
          aggregate: {
            args: Prisma.SavedResepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSavedResep>
          }
          groupBy: {
            args: Prisma.SavedResepGroupByArgs<ExtArgs>
            result: $Utils.Optional<SavedResepGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedResepCountArgs<ExtArgs>
            result: $Utils.Optional<SavedResepCountAggregateOutputType> | number
          }
        }
      }
      Kategori: {
        payload: Prisma.$KategoriPayload<ExtArgs>
        fields: Prisma.KategoriFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KategoriFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KategoriFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>
          }
          findFirst: {
            args: Prisma.KategoriFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KategoriFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>
          }
          findMany: {
            args: Prisma.KategoriFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>[]
          }
          create: {
            args: Prisma.KategoriCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>
          }
          createMany: {
            args: Prisma.KategoriCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KategoriCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>[]
          }
          delete: {
            args: Prisma.KategoriDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>
          }
          update: {
            args: Prisma.KategoriUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>
          }
          deleteMany: {
            args: Prisma.KategoriDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KategoriUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KategoriUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>[]
          }
          upsert: {
            args: Prisma.KategoriUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KategoriPayload>
          }
          aggregate: {
            args: Prisma.KategoriAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKategori>
          }
          groupBy: {
            args: Prisma.KategoriGroupByArgs<ExtArgs>
            result: $Utils.Optional<KategoriGroupByOutputType>[]
          }
          count: {
            args: Prisma.KategoriCountArgs<ExtArgs>
            result: $Utils.Optional<KategoriCountAggregateOutputType> | number
          }
        }
      }
      Bahan: {
        payload: Prisma.$BahanPayload<ExtArgs>
        fields: Prisma.BahanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BahanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BahanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>
          }
          findFirst: {
            args: Prisma.BahanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BahanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>
          }
          findMany: {
            args: Prisma.BahanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>[]
          }
          create: {
            args: Prisma.BahanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>
          }
          createMany: {
            args: Prisma.BahanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BahanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>[]
          }
          delete: {
            args: Prisma.BahanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>
          }
          update: {
            args: Prisma.BahanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>
          }
          deleteMany: {
            args: Prisma.BahanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BahanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BahanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>[]
          }
          upsert: {
            args: Prisma.BahanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BahanPayload>
          }
          aggregate: {
            args: Prisma.BahanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBahan>
          }
          groupBy: {
            args: Prisma.BahanGroupByArgs<ExtArgs>
            result: $Utils.Optional<BahanGroupByOutputType>[]
          }
          count: {
            args: Prisma.BahanCountArgs<ExtArgs>
            result: $Utils.Optional<BahanCountAggregateOutputType> | number
          }
        }
      }
      LangkahPembuatan: {
        payload: Prisma.$LangkahPembuatanPayload<ExtArgs>
        fields: Prisma.LangkahPembuatanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LangkahPembuatanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LangkahPembuatanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>
          }
          findFirst: {
            args: Prisma.LangkahPembuatanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LangkahPembuatanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>
          }
          findMany: {
            args: Prisma.LangkahPembuatanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>[]
          }
          create: {
            args: Prisma.LangkahPembuatanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>
          }
          createMany: {
            args: Prisma.LangkahPembuatanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LangkahPembuatanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>[]
          }
          delete: {
            args: Prisma.LangkahPembuatanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>
          }
          update: {
            args: Prisma.LangkahPembuatanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>
          }
          deleteMany: {
            args: Prisma.LangkahPembuatanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LangkahPembuatanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LangkahPembuatanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>[]
          }
          upsert: {
            args: Prisma.LangkahPembuatanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LangkahPembuatanPayload>
          }
          aggregate: {
            args: Prisma.LangkahPembuatanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLangkahPembuatan>
          }
          groupBy: {
            args: Prisma.LangkahPembuatanGroupByArgs<ExtArgs>
            result: $Utils.Optional<LangkahPembuatanGroupByOutputType>[]
          }
          count: {
            args: Prisma.LangkahPembuatanCountArgs<ExtArgs>
            result: $Utils.Optional<LangkahPembuatanCountAggregateOutputType> | number
          }
        }
      }
      Thread: {
        payload: Prisma.$ThreadPayload<ExtArgs>
        fields: Prisma.ThreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThreadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThreadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          findFirst: {
            args: Prisma.ThreadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThreadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          findMany: {
            args: Prisma.ThreadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>[]
          }
          create: {
            args: Prisma.ThreadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          createMany: {
            args: Prisma.ThreadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThreadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>[]
          }
          delete: {
            args: Prisma.ThreadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          update: {
            args: Prisma.ThreadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          deleteMany: {
            args: Prisma.ThreadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThreadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ThreadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>[]
          }
          upsert: {
            args: Prisma.ThreadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThreadPayload>
          }
          aggregate: {
            args: Prisma.ThreadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThread>
          }
          groupBy: {
            args: Prisma.ThreadGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThreadGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThreadCountArgs<ExtArgs>
            result: $Utils.Optional<ThreadCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    resep?: ResepOmit
    savedResep?: SavedResepOmit
    kategori?: KategoriOmit
    bahan?: BahanOmit
    langkahPembuatan?: LangkahPembuatanOmit
    thread?: ThreadOmit
    message?: MessageOmit
    feedback?: FeedbackOmit
    comment?: CommentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    comment: number
    feedback: number
    resepDisetujui: number
    resepDiunggah: number
    savedResep: number
    Thread: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | UserCountOutputTypeCountCommentArgs
    feedback?: boolean | UserCountOutputTypeCountFeedbackArgs
    resepDisetujui?: boolean | UserCountOutputTypeCountResepDisetujuiArgs
    resepDiunggah?: boolean | UserCountOutputTypeCountResepDiunggahArgs
    savedResep?: boolean | UserCountOutputTypeCountSavedResepArgs
    Thread?: boolean | UserCountOutputTypeCountThreadArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResepDisetujuiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResepWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResepDiunggahArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResepWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSavedResepArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedResepWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountThreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThreadWhereInput
  }


  /**
   * Count Type ResepCountOutputType
   */

  export type ResepCountOutputType = {
    bahanList: number
    comment: number
    langkahList: number
    disimpanOleh: number
  }

  export type ResepCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bahanList?: boolean | ResepCountOutputTypeCountBahanListArgs
    comment?: boolean | ResepCountOutputTypeCountCommentArgs
    langkahList?: boolean | ResepCountOutputTypeCountLangkahListArgs
    disimpanOleh?: boolean | ResepCountOutputTypeCountDisimpanOlehArgs
  }

  // Custom InputTypes
  /**
   * ResepCountOutputType without action
   */
  export type ResepCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResepCountOutputType
     */
    select?: ResepCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResepCountOutputType without action
   */
  export type ResepCountOutputTypeCountBahanListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BahanWhereInput
  }

  /**
   * ResepCountOutputType without action
   */
  export type ResepCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ResepCountOutputType without action
   */
  export type ResepCountOutputTypeCountLangkahListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LangkahPembuatanWhereInput
  }

  /**
   * ResepCountOutputType without action
   */
  export type ResepCountOutputTypeCountDisimpanOlehArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedResepWhereInput
  }


  /**
   * Count Type KategoriCountOutputType
   */

  export type KategoriCountOutputType = {
    subcategories: number
    resep: number
  }

  export type KategoriCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subcategories?: boolean | KategoriCountOutputTypeCountSubcategoriesArgs
    resep?: boolean | KategoriCountOutputTypeCountResepArgs
  }

  // Custom InputTypes
  /**
   * KategoriCountOutputType without action
   */
  export type KategoriCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KategoriCountOutputType
     */
    select?: KategoriCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KategoriCountOutputType without action
   */
  export type KategoriCountOutputTypeCountSubcategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KategoriWhereInput
  }

  /**
   * KategoriCountOutputType without action
   */
  export type KategoriCountOutputTypeCountResepArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResepWhereInput
  }


  /**
   * Count Type ThreadCountOutputType
   */

  export type ThreadCountOutputType = {
    messages: number
  }

  export type ThreadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ThreadCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ThreadCountOutputType without action
   */
  export type ThreadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThreadCountOutputType
     */
    select?: ThreadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThreadCountOutputType without action
   */
  export type ThreadCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    photo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    phoneNumber: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    photo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    phoneNumber: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    photo: number
    createdAt: number
    updatedAt: number
    phoneNumber: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    photo?: true
    createdAt?: true
    updatedAt?: true
    phoneNumber?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    photo?: true
    createdAt?: true
    updatedAt?: true
    phoneNumber?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    photo?: true
    createdAt?: true
    updatedAt?: true
    phoneNumber?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    role: $Enums.Role
    photo: string | null
    createdAt: Date
    updatedAt: Date
    phoneNumber: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    photo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phoneNumber?: boolean
    comment?: boolean | User$commentArgs<ExtArgs>
    feedback?: boolean | User$feedbackArgs<ExtArgs>
    resepDisetujui?: boolean | User$resepDisetujuiArgs<ExtArgs>
    resepDiunggah?: boolean | User$resepDiunggahArgs<ExtArgs>
    savedResep?: boolean | User$savedResepArgs<ExtArgs>
    Thread?: boolean | User$ThreadArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    photo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phoneNumber?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    photo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phoneNumber?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    photo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phoneNumber?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "role" | "photo" | "createdAt" | "updatedAt" | "phoneNumber", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | User$commentArgs<ExtArgs>
    feedback?: boolean | User$feedbackArgs<ExtArgs>
    resepDisetujui?: boolean | User$resepDisetujuiArgs<ExtArgs>
    resepDiunggah?: boolean | User$resepDiunggahArgs<ExtArgs>
    savedResep?: boolean | User$savedResepArgs<ExtArgs>
    Thread?: boolean | User$ThreadArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      comment: Prisma.$CommentPayload<ExtArgs>[]
      feedback: Prisma.$FeedbackPayload<ExtArgs>[]
      resepDisetujui: Prisma.$ResepPayload<ExtArgs>[]
      resepDiunggah: Prisma.$ResepPayload<ExtArgs>[]
      savedResep: Prisma.$SavedResepPayload<ExtArgs>[]
      Thread: Prisma.$ThreadPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      role: $Enums.Role
      photo: string | null
      createdAt: Date
      updatedAt: Date
      phoneNumber: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comment<T extends User$commentArgs<ExtArgs> = {}>(args?: Subset<T, User$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedback<T extends User$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resepDisetujui<T extends User$resepDisetujuiArgs<ExtArgs> = {}>(args?: Subset<T, User$resepDisetujuiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resepDiunggah<T extends User$resepDiunggahArgs<ExtArgs> = {}>(args?: Subset<T, User$resepDiunggahArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    savedResep<T extends User$savedResepArgs<ExtArgs> = {}>(args?: Subset<T, User$savedResepArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Thread<T extends User$ThreadArgs<ExtArgs> = {}>(args?: Subset<T, User$ThreadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly photo: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly phoneNumber: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.comment
   */
  export type User$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.feedback
   */
  export type User$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.resepDisetujui
   */
  export type User$resepDisetujuiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    where?: ResepWhereInput
    orderBy?: ResepOrderByWithRelationInput | ResepOrderByWithRelationInput[]
    cursor?: ResepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResepScalarFieldEnum | ResepScalarFieldEnum[]
  }

  /**
   * User.resepDiunggah
   */
  export type User$resepDiunggahArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    where?: ResepWhereInput
    orderBy?: ResepOrderByWithRelationInput | ResepOrderByWithRelationInput[]
    cursor?: ResepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResepScalarFieldEnum | ResepScalarFieldEnum[]
  }

  /**
   * User.savedResep
   */
  export type User$savedResepArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    where?: SavedResepWhereInput
    orderBy?: SavedResepOrderByWithRelationInput | SavedResepOrderByWithRelationInput[]
    cursor?: SavedResepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedResepScalarFieldEnum | SavedResepScalarFieldEnum[]
  }

  /**
   * User.Thread
   */
  export type User$ThreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    where?: ThreadWhereInput
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    cursor?: ThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Resep
   */

  export type AggregateResep = {
    _count: ResepCountAggregateOutputType | null
    _avg: ResepAvgAggregateOutputType | null
    _sum: ResepSumAggregateOutputType | null
    _min: ResepMinAggregateOutputType | null
    _max: ResepMaxAggregateOutputType | null
  }

  export type ResepAvgAggregateOutputType = {
    id: number | null
    kategoriId: number | null
    userId: number | null
    disetujuiOleh: number | null
    rating: number | null
  }

  export type ResepSumAggregateOutputType = {
    id: number | null
    kategoriId: number | null
    userId: number | null
    disetujuiOleh: number | null
    rating: number | null
  }

  export type ResepMinAggregateOutputType = {
    id: number | null
    nama: string | null
    photoResep: string | null
    kategoriId: number | null
    tanggalUnggahan: Date | null
    userId: number | null
    tanggalAcc: Date | null
    disetujuiOleh: number | null
    isApproved: $Enums.StatusResep | null
    cookingTime: string | null
    note: string | null
    rating: number | null
    servingTime: string | null
    description: string | null
    preparationTime: string | null
  }

  export type ResepMaxAggregateOutputType = {
    id: number | null
    nama: string | null
    photoResep: string | null
    kategoriId: number | null
    tanggalUnggahan: Date | null
    userId: number | null
    tanggalAcc: Date | null
    disetujuiOleh: number | null
    isApproved: $Enums.StatusResep | null
    cookingTime: string | null
    note: string | null
    rating: number | null
    servingTime: string | null
    description: string | null
    preparationTime: string | null
  }

  export type ResepCountAggregateOutputType = {
    id: number
    nama: number
    photoResep: number
    kategoriId: number
    tanggalUnggahan: number
    userId: number
    tanggalAcc: number
    disetujuiOleh: number
    isApproved: number
    cookingTime: number
    note: number
    rating: number
    servingTime: number
    description: number
    preparationTime: number
    _all: number
  }


  export type ResepAvgAggregateInputType = {
    id?: true
    kategoriId?: true
    userId?: true
    disetujuiOleh?: true
    rating?: true
  }

  export type ResepSumAggregateInputType = {
    id?: true
    kategoriId?: true
    userId?: true
    disetujuiOleh?: true
    rating?: true
  }

  export type ResepMinAggregateInputType = {
    id?: true
    nama?: true
    photoResep?: true
    kategoriId?: true
    tanggalUnggahan?: true
    userId?: true
    tanggalAcc?: true
    disetujuiOleh?: true
    isApproved?: true
    cookingTime?: true
    note?: true
    rating?: true
    servingTime?: true
    description?: true
    preparationTime?: true
  }

  export type ResepMaxAggregateInputType = {
    id?: true
    nama?: true
    photoResep?: true
    kategoriId?: true
    tanggalUnggahan?: true
    userId?: true
    tanggalAcc?: true
    disetujuiOleh?: true
    isApproved?: true
    cookingTime?: true
    note?: true
    rating?: true
    servingTime?: true
    description?: true
    preparationTime?: true
  }

  export type ResepCountAggregateInputType = {
    id?: true
    nama?: true
    photoResep?: true
    kategoriId?: true
    tanggalUnggahan?: true
    userId?: true
    tanggalAcc?: true
    disetujuiOleh?: true
    isApproved?: true
    cookingTime?: true
    note?: true
    rating?: true
    servingTime?: true
    description?: true
    preparationTime?: true
    _all?: true
  }

  export type ResepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resep to aggregate.
     */
    where?: ResepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reseps to fetch.
     */
    orderBy?: ResepOrderByWithRelationInput | ResepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reseps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reseps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reseps
    **/
    _count?: true | ResepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResepMaxAggregateInputType
  }

  export type GetResepAggregateType<T extends ResepAggregateArgs> = {
        [P in keyof T & keyof AggregateResep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResep[P]>
      : GetScalarType<T[P], AggregateResep[P]>
  }




  export type ResepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResepWhereInput
    orderBy?: ResepOrderByWithAggregationInput | ResepOrderByWithAggregationInput[]
    by: ResepScalarFieldEnum[] | ResepScalarFieldEnum
    having?: ResepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResepCountAggregateInputType | true
    _avg?: ResepAvgAggregateInputType
    _sum?: ResepSumAggregateInputType
    _min?: ResepMinAggregateInputType
    _max?: ResepMaxAggregateInputType
  }

  export type ResepGroupByOutputType = {
    id: number
    nama: string
    photoResep: string | null
    kategoriId: number
    tanggalUnggahan: Date
    userId: number
    tanggalAcc: Date | null
    disetujuiOleh: number | null
    isApproved: $Enums.StatusResep
    cookingTime: string
    note: string | null
    rating: number | null
    servingTime: string
    description: string
    preparationTime: string
    _count: ResepCountAggregateOutputType | null
    _avg: ResepAvgAggregateOutputType | null
    _sum: ResepSumAggregateOutputType | null
    _min: ResepMinAggregateOutputType | null
    _max: ResepMaxAggregateOutputType | null
  }

  type GetResepGroupByPayload<T extends ResepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResepGroupByOutputType[P]>
            : GetScalarType<T[P], ResepGroupByOutputType[P]>
        }
      >
    >


  export type ResepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    photoResep?: boolean
    kategoriId?: boolean
    tanggalUnggahan?: boolean
    userId?: boolean
    tanggalAcc?: boolean
    disetujuiOleh?: boolean
    isApproved?: boolean
    cookingTime?: boolean
    note?: boolean
    rating?: boolean
    servingTime?: boolean
    description?: boolean
    preparationTime?: boolean
    bahanList?: boolean | Resep$bahanListArgs<ExtArgs>
    comment?: boolean | Resep$commentArgs<ExtArgs>
    langkahList?: boolean | Resep$langkahListArgs<ExtArgs>
    admin?: boolean | Resep$adminArgs<ExtArgs>
    kategori?: boolean | KategoriDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    disimpanOleh?: boolean | Resep$disimpanOlehArgs<ExtArgs>
    _count?: boolean | ResepCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resep"]>

  export type ResepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    photoResep?: boolean
    kategoriId?: boolean
    tanggalUnggahan?: boolean
    userId?: boolean
    tanggalAcc?: boolean
    disetujuiOleh?: boolean
    isApproved?: boolean
    cookingTime?: boolean
    note?: boolean
    rating?: boolean
    servingTime?: boolean
    description?: boolean
    preparationTime?: boolean
    admin?: boolean | Resep$adminArgs<ExtArgs>
    kategori?: boolean | KategoriDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resep"]>

  export type ResepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    photoResep?: boolean
    kategoriId?: boolean
    tanggalUnggahan?: boolean
    userId?: boolean
    tanggalAcc?: boolean
    disetujuiOleh?: boolean
    isApproved?: boolean
    cookingTime?: boolean
    note?: boolean
    rating?: boolean
    servingTime?: boolean
    description?: boolean
    preparationTime?: boolean
    admin?: boolean | Resep$adminArgs<ExtArgs>
    kategori?: boolean | KategoriDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resep"]>

  export type ResepSelectScalar = {
    id?: boolean
    nama?: boolean
    photoResep?: boolean
    kategoriId?: boolean
    tanggalUnggahan?: boolean
    userId?: boolean
    tanggalAcc?: boolean
    disetujuiOleh?: boolean
    isApproved?: boolean
    cookingTime?: boolean
    note?: boolean
    rating?: boolean
    servingTime?: boolean
    description?: boolean
    preparationTime?: boolean
  }

  export type ResepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nama" | "photoResep" | "kategoriId" | "tanggalUnggahan" | "userId" | "tanggalAcc" | "disetujuiOleh" | "isApproved" | "cookingTime" | "note" | "rating" | "servingTime" | "description" | "preparationTime", ExtArgs["result"]["resep"]>
  export type ResepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bahanList?: boolean | Resep$bahanListArgs<ExtArgs>
    comment?: boolean | Resep$commentArgs<ExtArgs>
    langkahList?: boolean | Resep$langkahListArgs<ExtArgs>
    admin?: boolean | Resep$adminArgs<ExtArgs>
    kategori?: boolean | KategoriDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    disimpanOleh?: boolean | Resep$disimpanOlehArgs<ExtArgs>
    _count?: boolean | ResepCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ResepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | Resep$adminArgs<ExtArgs>
    kategori?: boolean | KategoriDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | Resep$adminArgs<ExtArgs>
    kategori?: boolean | KategoriDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ResepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Resep"
    objects: {
      bahanList: Prisma.$BahanPayload<ExtArgs>[]
      comment: Prisma.$CommentPayload<ExtArgs>[]
      langkahList: Prisma.$LangkahPembuatanPayload<ExtArgs>[]
      admin: Prisma.$UserPayload<ExtArgs> | null
      kategori: Prisma.$KategoriPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      disimpanOleh: Prisma.$SavedResepPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nama: string
      photoResep: string | null
      kategoriId: number
      tanggalUnggahan: Date
      userId: number
      tanggalAcc: Date | null
      disetujuiOleh: number | null
      isApproved: $Enums.StatusResep
      cookingTime: string
      note: string | null
      rating: number | null
      servingTime: string
      description: string
      preparationTime: string
    }, ExtArgs["result"]["resep"]>
    composites: {}
  }

  type ResepGetPayload<S extends boolean | null | undefined | ResepDefaultArgs> = $Result.GetResult<Prisma.$ResepPayload, S>

  type ResepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResepCountAggregateInputType | true
    }

  export interface ResepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resep'], meta: { name: 'Resep' } }
    /**
     * Find zero or one Resep that matches the filter.
     * @param {ResepFindUniqueArgs} args - Arguments to find a Resep
     * @example
     * // Get one Resep
     * const resep = await prisma.resep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResepFindUniqueArgs>(args: SelectSubset<T, ResepFindUniqueArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Resep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResepFindUniqueOrThrowArgs} args - Arguments to find a Resep
     * @example
     * // Get one Resep
     * const resep = await prisma.resep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResepFindUniqueOrThrowArgs>(args: SelectSubset<T, ResepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Resep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResepFindFirstArgs} args - Arguments to find a Resep
     * @example
     * // Get one Resep
     * const resep = await prisma.resep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResepFindFirstArgs>(args?: SelectSubset<T, ResepFindFirstArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Resep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResepFindFirstOrThrowArgs} args - Arguments to find a Resep
     * @example
     * // Get one Resep
     * const resep = await prisma.resep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResepFindFirstOrThrowArgs>(args?: SelectSubset<T, ResepFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reseps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reseps
     * const reseps = await prisma.resep.findMany()
     * 
     * // Get first 10 Reseps
     * const reseps = await prisma.resep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resepWithIdOnly = await prisma.resep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResepFindManyArgs>(args?: SelectSubset<T, ResepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Resep.
     * @param {ResepCreateArgs} args - Arguments to create a Resep.
     * @example
     * // Create one Resep
     * const Resep = await prisma.resep.create({
     *   data: {
     *     // ... data to create a Resep
     *   }
     * })
     * 
     */
    create<T extends ResepCreateArgs>(args: SelectSubset<T, ResepCreateArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reseps.
     * @param {ResepCreateManyArgs} args - Arguments to create many Reseps.
     * @example
     * // Create many Reseps
     * const resep = await prisma.resep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResepCreateManyArgs>(args?: SelectSubset<T, ResepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reseps and returns the data saved in the database.
     * @param {ResepCreateManyAndReturnArgs} args - Arguments to create many Reseps.
     * @example
     * // Create many Reseps
     * const resep = await prisma.resep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reseps and only return the `id`
     * const resepWithIdOnly = await prisma.resep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResepCreateManyAndReturnArgs>(args?: SelectSubset<T, ResepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Resep.
     * @param {ResepDeleteArgs} args - Arguments to delete one Resep.
     * @example
     * // Delete one Resep
     * const Resep = await prisma.resep.delete({
     *   where: {
     *     // ... filter to delete one Resep
     *   }
     * })
     * 
     */
    delete<T extends ResepDeleteArgs>(args: SelectSubset<T, ResepDeleteArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Resep.
     * @param {ResepUpdateArgs} args - Arguments to update one Resep.
     * @example
     * // Update one Resep
     * const resep = await prisma.resep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResepUpdateArgs>(args: SelectSubset<T, ResepUpdateArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reseps.
     * @param {ResepDeleteManyArgs} args - Arguments to filter Reseps to delete.
     * @example
     * // Delete a few Reseps
     * const { count } = await prisma.resep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResepDeleteManyArgs>(args?: SelectSubset<T, ResepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reseps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reseps
     * const resep = await prisma.resep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResepUpdateManyArgs>(args: SelectSubset<T, ResepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reseps and returns the data updated in the database.
     * @param {ResepUpdateManyAndReturnArgs} args - Arguments to update many Reseps.
     * @example
     * // Update many Reseps
     * const resep = await prisma.resep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reseps and only return the `id`
     * const resepWithIdOnly = await prisma.resep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResepUpdateManyAndReturnArgs>(args: SelectSubset<T, ResepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Resep.
     * @param {ResepUpsertArgs} args - Arguments to update or create a Resep.
     * @example
     * // Update or create a Resep
     * const resep = await prisma.resep.upsert({
     *   create: {
     *     // ... data to create a Resep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resep we want to update
     *   }
     * })
     */
    upsert<T extends ResepUpsertArgs>(args: SelectSubset<T, ResepUpsertArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reseps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResepCountArgs} args - Arguments to filter Reseps to count.
     * @example
     * // Count the number of Reseps
     * const count = await prisma.resep.count({
     *   where: {
     *     // ... the filter for the Reseps we want to count
     *   }
     * })
    **/
    count<T extends ResepCountArgs>(
      args?: Subset<T, ResepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResepAggregateArgs>(args: Subset<T, ResepAggregateArgs>): Prisma.PrismaPromise<GetResepAggregateType<T>>

    /**
     * Group by Resep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResepGroupByArgs['orderBy'] }
        : { orderBy?: ResepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Resep model
   */
  readonly fields: ResepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Resep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bahanList<T extends Resep$bahanListArgs<ExtArgs> = {}>(args?: Subset<T, Resep$bahanListArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comment<T extends Resep$commentArgs<ExtArgs> = {}>(args?: Subset<T, Resep$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    langkahList<T extends Resep$langkahListArgs<ExtArgs> = {}>(args?: Subset<T, Resep$langkahListArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    admin<T extends Resep$adminArgs<ExtArgs> = {}>(args?: Subset<T, Resep$adminArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    kategori<T extends KategoriDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KategoriDefaultArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    disimpanOleh<T extends Resep$disimpanOlehArgs<ExtArgs> = {}>(args?: Subset<T, Resep$disimpanOlehArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Resep model
   */
  interface ResepFieldRefs {
    readonly id: FieldRef<"Resep", 'Int'>
    readonly nama: FieldRef<"Resep", 'String'>
    readonly photoResep: FieldRef<"Resep", 'String'>
    readonly kategoriId: FieldRef<"Resep", 'Int'>
    readonly tanggalUnggahan: FieldRef<"Resep", 'DateTime'>
    readonly userId: FieldRef<"Resep", 'Int'>
    readonly tanggalAcc: FieldRef<"Resep", 'DateTime'>
    readonly disetujuiOleh: FieldRef<"Resep", 'Int'>
    readonly isApproved: FieldRef<"Resep", 'StatusResep'>
    readonly cookingTime: FieldRef<"Resep", 'String'>
    readonly note: FieldRef<"Resep", 'String'>
    readonly rating: FieldRef<"Resep", 'Int'>
    readonly servingTime: FieldRef<"Resep", 'String'>
    readonly description: FieldRef<"Resep", 'String'>
    readonly preparationTime: FieldRef<"Resep", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Resep findUnique
   */
  export type ResepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * Filter, which Resep to fetch.
     */
    where: ResepWhereUniqueInput
  }

  /**
   * Resep findUniqueOrThrow
   */
  export type ResepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * Filter, which Resep to fetch.
     */
    where: ResepWhereUniqueInput
  }

  /**
   * Resep findFirst
   */
  export type ResepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * Filter, which Resep to fetch.
     */
    where?: ResepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reseps to fetch.
     */
    orderBy?: ResepOrderByWithRelationInput | ResepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reseps.
     */
    cursor?: ResepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reseps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reseps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reseps.
     */
    distinct?: ResepScalarFieldEnum | ResepScalarFieldEnum[]
  }

  /**
   * Resep findFirstOrThrow
   */
  export type ResepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * Filter, which Resep to fetch.
     */
    where?: ResepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reseps to fetch.
     */
    orderBy?: ResepOrderByWithRelationInput | ResepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reseps.
     */
    cursor?: ResepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reseps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reseps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reseps.
     */
    distinct?: ResepScalarFieldEnum | ResepScalarFieldEnum[]
  }

  /**
   * Resep findMany
   */
  export type ResepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * Filter, which Reseps to fetch.
     */
    where?: ResepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reseps to fetch.
     */
    orderBy?: ResepOrderByWithRelationInput | ResepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reseps.
     */
    cursor?: ResepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reseps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reseps.
     */
    skip?: number
    distinct?: ResepScalarFieldEnum | ResepScalarFieldEnum[]
  }

  /**
   * Resep create
   */
  export type ResepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * The data needed to create a Resep.
     */
    data: XOR<ResepCreateInput, ResepUncheckedCreateInput>
  }

  /**
   * Resep createMany
   */
  export type ResepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reseps.
     */
    data: ResepCreateManyInput | ResepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Resep createManyAndReturn
   */
  export type ResepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * The data used to create many Reseps.
     */
    data: ResepCreateManyInput | ResepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Resep update
   */
  export type ResepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * The data needed to update a Resep.
     */
    data: XOR<ResepUpdateInput, ResepUncheckedUpdateInput>
    /**
     * Choose, which Resep to update.
     */
    where: ResepWhereUniqueInput
  }

  /**
   * Resep updateMany
   */
  export type ResepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reseps.
     */
    data: XOR<ResepUpdateManyMutationInput, ResepUncheckedUpdateManyInput>
    /**
     * Filter which Reseps to update
     */
    where?: ResepWhereInput
    /**
     * Limit how many Reseps to update.
     */
    limit?: number
  }

  /**
   * Resep updateManyAndReturn
   */
  export type ResepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * The data used to update Reseps.
     */
    data: XOR<ResepUpdateManyMutationInput, ResepUncheckedUpdateManyInput>
    /**
     * Filter which Reseps to update
     */
    where?: ResepWhereInput
    /**
     * Limit how many Reseps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Resep upsert
   */
  export type ResepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * The filter to search for the Resep to update in case it exists.
     */
    where: ResepWhereUniqueInput
    /**
     * In case the Resep found by the `where` argument doesn't exist, create a new Resep with this data.
     */
    create: XOR<ResepCreateInput, ResepUncheckedCreateInput>
    /**
     * In case the Resep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResepUpdateInput, ResepUncheckedUpdateInput>
  }

  /**
   * Resep delete
   */
  export type ResepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    /**
     * Filter which Resep to delete.
     */
    where: ResepWhereUniqueInput
  }

  /**
   * Resep deleteMany
   */
  export type ResepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reseps to delete
     */
    where?: ResepWhereInput
    /**
     * Limit how many Reseps to delete.
     */
    limit?: number
  }

  /**
   * Resep.bahanList
   */
  export type Resep$bahanListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    where?: BahanWhereInput
    orderBy?: BahanOrderByWithRelationInput | BahanOrderByWithRelationInput[]
    cursor?: BahanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BahanScalarFieldEnum | BahanScalarFieldEnum[]
  }

  /**
   * Resep.comment
   */
  export type Resep$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Resep.langkahList
   */
  export type Resep$langkahListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    where?: LangkahPembuatanWhereInput
    orderBy?: LangkahPembuatanOrderByWithRelationInput | LangkahPembuatanOrderByWithRelationInput[]
    cursor?: LangkahPembuatanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LangkahPembuatanScalarFieldEnum | LangkahPembuatanScalarFieldEnum[]
  }

  /**
   * Resep.admin
   */
  export type Resep$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Resep.disimpanOleh
   */
  export type Resep$disimpanOlehArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    where?: SavedResepWhereInput
    orderBy?: SavedResepOrderByWithRelationInput | SavedResepOrderByWithRelationInput[]
    cursor?: SavedResepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedResepScalarFieldEnum | SavedResepScalarFieldEnum[]
  }

  /**
   * Resep without action
   */
  export type ResepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
  }


  /**
   * Model SavedResep
   */

  export type AggregateSavedResep = {
    _count: SavedResepCountAggregateOutputType | null
    _avg: SavedResepAvgAggregateOutputType | null
    _sum: SavedResepSumAggregateOutputType | null
    _min: SavedResepMinAggregateOutputType | null
    _max: SavedResepMaxAggregateOutputType | null
  }

  export type SavedResepAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    resepId: number | null
  }

  export type SavedResepSumAggregateOutputType = {
    id: number | null
    userId: number | null
    resepId: number | null
  }

  export type SavedResepMinAggregateOutputType = {
    id: number | null
    userId: number | null
    resepId: number | null
    savedAt: Date | null
  }

  export type SavedResepMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    resepId: number | null
    savedAt: Date | null
  }

  export type SavedResepCountAggregateOutputType = {
    id: number
    userId: number
    resepId: number
    savedAt: number
    _all: number
  }


  export type SavedResepAvgAggregateInputType = {
    id?: true
    userId?: true
    resepId?: true
  }

  export type SavedResepSumAggregateInputType = {
    id?: true
    userId?: true
    resepId?: true
  }

  export type SavedResepMinAggregateInputType = {
    id?: true
    userId?: true
    resepId?: true
    savedAt?: true
  }

  export type SavedResepMaxAggregateInputType = {
    id?: true
    userId?: true
    resepId?: true
    savedAt?: true
  }

  export type SavedResepCountAggregateInputType = {
    id?: true
    userId?: true
    resepId?: true
    savedAt?: true
    _all?: true
  }

  export type SavedResepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedResep to aggregate.
     */
    where?: SavedResepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedReseps to fetch.
     */
    orderBy?: SavedResepOrderByWithRelationInput | SavedResepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedResepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedReseps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedReseps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedReseps
    **/
    _count?: true | SavedResepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SavedResepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SavedResepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedResepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedResepMaxAggregateInputType
  }

  export type GetSavedResepAggregateType<T extends SavedResepAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedResep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedResep[P]>
      : GetScalarType<T[P], AggregateSavedResep[P]>
  }




  export type SavedResepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedResepWhereInput
    orderBy?: SavedResepOrderByWithAggregationInput | SavedResepOrderByWithAggregationInput[]
    by: SavedResepScalarFieldEnum[] | SavedResepScalarFieldEnum
    having?: SavedResepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedResepCountAggregateInputType | true
    _avg?: SavedResepAvgAggregateInputType
    _sum?: SavedResepSumAggregateInputType
    _min?: SavedResepMinAggregateInputType
    _max?: SavedResepMaxAggregateInputType
  }

  export type SavedResepGroupByOutputType = {
    id: number
    userId: number
    resepId: number
    savedAt: Date
    _count: SavedResepCountAggregateOutputType | null
    _avg: SavedResepAvgAggregateOutputType | null
    _sum: SavedResepSumAggregateOutputType | null
    _min: SavedResepMinAggregateOutputType | null
    _max: SavedResepMaxAggregateOutputType | null
  }

  type GetSavedResepGroupByPayload<T extends SavedResepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SavedResepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedResepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedResepGroupByOutputType[P]>
            : GetScalarType<T[P], SavedResepGroupByOutputType[P]>
        }
      >
    >


  export type SavedResepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resepId?: boolean
    savedAt?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedResep"]>

  export type SavedResepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resepId?: boolean
    savedAt?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedResep"]>

  export type SavedResepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resepId?: boolean
    savedAt?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedResep"]>

  export type SavedResepSelectScalar = {
    id?: boolean
    userId?: boolean
    resepId?: boolean
    savedAt?: boolean
  }

  export type SavedResepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "resepId" | "savedAt", ExtArgs["result"]["savedResep"]>
  export type SavedResepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SavedResepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SavedResepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SavedResepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SavedResep"
    objects: {
      resep: Prisma.$ResepPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      resepId: number
      savedAt: Date
    }, ExtArgs["result"]["savedResep"]>
    composites: {}
  }

  type SavedResepGetPayload<S extends boolean | null | undefined | SavedResepDefaultArgs> = $Result.GetResult<Prisma.$SavedResepPayload, S>

  type SavedResepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SavedResepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SavedResepCountAggregateInputType | true
    }

  export interface SavedResepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedResep'], meta: { name: 'SavedResep' } }
    /**
     * Find zero or one SavedResep that matches the filter.
     * @param {SavedResepFindUniqueArgs} args - Arguments to find a SavedResep
     * @example
     * // Get one SavedResep
     * const savedResep = await prisma.savedResep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SavedResepFindUniqueArgs>(args: SelectSubset<T, SavedResepFindUniqueArgs<ExtArgs>>): Prisma__SavedResepClient<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SavedResep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SavedResepFindUniqueOrThrowArgs} args - Arguments to find a SavedResep
     * @example
     * // Get one SavedResep
     * const savedResep = await prisma.savedResep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SavedResepFindUniqueOrThrowArgs>(args: SelectSubset<T, SavedResepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SavedResepClient<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedResep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResepFindFirstArgs} args - Arguments to find a SavedResep
     * @example
     * // Get one SavedResep
     * const savedResep = await prisma.savedResep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SavedResepFindFirstArgs>(args?: SelectSubset<T, SavedResepFindFirstArgs<ExtArgs>>): Prisma__SavedResepClient<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedResep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResepFindFirstOrThrowArgs} args - Arguments to find a SavedResep
     * @example
     * // Get one SavedResep
     * const savedResep = await prisma.savedResep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SavedResepFindFirstOrThrowArgs>(args?: SelectSubset<T, SavedResepFindFirstOrThrowArgs<ExtArgs>>): Prisma__SavedResepClient<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SavedReseps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedReseps
     * const savedReseps = await prisma.savedResep.findMany()
     * 
     * // Get first 10 SavedReseps
     * const savedReseps = await prisma.savedResep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedResepWithIdOnly = await prisma.savedResep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SavedResepFindManyArgs>(args?: SelectSubset<T, SavedResepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SavedResep.
     * @param {SavedResepCreateArgs} args - Arguments to create a SavedResep.
     * @example
     * // Create one SavedResep
     * const SavedResep = await prisma.savedResep.create({
     *   data: {
     *     // ... data to create a SavedResep
     *   }
     * })
     * 
     */
    create<T extends SavedResepCreateArgs>(args: SelectSubset<T, SavedResepCreateArgs<ExtArgs>>): Prisma__SavedResepClient<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SavedReseps.
     * @param {SavedResepCreateManyArgs} args - Arguments to create many SavedReseps.
     * @example
     * // Create many SavedReseps
     * const savedResep = await prisma.savedResep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SavedResepCreateManyArgs>(args?: SelectSubset<T, SavedResepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SavedReseps and returns the data saved in the database.
     * @param {SavedResepCreateManyAndReturnArgs} args - Arguments to create many SavedReseps.
     * @example
     * // Create many SavedReseps
     * const savedResep = await prisma.savedResep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SavedReseps and only return the `id`
     * const savedResepWithIdOnly = await prisma.savedResep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SavedResepCreateManyAndReturnArgs>(args?: SelectSubset<T, SavedResepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SavedResep.
     * @param {SavedResepDeleteArgs} args - Arguments to delete one SavedResep.
     * @example
     * // Delete one SavedResep
     * const SavedResep = await prisma.savedResep.delete({
     *   where: {
     *     // ... filter to delete one SavedResep
     *   }
     * })
     * 
     */
    delete<T extends SavedResepDeleteArgs>(args: SelectSubset<T, SavedResepDeleteArgs<ExtArgs>>): Prisma__SavedResepClient<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SavedResep.
     * @param {SavedResepUpdateArgs} args - Arguments to update one SavedResep.
     * @example
     * // Update one SavedResep
     * const savedResep = await prisma.savedResep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SavedResepUpdateArgs>(args: SelectSubset<T, SavedResepUpdateArgs<ExtArgs>>): Prisma__SavedResepClient<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SavedReseps.
     * @param {SavedResepDeleteManyArgs} args - Arguments to filter SavedReseps to delete.
     * @example
     * // Delete a few SavedReseps
     * const { count } = await prisma.savedResep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SavedResepDeleteManyArgs>(args?: SelectSubset<T, SavedResepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedReseps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedReseps
     * const savedResep = await prisma.savedResep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SavedResepUpdateManyArgs>(args: SelectSubset<T, SavedResepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedReseps and returns the data updated in the database.
     * @param {SavedResepUpdateManyAndReturnArgs} args - Arguments to update many SavedReseps.
     * @example
     * // Update many SavedReseps
     * const savedResep = await prisma.savedResep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SavedReseps and only return the `id`
     * const savedResepWithIdOnly = await prisma.savedResep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SavedResepUpdateManyAndReturnArgs>(args: SelectSubset<T, SavedResepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SavedResep.
     * @param {SavedResepUpsertArgs} args - Arguments to update or create a SavedResep.
     * @example
     * // Update or create a SavedResep
     * const savedResep = await prisma.savedResep.upsert({
     *   create: {
     *     // ... data to create a SavedResep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedResep we want to update
     *   }
     * })
     */
    upsert<T extends SavedResepUpsertArgs>(args: SelectSubset<T, SavedResepUpsertArgs<ExtArgs>>): Prisma__SavedResepClient<$Result.GetResult<Prisma.$SavedResepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SavedReseps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResepCountArgs} args - Arguments to filter SavedReseps to count.
     * @example
     * // Count the number of SavedReseps
     * const count = await prisma.savedResep.count({
     *   where: {
     *     // ... the filter for the SavedReseps we want to count
     *   }
     * })
    **/
    count<T extends SavedResepCountArgs>(
      args?: Subset<T, SavedResepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedResepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedResep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedResepAggregateArgs>(args: Subset<T, SavedResepAggregateArgs>): Prisma.PrismaPromise<GetSavedResepAggregateType<T>>

    /**
     * Group by SavedResep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedResepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedResepGroupByArgs['orderBy'] }
        : { orderBy?: SavedResepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedResepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedResepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SavedResep model
   */
  readonly fields: SavedResepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedResep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SavedResepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resep<T extends ResepDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResepDefaultArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SavedResep model
   */
  interface SavedResepFieldRefs {
    readonly id: FieldRef<"SavedResep", 'Int'>
    readonly userId: FieldRef<"SavedResep", 'Int'>
    readonly resepId: FieldRef<"SavedResep", 'Int'>
    readonly savedAt: FieldRef<"SavedResep", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SavedResep findUnique
   */
  export type SavedResepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * Filter, which SavedResep to fetch.
     */
    where: SavedResepWhereUniqueInput
  }

  /**
   * SavedResep findUniqueOrThrow
   */
  export type SavedResepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * Filter, which SavedResep to fetch.
     */
    where: SavedResepWhereUniqueInput
  }

  /**
   * SavedResep findFirst
   */
  export type SavedResepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * Filter, which SavedResep to fetch.
     */
    where?: SavedResepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedReseps to fetch.
     */
    orderBy?: SavedResepOrderByWithRelationInput | SavedResepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedReseps.
     */
    cursor?: SavedResepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedReseps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedReseps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedReseps.
     */
    distinct?: SavedResepScalarFieldEnum | SavedResepScalarFieldEnum[]
  }

  /**
   * SavedResep findFirstOrThrow
   */
  export type SavedResepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * Filter, which SavedResep to fetch.
     */
    where?: SavedResepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedReseps to fetch.
     */
    orderBy?: SavedResepOrderByWithRelationInput | SavedResepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedReseps.
     */
    cursor?: SavedResepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedReseps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedReseps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedReseps.
     */
    distinct?: SavedResepScalarFieldEnum | SavedResepScalarFieldEnum[]
  }

  /**
   * SavedResep findMany
   */
  export type SavedResepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * Filter, which SavedReseps to fetch.
     */
    where?: SavedResepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedReseps to fetch.
     */
    orderBy?: SavedResepOrderByWithRelationInput | SavedResepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedReseps.
     */
    cursor?: SavedResepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedReseps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedReseps.
     */
    skip?: number
    distinct?: SavedResepScalarFieldEnum | SavedResepScalarFieldEnum[]
  }

  /**
   * SavedResep create
   */
  export type SavedResepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedResep.
     */
    data: XOR<SavedResepCreateInput, SavedResepUncheckedCreateInput>
  }

  /**
   * SavedResep createMany
   */
  export type SavedResepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedReseps.
     */
    data: SavedResepCreateManyInput | SavedResepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SavedResep createManyAndReturn
   */
  export type SavedResepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * The data used to create many SavedReseps.
     */
    data: SavedResepCreateManyInput | SavedResepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedResep update
   */
  export type SavedResepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedResep.
     */
    data: XOR<SavedResepUpdateInput, SavedResepUncheckedUpdateInput>
    /**
     * Choose, which SavedResep to update.
     */
    where: SavedResepWhereUniqueInput
  }

  /**
   * SavedResep updateMany
   */
  export type SavedResepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedReseps.
     */
    data: XOR<SavedResepUpdateManyMutationInput, SavedResepUncheckedUpdateManyInput>
    /**
     * Filter which SavedReseps to update
     */
    where?: SavedResepWhereInput
    /**
     * Limit how many SavedReseps to update.
     */
    limit?: number
  }

  /**
   * SavedResep updateManyAndReturn
   */
  export type SavedResepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * The data used to update SavedReseps.
     */
    data: XOR<SavedResepUpdateManyMutationInput, SavedResepUncheckedUpdateManyInput>
    /**
     * Filter which SavedReseps to update
     */
    where?: SavedResepWhereInput
    /**
     * Limit how many SavedReseps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedResep upsert
   */
  export type SavedResepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedResep to update in case it exists.
     */
    where: SavedResepWhereUniqueInput
    /**
     * In case the SavedResep found by the `where` argument doesn't exist, create a new SavedResep with this data.
     */
    create: XOR<SavedResepCreateInput, SavedResepUncheckedCreateInput>
    /**
     * In case the SavedResep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedResepUpdateInput, SavedResepUncheckedUpdateInput>
  }

  /**
   * SavedResep delete
   */
  export type SavedResepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
    /**
     * Filter which SavedResep to delete.
     */
    where: SavedResepWhereUniqueInput
  }

  /**
   * SavedResep deleteMany
   */
  export type SavedResepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedReseps to delete
     */
    where?: SavedResepWhereInput
    /**
     * Limit how many SavedReseps to delete.
     */
    limit?: number
  }

  /**
   * SavedResep without action
   */
  export type SavedResepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResep
     */
    select?: SavedResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResep
     */
    omit?: SavedResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResepInclude<ExtArgs> | null
  }


  /**
   * Model Kategori
   */

  export type AggregateKategori = {
    _count: KategoriCountAggregateOutputType | null
    _avg: KategoriAvgAggregateOutputType | null
    _sum: KategoriSumAggregateOutputType | null
    _min: KategoriMinAggregateOutputType | null
    _max: KategoriMaxAggregateOutputType | null
  }

  export type KategoriAvgAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type KategoriSumAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type KategoriMinAggregateOutputType = {
    id: number | null
    nama: string | null
    createdAt: Date | null
    parentId: number | null
    updatedAt: Date | null
  }

  export type KategoriMaxAggregateOutputType = {
    id: number | null
    nama: string | null
    createdAt: Date | null
    parentId: number | null
    updatedAt: Date | null
  }

  export type KategoriCountAggregateOutputType = {
    id: number
    nama: number
    createdAt: number
    parentId: number
    updatedAt: number
    _all: number
  }


  export type KategoriAvgAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type KategoriSumAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type KategoriMinAggregateInputType = {
    id?: true
    nama?: true
    createdAt?: true
    parentId?: true
    updatedAt?: true
  }

  export type KategoriMaxAggregateInputType = {
    id?: true
    nama?: true
    createdAt?: true
    parentId?: true
    updatedAt?: true
  }

  export type KategoriCountAggregateInputType = {
    id?: true
    nama?: true
    createdAt?: true
    parentId?: true
    updatedAt?: true
    _all?: true
  }

  export type KategoriAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kategori to aggregate.
     */
    where?: KategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kategoris to fetch.
     */
    orderBy?: KategoriOrderByWithRelationInput | KategoriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kategoris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kategoris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kategoris
    **/
    _count?: true | KategoriCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KategoriAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KategoriSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KategoriMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KategoriMaxAggregateInputType
  }

  export type GetKategoriAggregateType<T extends KategoriAggregateArgs> = {
        [P in keyof T & keyof AggregateKategori]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKategori[P]>
      : GetScalarType<T[P], AggregateKategori[P]>
  }




  export type KategoriGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KategoriWhereInput
    orderBy?: KategoriOrderByWithAggregationInput | KategoriOrderByWithAggregationInput[]
    by: KategoriScalarFieldEnum[] | KategoriScalarFieldEnum
    having?: KategoriScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KategoriCountAggregateInputType | true
    _avg?: KategoriAvgAggregateInputType
    _sum?: KategoriSumAggregateInputType
    _min?: KategoriMinAggregateInputType
    _max?: KategoriMaxAggregateInputType
  }

  export type KategoriGroupByOutputType = {
    id: number
    nama: string
    createdAt: Date
    parentId: number | null
    updatedAt: Date | null
    _count: KategoriCountAggregateOutputType | null
    _avg: KategoriAvgAggregateOutputType | null
    _sum: KategoriSumAggregateOutputType | null
    _min: KategoriMinAggregateOutputType | null
    _max: KategoriMaxAggregateOutputType | null
  }

  type GetKategoriGroupByPayload<T extends KategoriGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KategoriGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KategoriGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KategoriGroupByOutputType[P]>
            : GetScalarType<T[P], KategoriGroupByOutputType[P]>
        }
      >
    >


  export type KategoriSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    createdAt?: boolean
    parentId?: boolean
    updatedAt?: boolean
    parent?: boolean | Kategori$parentArgs<ExtArgs>
    subcategories?: boolean | Kategori$subcategoriesArgs<ExtArgs>
    resep?: boolean | Kategori$resepArgs<ExtArgs>
    _count?: boolean | KategoriCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kategori"]>

  export type KategoriSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    createdAt?: boolean
    parentId?: boolean
    updatedAt?: boolean
    parent?: boolean | Kategori$parentArgs<ExtArgs>
  }, ExtArgs["result"]["kategori"]>

  export type KategoriSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    createdAt?: boolean
    parentId?: boolean
    updatedAt?: boolean
    parent?: boolean | Kategori$parentArgs<ExtArgs>
  }, ExtArgs["result"]["kategori"]>

  export type KategoriSelectScalar = {
    id?: boolean
    nama?: boolean
    createdAt?: boolean
    parentId?: boolean
    updatedAt?: boolean
  }

  export type KategoriOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nama" | "createdAt" | "parentId" | "updatedAt", ExtArgs["result"]["kategori"]>
  export type KategoriInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Kategori$parentArgs<ExtArgs>
    subcategories?: boolean | Kategori$subcategoriesArgs<ExtArgs>
    resep?: boolean | Kategori$resepArgs<ExtArgs>
    _count?: boolean | KategoriCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KategoriIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Kategori$parentArgs<ExtArgs>
  }
  export type KategoriIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Kategori$parentArgs<ExtArgs>
  }

  export type $KategoriPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kategori"
    objects: {
      parent: Prisma.$KategoriPayload<ExtArgs> | null
      subcategories: Prisma.$KategoriPayload<ExtArgs>[]
      resep: Prisma.$ResepPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nama: string
      createdAt: Date
      parentId: number | null
      updatedAt: Date | null
    }, ExtArgs["result"]["kategori"]>
    composites: {}
  }

  type KategoriGetPayload<S extends boolean | null | undefined | KategoriDefaultArgs> = $Result.GetResult<Prisma.$KategoriPayload, S>

  type KategoriCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KategoriFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KategoriCountAggregateInputType | true
    }

  export interface KategoriDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kategori'], meta: { name: 'Kategori' } }
    /**
     * Find zero or one Kategori that matches the filter.
     * @param {KategoriFindUniqueArgs} args - Arguments to find a Kategori
     * @example
     * // Get one Kategori
     * const kategori = await prisma.kategori.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KategoriFindUniqueArgs>(args: SelectSubset<T, KategoriFindUniqueArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Kategori that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KategoriFindUniqueOrThrowArgs} args - Arguments to find a Kategori
     * @example
     * // Get one Kategori
     * const kategori = await prisma.kategori.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KategoriFindUniqueOrThrowArgs>(args: SelectSubset<T, KategoriFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Kategori that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriFindFirstArgs} args - Arguments to find a Kategori
     * @example
     * // Get one Kategori
     * const kategori = await prisma.kategori.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KategoriFindFirstArgs>(args?: SelectSubset<T, KategoriFindFirstArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Kategori that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriFindFirstOrThrowArgs} args - Arguments to find a Kategori
     * @example
     * // Get one Kategori
     * const kategori = await prisma.kategori.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KategoriFindFirstOrThrowArgs>(args?: SelectSubset<T, KategoriFindFirstOrThrowArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Kategoris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kategoris
     * const kategoris = await prisma.kategori.findMany()
     * 
     * // Get first 10 Kategoris
     * const kategoris = await prisma.kategori.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kategoriWithIdOnly = await prisma.kategori.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KategoriFindManyArgs>(args?: SelectSubset<T, KategoriFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Kategori.
     * @param {KategoriCreateArgs} args - Arguments to create a Kategori.
     * @example
     * // Create one Kategori
     * const Kategori = await prisma.kategori.create({
     *   data: {
     *     // ... data to create a Kategori
     *   }
     * })
     * 
     */
    create<T extends KategoriCreateArgs>(args: SelectSubset<T, KategoriCreateArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Kategoris.
     * @param {KategoriCreateManyArgs} args - Arguments to create many Kategoris.
     * @example
     * // Create many Kategoris
     * const kategori = await prisma.kategori.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KategoriCreateManyArgs>(args?: SelectSubset<T, KategoriCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Kategoris and returns the data saved in the database.
     * @param {KategoriCreateManyAndReturnArgs} args - Arguments to create many Kategoris.
     * @example
     * // Create many Kategoris
     * const kategori = await prisma.kategori.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Kategoris and only return the `id`
     * const kategoriWithIdOnly = await prisma.kategori.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KategoriCreateManyAndReturnArgs>(args?: SelectSubset<T, KategoriCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Kategori.
     * @param {KategoriDeleteArgs} args - Arguments to delete one Kategori.
     * @example
     * // Delete one Kategori
     * const Kategori = await prisma.kategori.delete({
     *   where: {
     *     // ... filter to delete one Kategori
     *   }
     * })
     * 
     */
    delete<T extends KategoriDeleteArgs>(args: SelectSubset<T, KategoriDeleteArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Kategori.
     * @param {KategoriUpdateArgs} args - Arguments to update one Kategori.
     * @example
     * // Update one Kategori
     * const kategori = await prisma.kategori.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KategoriUpdateArgs>(args: SelectSubset<T, KategoriUpdateArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Kategoris.
     * @param {KategoriDeleteManyArgs} args - Arguments to filter Kategoris to delete.
     * @example
     * // Delete a few Kategoris
     * const { count } = await prisma.kategori.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KategoriDeleteManyArgs>(args?: SelectSubset<T, KategoriDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kategoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kategoris
     * const kategori = await prisma.kategori.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KategoriUpdateManyArgs>(args: SelectSubset<T, KategoriUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kategoris and returns the data updated in the database.
     * @param {KategoriUpdateManyAndReturnArgs} args - Arguments to update many Kategoris.
     * @example
     * // Update many Kategoris
     * const kategori = await prisma.kategori.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Kategoris and only return the `id`
     * const kategoriWithIdOnly = await prisma.kategori.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KategoriUpdateManyAndReturnArgs>(args: SelectSubset<T, KategoriUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Kategori.
     * @param {KategoriUpsertArgs} args - Arguments to update or create a Kategori.
     * @example
     * // Update or create a Kategori
     * const kategori = await prisma.kategori.upsert({
     *   create: {
     *     // ... data to create a Kategori
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kategori we want to update
     *   }
     * })
     */
    upsert<T extends KategoriUpsertArgs>(args: SelectSubset<T, KategoriUpsertArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Kategoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriCountArgs} args - Arguments to filter Kategoris to count.
     * @example
     * // Count the number of Kategoris
     * const count = await prisma.kategori.count({
     *   where: {
     *     // ... the filter for the Kategoris we want to count
     *   }
     * })
    **/
    count<T extends KategoriCountArgs>(
      args?: Subset<T, KategoriCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KategoriCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kategori.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KategoriAggregateArgs>(args: Subset<T, KategoriAggregateArgs>): Prisma.PrismaPromise<GetKategoriAggregateType<T>>

    /**
     * Group by Kategori.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KategoriGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KategoriGroupByArgs['orderBy'] }
        : { orderBy?: KategoriGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KategoriGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKategoriGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kategori model
   */
  readonly fields: KategoriFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kategori.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KategoriClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Kategori$parentArgs<ExtArgs> = {}>(args?: Subset<T, Kategori$parentArgs<ExtArgs>>): Prisma__KategoriClient<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subcategories<T extends Kategori$subcategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Kategori$subcategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KategoriPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resep<T extends Kategori$resepArgs<ExtArgs> = {}>(args?: Subset<T, Kategori$resepArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Kategori model
   */
  interface KategoriFieldRefs {
    readonly id: FieldRef<"Kategori", 'Int'>
    readonly nama: FieldRef<"Kategori", 'String'>
    readonly createdAt: FieldRef<"Kategori", 'DateTime'>
    readonly parentId: FieldRef<"Kategori", 'Int'>
    readonly updatedAt: FieldRef<"Kategori", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Kategori findUnique
   */
  export type KategoriFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * Filter, which Kategori to fetch.
     */
    where: KategoriWhereUniqueInput
  }

  /**
   * Kategori findUniqueOrThrow
   */
  export type KategoriFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * Filter, which Kategori to fetch.
     */
    where: KategoriWhereUniqueInput
  }

  /**
   * Kategori findFirst
   */
  export type KategoriFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * Filter, which Kategori to fetch.
     */
    where?: KategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kategoris to fetch.
     */
    orderBy?: KategoriOrderByWithRelationInput | KategoriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kategoris.
     */
    cursor?: KategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kategoris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kategoris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kategoris.
     */
    distinct?: KategoriScalarFieldEnum | KategoriScalarFieldEnum[]
  }

  /**
   * Kategori findFirstOrThrow
   */
  export type KategoriFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * Filter, which Kategori to fetch.
     */
    where?: KategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kategoris to fetch.
     */
    orderBy?: KategoriOrderByWithRelationInput | KategoriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kategoris.
     */
    cursor?: KategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kategoris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kategoris.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kategoris.
     */
    distinct?: KategoriScalarFieldEnum | KategoriScalarFieldEnum[]
  }

  /**
   * Kategori findMany
   */
  export type KategoriFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * Filter, which Kategoris to fetch.
     */
    where?: KategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kategoris to fetch.
     */
    orderBy?: KategoriOrderByWithRelationInput | KategoriOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kategoris.
     */
    cursor?: KategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kategoris from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kategoris.
     */
    skip?: number
    distinct?: KategoriScalarFieldEnum | KategoriScalarFieldEnum[]
  }

  /**
   * Kategori create
   */
  export type KategoriCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * The data needed to create a Kategori.
     */
    data: XOR<KategoriCreateInput, KategoriUncheckedCreateInput>
  }

  /**
   * Kategori createMany
   */
  export type KategoriCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kategoris.
     */
    data: KategoriCreateManyInput | KategoriCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Kategori createManyAndReturn
   */
  export type KategoriCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * The data used to create many Kategoris.
     */
    data: KategoriCreateManyInput | KategoriCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Kategori update
   */
  export type KategoriUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * The data needed to update a Kategori.
     */
    data: XOR<KategoriUpdateInput, KategoriUncheckedUpdateInput>
    /**
     * Choose, which Kategori to update.
     */
    where: KategoriWhereUniqueInput
  }

  /**
   * Kategori updateMany
   */
  export type KategoriUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kategoris.
     */
    data: XOR<KategoriUpdateManyMutationInput, KategoriUncheckedUpdateManyInput>
    /**
     * Filter which Kategoris to update
     */
    where?: KategoriWhereInput
    /**
     * Limit how many Kategoris to update.
     */
    limit?: number
  }

  /**
   * Kategori updateManyAndReturn
   */
  export type KategoriUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * The data used to update Kategoris.
     */
    data: XOR<KategoriUpdateManyMutationInput, KategoriUncheckedUpdateManyInput>
    /**
     * Filter which Kategoris to update
     */
    where?: KategoriWhereInput
    /**
     * Limit how many Kategoris to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Kategori upsert
   */
  export type KategoriUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * The filter to search for the Kategori to update in case it exists.
     */
    where: KategoriWhereUniqueInput
    /**
     * In case the Kategori found by the `where` argument doesn't exist, create a new Kategori with this data.
     */
    create: XOR<KategoriCreateInput, KategoriUncheckedCreateInput>
    /**
     * In case the Kategori was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KategoriUpdateInput, KategoriUncheckedUpdateInput>
  }

  /**
   * Kategori delete
   */
  export type KategoriDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    /**
     * Filter which Kategori to delete.
     */
    where: KategoriWhereUniqueInput
  }

  /**
   * Kategori deleteMany
   */
  export type KategoriDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kategoris to delete
     */
    where?: KategoriWhereInput
    /**
     * Limit how many Kategoris to delete.
     */
    limit?: number
  }

  /**
   * Kategori.parent
   */
  export type Kategori$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    where?: KategoriWhereInput
  }

  /**
   * Kategori.subcategories
   */
  export type Kategori$subcategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
    where?: KategoriWhereInput
    orderBy?: KategoriOrderByWithRelationInput | KategoriOrderByWithRelationInput[]
    cursor?: KategoriWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KategoriScalarFieldEnum | KategoriScalarFieldEnum[]
  }

  /**
   * Kategori.resep
   */
  export type Kategori$resepArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resep
     */
    select?: ResepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resep
     */
    omit?: ResepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResepInclude<ExtArgs> | null
    where?: ResepWhereInput
    orderBy?: ResepOrderByWithRelationInput | ResepOrderByWithRelationInput[]
    cursor?: ResepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResepScalarFieldEnum | ResepScalarFieldEnum[]
  }

  /**
   * Kategori without action
   */
  export type KategoriDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kategori
     */
    select?: KategoriSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Kategori
     */
    omit?: KategoriOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KategoriInclude<ExtArgs> | null
  }


  /**
   * Model Bahan
   */

  export type AggregateBahan = {
    _count: BahanCountAggregateOutputType | null
    _avg: BahanAvgAggregateOutputType | null
    _sum: BahanSumAggregateOutputType | null
    _min: BahanMinAggregateOutputType | null
    _max: BahanMaxAggregateOutputType | null
  }

  export type BahanAvgAggregateOutputType = {
    id: number | null
    resepId: number | null
  }

  export type BahanSumAggregateOutputType = {
    id: number | null
    resepId: number | null
  }

  export type BahanMinAggregateOutputType = {
    id: number | null
    resepId: number | null
    nama: string | null
    jumlah: string | null
  }

  export type BahanMaxAggregateOutputType = {
    id: number | null
    resepId: number | null
    nama: string | null
    jumlah: string | null
  }

  export type BahanCountAggregateOutputType = {
    id: number
    resepId: number
    nama: number
    jumlah: number
    _all: number
  }


  export type BahanAvgAggregateInputType = {
    id?: true
    resepId?: true
  }

  export type BahanSumAggregateInputType = {
    id?: true
    resepId?: true
  }

  export type BahanMinAggregateInputType = {
    id?: true
    resepId?: true
    nama?: true
    jumlah?: true
  }

  export type BahanMaxAggregateInputType = {
    id?: true
    resepId?: true
    nama?: true
    jumlah?: true
  }

  export type BahanCountAggregateInputType = {
    id?: true
    resepId?: true
    nama?: true
    jumlah?: true
    _all?: true
  }

  export type BahanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bahan to aggregate.
     */
    where?: BahanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bahans to fetch.
     */
    orderBy?: BahanOrderByWithRelationInput | BahanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BahanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bahans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bahans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bahans
    **/
    _count?: true | BahanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BahanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BahanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BahanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BahanMaxAggregateInputType
  }

  export type GetBahanAggregateType<T extends BahanAggregateArgs> = {
        [P in keyof T & keyof AggregateBahan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBahan[P]>
      : GetScalarType<T[P], AggregateBahan[P]>
  }




  export type BahanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BahanWhereInput
    orderBy?: BahanOrderByWithAggregationInput | BahanOrderByWithAggregationInput[]
    by: BahanScalarFieldEnum[] | BahanScalarFieldEnum
    having?: BahanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BahanCountAggregateInputType | true
    _avg?: BahanAvgAggregateInputType
    _sum?: BahanSumAggregateInputType
    _min?: BahanMinAggregateInputType
    _max?: BahanMaxAggregateInputType
  }

  export type BahanGroupByOutputType = {
    id: number
    resepId: number
    nama: string
    jumlah: string
    _count: BahanCountAggregateOutputType | null
    _avg: BahanAvgAggregateOutputType | null
    _sum: BahanSumAggregateOutputType | null
    _min: BahanMinAggregateOutputType | null
    _max: BahanMaxAggregateOutputType | null
  }

  type GetBahanGroupByPayload<T extends BahanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BahanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BahanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BahanGroupByOutputType[P]>
            : GetScalarType<T[P], BahanGroupByOutputType[P]>
        }
      >
    >


  export type BahanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    nama?: boolean
    jumlah?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bahan"]>

  export type BahanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    nama?: boolean
    jumlah?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bahan"]>

  export type BahanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    nama?: boolean
    jumlah?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bahan"]>

  export type BahanSelectScalar = {
    id?: boolean
    resepId?: boolean
    nama?: boolean
    jumlah?: boolean
  }

  export type BahanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resepId" | "nama" | "jumlah", ExtArgs["result"]["bahan"]>
  export type BahanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }
  export type BahanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }
  export type BahanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }

  export type $BahanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bahan"
    objects: {
      resep: Prisma.$ResepPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resepId: number
      nama: string
      jumlah: string
    }, ExtArgs["result"]["bahan"]>
    composites: {}
  }

  type BahanGetPayload<S extends boolean | null | undefined | BahanDefaultArgs> = $Result.GetResult<Prisma.$BahanPayload, S>

  type BahanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BahanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BahanCountAggregateInputType | true
    }

  export interface BahanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bahan'], meta: { name: 'Bahan' } }
    /**
     * Find zero or one Bahan that matches the filter.
     * @param {BahanFindUniqueArgs} args - Arguments to find a Bahan
     * @example
     * // Get one Bahan
     * const bahan = await prisma.bahan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BahanFindUniqueArgs>(args: SelectSubset<T, BahanFindUniqueArgs<ExtArgs>>): Prisma__BahanClient<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bahan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BahanFindUniqueOrThrowArgs} args - Arguments to find a Bahan
     * @example
     * // Get one Bahan
     * const bahan = await prisma.bahan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BahanFindUniqueOrThrowArgs>(args: SelectSubset<T, BahanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BahanClient<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bahan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BahanFindFirstArgs} args - Arguments to find a Bahan
     * @example
     * // Get one Bahan
     * const bahan = await prisma.bahan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BahanFindFirstArgs>(args?: SelectSubset<T, BahanFindFirstArgs<ExtArgs>>): Prisma__BahanClient<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bahan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BahanFindFirstOrThrowArgs} args - Arguments to find a Bahan
     * @example
     * // Get one Bahan
     * const bahan = await prisma.bahan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BahanFindFirstOrThrowArgs>(args?: SelectSubset<T, BahanFindFirstOrThrowArgs<ExtArgs>>): Prisma__BahanClient<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bahans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BahanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bahans
     * const bahans = await prisma.bahan.findMany()
     * 
     * // Get first 10 Bahans
     * const bahans = await prisma.bahan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bahanWithIdOnly = await prisma.bahan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BahanFindManyArgs>(args?: SelectSubset<T, BahanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bahan.
     * @param {BahanCreateArgs} args - Arguments to create a Bahan.
     * @example
     * // Create one Bahan
     * const Bahan = await prisma.bahan.create({
     *   data: {
     *     // ... data to create a Bahan
     *   }
     * })
     * 
     */
    create<T extends BahanCreateArgs>(args: SelectSubset<T, BahanCreateArgs<ExtArgs>>): Prisma__BahanClient<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bahans.
     * @param {BahanCreateManyArgs} args - Arguments to create many Bahans.
     * @example
     * // Create many Bahans
     * const bahan = await prisma.bahan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BahanCreateManyArgs>(args?: SelectSubset<T, BahanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bahans and returns the data saved in the database.
     * @param {BahanCreateManyAndReturnArgs} args - Arguments to create many Bahans.
     * @example
     * // Create many Bahans
     * const bahan = await prisma.bahan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bahans and only return the `id`
     * const bahanWithIdOnly = await prisma.bahan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BahanCreateManyAndReturnArgs>(args?: SelectSubset<T, BahanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bahan.
     * @param {BahanDeleteArgs} args - Arguments to delete one Bahan.
     * @example
     * // Delete one Bahan
     * const Bahan = await prisma.bahan.delete({
     *   where: {
     *     // ... filter to delete one Bahan
     *   }
     * })
     * 
     */
    delete<T extends BahanDeleteArgs>(args: SelectSubset<T, BahanDeleteArgs<ExtArgs>>): Prisma__BahanClient<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bahan.
     * @param {BahanUpdateArgs} args - Arguments to update one Bahan.
     * @example
     * // Update one Bahan
     * const bahan = await prisma.bahan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BahanUpdateArgs>(args: SelectSubset<T, BahanUpdateArgs<ExtArgs>>): Prisma__BahanClient<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bahans.
     * @param {BahanDeleteManyArgs} args - Arguments to filter Bahans to delete.
     * @example
     * // Delete a few Bahans
     * const { count } = await prisma.bahan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BahanDeleteManyArgs>(args?: SelectSubset<T, BahanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bahans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BahanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bahans
     * const bahan = await prisma.bahan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BahanUpdateManyArgs>(args: SelectSubset<T, BahanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bahans and returns the data updated in the database.
     * @param {BahanUpdateManyAndReturnArgs} args - Arguments to update many Bahans.
     * @example
     * // Update many Bahans
     * const bahan = await prisma.bahan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bahans and only return the `id`
     * const bahanWithIdOnly = await prisma.bahan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BahanUpdateManyAndReturnArgs>(args: SelectSubset<T, BahanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bahan.
     * @param {BahanUpsertArgs} args - Arguments to update or create a Bahan.
     * @example
     * // Update or create a Bahan
     * const bahan = await prisma.bahan.upsert({
     *   create: {
     *     // ... data to create a Bahan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bahan we want to update
     *   }
     * })
     */
    upsert<T extends BahanUpsertArgs>(args: SelectSubset<T, BahanUpsertArgs<ExtArgs>>): Prisma__BahanClient<$Result.GetResult<Prisma.$BahanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bahans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BahanCountArgs} args - Arguments to filter Bahans to count.
     * @example
     * // Count the number of Bahans
     * const count = await prisma.bahan.count({
     *   where: {
     *     // ... the filter for the Bahans we want to count
     *   }
     * })
    **/
    count<T extends BahanCountArgs>(
      args?: Subset<T, BahanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BahanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bahan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BahanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BahanAggregateArgs>(args: Subset<T, BahanAggregateArgs>): Prisma.PrismaPromise<GetBahanAggregateType<T>>

    /**
     * Group by Bahan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BahanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BahanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BahanGroupByArgs['orderBy'] }
        : { orderBy?: BahanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BahanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBahanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bahan model
   */
  readonly fields: BahanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bahan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BahanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resep<T extends ResepDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResepDefaultArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bahan model
   */
  interface BahanFieldRefs {
    readonly id: FieldRef<"Bahan", 'Int'>
    readonly resepId: FieldRef<"Bahan", 'Int'>
    readonly nama: FieldRef<"Bahan", 'String'>
    readonly jumlah: FieldRef<"Bahan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Bahan findUnique
   */
  export type BahanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * Filter, which Bahan to fetch.
     */
    where: BahanWhereUniqueInput
  }

  /**
   * Bahan findUniqueOrThrow
   */
  export type BahanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * Filter, which Bahan to fetch.
     */
    where: BahanWhereUniqueInput
  }

  /**
   * Bahan findFirst
   */
  export type BahanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * Filter, which Bahan to fetch.
     */
    where?: BahanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bahans to fetch.
     */
    orderBy?: BahanOrderByWithRelationInput | BahanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bahans.
     */
    cursor?: BahanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bahans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bahans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bahans.
     */
    distinct?: BahanScalarFieldEnum | BahanScalarFieldEnum[]
  }

  /**
   * Bahan findFirstOrThrow
   */
  export type BahanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * Filter, which Bahan to fetch.
     */
    where?: BahanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bahans to fetch.
     */
    orderBy?: BahanOrderByWithRelationInput | BahanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bahans.
     */
    cursor?: BahanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bahans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bahans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bahans.
     */
    distinct?: BahanScalarFieldEnum | BahanScalarFieldEnum[]
  }

  /**
   * Bahan findMany
   */
  export type BahanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * Filter, which Bahans to fetch.
     */
    where?: BahanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bahans to fetch.
     */
    orderBy?: BahanOrderByWithRelationInput | BahanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bahans.
     */
    cursor?: BahanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bahans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bahans.
     */
    skip?: number
    distinct?: BahanScalarFieldEnum | BahanScalarFieldEnum[]
  }

  /**
   * Bahan create
   */
  export type BahanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * The data needed to create a Bahan.
     */
    data: XOR<BahanCreateInput, BahanUncheckedCreateInput>
  }

  /**
   * Bahan createMany
   */
  export type BahanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bahans.
     */
    data: BahanCreateManyInput | BahanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bahan createManyAndReturn
   */
  export type BahanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * The data used to create many Bahans.
     */
    data: BahanCreateManyInput | BahanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bahan update
   */
  export type BahanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * The data needed to update a Bahan.
     */
    data: XOR<BahanUpdateInput, BahanUncheckedUpdateInput>
    /**
     * Choose, which Bahan to update.
     */
    where: BahanWhereUniqueInput
  }

  /**
   * Bahan updateMany
   */
  export type BahanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bahans.
     */
    data: XOR<BahanUpdateManyMutationInput, BahanUncheckedUpdateManyInput>
    /**
     * Filter which Bahans to update
     */
    where?: BahanWhereInput
    /**
     * Limit how many Bahans to update.
     */
    limit?: number
  }

  /**
   * Bahan updateManyAndReturn
   */
  export type BahanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * The data used to update Bahans.
     */
    data: XOR<BahanUpdateManyMutationInput, BahanUncheckedUpdateManyInput>
    /**
     * Filter which Bahans to update
     */
    where?: BahanWhereInput
    /**
     * Limit how many Bahans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bahan upsert
   */
  export type BahanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * The filter to search for the Bahan to update in case it exists.
     */
    where: BahanWhereUniqueInput
    /**
     * In case the Bahan found by the `where` argument doesn't exist, create a new Bahan with this data.
     */
    create: XOR<BahanCreateInput, BahanUncheckedCreateInput>
    /**
     * In case the Bahan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BahanUpdateInput, BahanUncheckedUpdateInput>
  }

  /**
   * Bahan delete
   */
  export type BahanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
    /**
     * Filter which Bahan to delete.
     */
    where: BahanWhereUniqueInput
  }

  /**
   * Bahan deleteMany
   */
  export type BahanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bahans to delete
     */
    where?: BahanWhereInput
    /**
     * Limit how many Bahans to delete.
     */
    limit?: number
  }

  /**
   * Bahan without action
   */
  export type BahanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bahan
     */
    select?: BahanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bahan
     */
    omit?: BahanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BahanInclude<ExtArgs> | null
  }


  /**
   * Model LangkahPembuatan
   */

  export type AggregateLangkahPembuatan = {
    _count: LangkahPembuatanCountAggregateOutputType | null
    _avg: LangkahPembuatanAvgAggregateOutputType | null
    _sum: LangkahPembuatanSumAggregateOutputType | null
    _min: LangkahPembuatanMinAggregateOutputType | null
    _max: LangkahPembuatanMaxAggregateOutputType | null
  }

  export type LangkahPembuatanAvgAggregateOutputType = {
    id: number | null
    resepId: number | null
    urutan: number | null
  }

  export type LangkahPembuatanSumAggregateOutputType = {
    id: number | null
    resepId: number | null
    urutan: number | null
  }

  export type LangkahPembuatanMinAggregateOutputType = {
    id: number | null
    resepId: number | null
    urutan: number | null
    deskripsi: string | null
  }

  export type LangkahPembuatanMaxAggregateOutputType = {
    id: number | null
    resepId: number | null
    urutan: number | null
    deskripsi: string | null
  }

  export type LangkahPembuatanCountAggregateOutputType = {
    id: number
    resepId: number
    urutan: number
    deskripsi: number
    _all: number
  }


  export type LangkahPembuatanAvgAggregateInputType = {
    id?: true
    resepId?: true
    urutan?: true
  }

  export type LangkahPembuatanSumAggregateInputType = {
    id?: true
    resepId?: true
    urutan?: true
  }

  export type LangkahPembuatanMinAggregateInputType = {
    id?: true
    resepId?: true
    urutan?: true
    deskripsi?: true
  }

  export type LangkahPembuatanMaxAggregateInputType = {
    id?: true
    resepId?: true
    urutan?: true
    deskripsi?: true
  }

  export type LangkahPembuatanCountAggregateInputType = {
    id?: true
    resepId?: true
    urutan?: true
    deskripsi?: true
    _all?: true
  }

  export type LangkahPembuatanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LangkahPembuatan to aggregate.
     */
    where?: LangkahPembuatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LangkahPembuatans to fetch.
     */
    orderBy?: LangkahPembuatanOrderByWithRelationInput | LangkahPembuatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LangkahPembuatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LangkahPembuatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LangkahPembuatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LangkahPembuatans
    **/
    _count?: true | LangkahPembuatanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LangkahPembuatanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LangkahPembuatanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LangkahPembuatanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LangkahPembuatanMaxAggregateInputType
  }

  export type GetLangkahPembuatanAggregateType<T extends LangkahPembuatanAggregateArgs> = {
        [P in keyof T & keyof AggregateLangkahPembuatan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLangkahPembuatan[P]>
      : GetScalarType<T[P], AggregateLangkahPembuatan[P]>
  }




  export type LangkahPembuatanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LangkahPembuatanWhereInput
    orderBy?: LangkahPembuatanOrderByWithAggregationInput | LangkahPembuatanOrderByWithAggregationInput[]
    by: LangkahPembuatanScalarFieldEnum[] | LangkahPembuatanScalarFieldEnum
    having?: LangkahPembuatanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LangkahPembuatanCountAggregateInputType | true
    _avg?: LangkahPembuatanAvgAggregateInputType
    _sum?: LangkahPembuatanSumAggregateInputType
    _min?: LangkahPembuatanMinAggregateInputType
    _max?: LangkahPembuatanMaxAggregateInputType
  }

  export type LangkahPembuatanGroupByOutputType = {
    id: number
    resepId: number
    urutan: number
    deskripsi: string
    _count: LangkahPembuatanCountAggregateOutputType | null
    _avg: LangkahPembuatanAvgAggregateOutputType | null
    _sum: LangkahPembuatanSumAggregateOutputType | null
    _min: LangkahPembuatanMinAggregateOutputType | null
    _max: LangkahPembuatanMaxAggregateOutputType | null
  }

  type GetLangkahPembuatanGroupByPayload<T extends LangkahPembuatanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LangkahPembuatanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LangkahPembuatanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LangkahPembuatanGroupByOutputType[P]>
            : GetScalarType<T[P], LangkahPembuatanGroupByOutputType[P]>
        }
      >
    >


  export type LangkahPembuatanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    urutan?: boolean
    deskripsi?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["langkahPembuatan"]>

  export type LangkahPembuatanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    urutan?: boolean
    deskripsi?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["langkahPembuatan"]>

  export type LangkahPembuatanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    urutan?: boolean
    deskripsi?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["langkahPembuatan"]>

  export type LangkahPembuatanSelectScalar = {
    id?: boolean
    resepId?: boolean
    urutan?: boolean
    deskripsi?: boolean
  }

  export type LangkahPembuatanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resepId" | "urutan" | "deskripsi", ExtArgs["result"]["langkahPembuatan"]>
  export type LangkahPembuatanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }
  export type LangkahPembuatanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }
  export type LangkahPembuatanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
  }

  export type $LangkahPembuatanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LangkahPembuatan"
    objects: {
      resep: Prisma.$ResepPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resepId: number
      urutan: number
      deskripsi: string
    }, ExtArgs["result"]["langkahPembuatan"]>
    composites: {}
  }

  type LangkahPembuatanGetPayload<S extends boolean | null | undefined | LangkahPembuatanDefaultArgs> = $Result.GetResult<Prisma.$LangkahPembuatanPayload, S>

  type LangkahPembuatanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LangkahPembuatanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LangkahPembuatanCountAggregateInputType | true
    }

  export interface LangkahPembuatanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LangkahPembuatan'], meta: { name: 'LangkahPembuatan' } }
    /**
     * Find zero or one LangkahPembuatan that matches the filter.
     * @param {LangkahPembuatanFindUniqueArgs} args - Arguments to find a LangkahPembuatan
     * @example
     * // Get one LangkahPembuatan
     * const langkahPembuatan = await prisma.langkahPembuatan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LangkahPembuatanFindUniqueArgs>(args: SelectSubset<T, LangkahPembuatanFindUniqueArgs<ExtArgs>>): Prisma__LangkahPembuatanClient<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LangkahPembuatan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LangkahPembuatanFindUniqueOrThrowArgs} args - Arguments to find a LangkahPembuatan
     * @example
     * // Get one LangkahPembuatan
     * const langkahPembuatan = await prisma.langkahPembuatan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LangkahPembuatanFindUniqueOrThrowArgs>(args: SelectSubset<T, LangkahPembuatanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LangkahPembuatanClient<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LangkahPembuatan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangkahPembuatanFindFirstArgs} args - Arguments to find a LangkahPembuatan
     * @example
     * // Get one LangkahPembuatan
     * const langkahPembuatan = await prisma.langkahPembuatan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LangkahPembuatanFindFirstArgs>(args?: SelectSubset<T, LangkahPembuatanFindFirstArgs<ExtArgs>>): Prisma__LangkahPembuatanClient<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LangkahPembuatan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangkahPembuatanFindFirstOrThrowArgs} args - Arguments to find a LangkahPembuatan
     * @example
     * // Get one LangkahPembuatan
     * const langkahPembuatan = await prisma.langkahPembuatan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LangkahPembuatanFindFirstOrThrowArgs>(args?: SelectSubset<T, LangkahPembuatanFindFirstOrThrowArgs<ExtArgs>>): Prisma__LangkahPembuatanClient<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LangkahPembuatans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangkahPembuatanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LangkahPembuatans
     * const langkahPembuatans = await prisma.langkahPembuatan.findMany()
     * 
     * // Get first 10 LangkahPembuatans
     * const langkahPembuatans = await prisma.langkahPembuatan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const langkahPembuatanWithIdOnly = await prisma.langkahPembuatan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LangkahPembuatanFindManyArgs>(args?: SelectSubset<T, LangkahPembuatanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LangkahPembuatan.
     * @param {LangkahPembuatanCreateArgs} args - Arguments to create a LangkahPembuatan.
     * @example
     * // Create one LangkahPembuatan
     * const LangkahPembuatan = await prisma.langkahPembuatan.create({
     *   data: {
     *     // ... data to create a LangkahPembuatan
     *   }
     * })
     * 
     */
    create<T extends LangkahPembuatanCreateArgs>(args: SelectSubset<T, LangkahPembuatanCreateArgs<ExtArgs>>): Prisma__LangkahPembuatanClient<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LangkahPembuatans.
     * @param {LangkahPembuatanCreateManyArgs} args - Arguments to create many LangkahPembuatans.
     * @example
     * // Create many LangkahPembuatans
     * const langkahPembuatan = await prisma.langkahPembuatan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LangkahPembuatanCreateManyArgs>(args?: SelectSubset<T, LangkahPembuatanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LangkahPembuatans and returns the data saved in the database.
     * @param {LangkahPembuatanCreateManyAndReturnArgs} args - Arguments to create many LangkahPembuatans.
     * @example
     * // Create many LangkahPembuatans
     * const langkahPembuatan = await prisma.langkahPembuatan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LangkahPembuatans and only return the `id`
     * const langkahPembuatanWithIdOnly = await prisma.langkahPembuatan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LangkahPembuatanCreateManyAndReturnArgs>(args?: SelectSubset<T, LangkahPembuatanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LangkahPembuatan.
     * @param {LangkahPembuatanDeleteArgs} args - Arguments to delete one LangkahPembuatan.
     * @example
     * // Delete one LangkahPembuatan
     * const LangkahPembuatan = await prisma.langkahPembuatan.delete({
     *   where: {
     *     // ... filter to delete one LangkahPembuatan
     *   }
     * })
     * 
     */
    delete<T extends LangkahPembuatanDeleteArgs>(args: SelectSubset<T, LangkahPembuatanDeleteArgs<ExtArgs>>): Prisma__LangkahPembuatanClient<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LangkahPembuatan.
     * @param {LangkahPembuatanUpdateArgs} args - Arguments to update one LangkahPembuatan.
     * @example
     * // Update one LangkahPembuatan
     * const langkahPembuatan = await prisma.langkahPembuatan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LangkahPembuatanUpdateArgs>(args: SelectSubset<T, LangkahPembuatanUpdateArgs<ExtArgs>>): Prisma__LangkahPembuatanClient<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LangkahPembuatans.
     * @param {LangkahPembuatanDeleteManyArgs} args - Arguments to filter LangkahPembuatans to delete.
     * @example
     * // Delete a few LangkahPembuatans
     * const { count } = await prisma.langkahPembuatan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LangkahPembuatanDeleteManyArgs>(args?: SelectSubset<T, LangkahPembuatanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LangkahPembuatans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangkahPembuatanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LangkahPembuatans
     * const langkahPembuatan = await prisma.langkahPembuatan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LangkahPembuatanUpdateManyArgs>(args: SelectSubset<T, LangkahPembuatanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LangkahPembuatans and returns the data updated in the database.
     * @param {LangkahPembuatanUpdateManyAndReturnArgs} args - Arguments to update many LangkahPembuatans.
     * @example
     * // Update many LangkahPembuatans
     * const langkahPembuatan = await prisma.langkahPembuatan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LangkahPembuatans and only return the `id`
     * const langkahPembuatanWithIdOnly = await prisma.langkahPembuatan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LangkahPembuatanUpdateManyAndReturnArgs>(args: SelectSubset<T, LangkahPembuatanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LangkahPembuatan.
     * @param {LangkahPembuatanUpsertArgs} args - Arguments to update or create a LangkahPembuatan.
     * @example
     * // Update or create a LangkahPembuatan
     * const langkahPembuatan = await prisma.langkahPembuatan.upsert({
     *   create: {
     *     // ... data to create a LangkahPembuatan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LangkahPembuatan we want to update
     *   }
     * })
     */
    upsert<T extends LangkahPembuatanUpsertArgs>(args: SelectSubset<T, LangkahPembuatanUpsertArgs<ExtArgs>>): Prisma__LangkahPembuatanClient<$Result.GetResult<Prisma.$LangkahPembuatanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LangkahPembuatans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangkahPembuatanCountArgs} args - Arguments to filter LangkahPembuatans to count.
     * @example
     * // Count the number of LangkahPembuatans
     * const count = await prisma.langkahPembuatan.count({
     *   where: {
     *     // ... the filter for the LangkahPembuatans we want to count
     *   }
     * })
    **/
    count<T extends LangkahPembuatanCountArgs>(
      args?: Subset<T, LangkahPembuatanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LangkahPembuatanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LangkahPembuatan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangkahPembuatanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LangkahPembuatanAggregateArgs>(args: Subset<T, LangkahPembuatanAggregateArgs>): Prisma.PrismaPromise<GetLangkahPembuatanAggregateType<T>>

    /**
     * Group by LangkahPembuatan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LangkahPembuatanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LangkahPembuatanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LangkahPembuatanGroupByArgs['orderBy'] }
        : { orderBy?: LangkahPembuatanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LangkahPembuatanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLangkahPembuatanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LangkahPembuatan model
   */
  readonly fields: LangkahPembuatanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LangkahPembuatan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LangkahPembuatanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resep<T extends ResepDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResepDefaultArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LangkahPembuatan model
   */
  interface LangkahPembuatanFieldRefs {
    readonly id: FieldRef<"LangkahPembuatan", 'Int'>
    readonly resepId: FieldRef<"LangkahPembuatan", 'Int'>
    readonly urutan: FieldRef<"LangkahPembuatan", 'Int'>
    readonly deskripsi: FieldRef<"LangkahPembuatan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LangkahPembuatan findUnique
   */
  export type LangkahPembuatanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * Filter, which LangkahPembuatan to fetch.
     */
    where: LangkahPembuatanWhereUniqueInput
  }

  /**
   * LangkahPembuatan findUniqueOrThrow
   */
  export type LangkahPembuatanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * Filter, which LangkahPembuatan to fetch.
     */
    where: LangkahPembuatanWhereUniqueInput
  }

  /**
   * LangkahPembuatan findFirst
   */
  export type LangkahPembuatanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * Filter, which LangkahPembuatan to fetch.
     */
    where?: LangkahPembuatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LangkahPembuatans to fetch.
     */
    orderBy?: LangkahPembuatanOrderByWithRelationInput | LangkahPembuatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LangkahPembuatans.
     */
    cursor?: LangkahPembuatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LangkahPembuatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LangkahPembuatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LangkahPembuatans.
     */
    distinct?: LangkahPembuatanScalarFieldEnum | LangkahPembuatanScalarFieldEnum[]
  }

  /**
   * LangkahPembuatan findFirstOrThrow
   */
  export type LangkahPembuatanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * Filter, which LangkahPembuatan to fetch.
     */
    where?: LangkahPembuatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LangkahPembuatans to fetch.
     */
    orderBy?: LangkahPembuatanOrderByWithRelationInput | LangkahPembuatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LangkahPembuatans.
     */
    cursor?: LangkahPembuatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LangkahPembuatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LangkahPembuatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LangkahPembuatans.
     */
    distinct?: LangkahPembuatanScalarFieldEnum | LangkahPembuatanScalarFieldEnum[]
  }

  /**
   * LangkahPembuatan findMany
   */
  export type LangkahPembuatanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * Filter, which LangkahPembuatans to fetch.
     */
    where?: LangkahPembuatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LangkahPembuatans to fetch.
     */
    orderBy?: LangkahPembuatanOrderByWithRelationInput | LangkahPembuatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LangkahPembuatans.
     */
    cursor?: LangkahPembuatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LangkahPembuatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LangkahPembuatans.
     */
    skip?: number
    distinct?: LangkahPembuatanScalarFieldEnum | LangkahPembuatanScalarFieldEnum[]
  }

  /**
   * LangkahPembuatan create
   */
  export type LangkahPembuatanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * The data needed to create a LangkahPembuatan.
     */
    data: XOR<LangkahPembuatanCreateInput, LangkahPembuatanUncheckedCreateInput>
  }

  /**
   * LangkahPembuatan createMany
   */
  export type LangkahPembuatanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LangkahPembuatans.
     */
    data: LangkahPembuatanCreateManyInput | LangkahPembuatanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LangkahPembuatan createManyAndReturn
   */
  export type LangkahPembuatanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * The data used to create many LangkahPembuatans.
     */
    data: LangkahPembuatanCreateManyInput | LangkahPembuatanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LangkahPembuatan update
   */
  export type LangkahPembuatanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * The data needed to update a LangkahPembuatan.
     */
    data: XOR<LangkahPembuatanUpdateInput, LangkahPembuatanUncheckedUpdateInput>
    /**
     * Choose, which LangkahPembuatan to update.
     */
    where: LangkahPembuatanWhereUniqueInput
  }

  /**
   * LangkahPembuatan updateMany
   */
  export type LangkahPembuatanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LangkahPembuatans.
     */
    data: XOR<LangkahPembuatanUpdateManyMutationInput, LangkahPembuatanUncheckedUpdateManyInput>
    /**
     * Filter which LangkahPembuatans to update
     */
    where?: LangkahPembuatanWhereInput
    /**
     * Limit how many LangkahPembuatans to update.
     */
    limit?: number
  }

  /**
   * LangkahPembuatan updateManyAndReturn
   */
  export type LangkahPembuatanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * The data used to update LangkahPembuatans.
     */
    data: XOR<LangkahPembuatanUpdateManyMutationInput, LangkahPembuatanUncheckedUpdateManyInput>
    /**
     * Filter which LangkahPembuatans to update
     */
    where?: LangkahPembuatanWhereInput
    /**
     * Limit how many LangkahPembuatans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LangkahPembuatan upsert
   */
  export type LangkahPembuatanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * The filter to search for the LangkahPembuatan to update in case it exists.
     */
    where: LangkahPembuatanWhereUniqueInput
    /**
     * In case the LangkahPembuatan found by the `where` argument doesn't exist, create a new LangkahPembuatan with this data.
     */
    create: XOR<LangkahPembuatanCreateInput, LangkahPembuatanUncheckedCreateInput>
    /**
     * In case the LangkahPembuatan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LangkahPembuatanUpdateInput, LangkahPembuatanUncheckedUpdateInput>
  }

  /**
   * LangkahPembuatan delete
   */
  export type LangkahPembuatanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
    /**
     * Filter which LangkahPembuatan to delete.
     */
    where: LangkahPembuatanWhereUniqueInput
  }

  /**
   * LangkahPembuatan deleteMany
   */
  export type LangkahPembuatanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LangkahPembuatans to delete
     */
    where?: LangkahPembuatanWhereInput
    /**
     * Limit how many LangkahPembuatans to delete.
     */
    limit?: number
  }

  /**
   * LangkahPembuatan without action
   */
  export type LangkahPembuatanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LangkahPembuatan
     */
    select?: LangkahPembuatanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LangkahPembuatan
     */
    omit?: LangkahPembuatanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LangkahPembuatanInclude<ExtArgs> | null
  }


  /**
   * Model Thread
   */

  export type AggregateThread = {
    _count: ThreadCountAggregateOutputType | null
    _avg: ThreadAvgAggregateOutputType | null
    _sum: ThreadSumAggregateOutputType | null
    _min: ThreadMinAggregateOutputType | null
    _max: ThreadMaxAggregateOutputType | null
  }

  export type ThreadAvgAggregateOutputType = {
    userId: number | null
    id: number | null
  }

  export type ThreadSumAggregateOutputType = {
    userId: number | null
    id: number | null
  }

  export type ThreadMinAggregateOutputType = {
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    id: number | null
  }

  export type ThreadMaxAggregateOutputType = {
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    id: number | null
  }

  export type ThreadCountAggregateOutputType = {
    title: number
    createdAt: number
    updatedAt: number
    userId: number
    id: number
    _all: number
  }


  export type ThreadAvgAggregateInputType = {
    userId?: true
    id?: true
  }

  export type ThreadSumAggregateInputType = {
    userId?: true
    id?: true
  }

  export type ThreadMinAggregateInputType = {
    title?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    id?: true
  }

  export type ThreadMaxAggregateInputType = {
    title?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    id?: true
  }

  export type ThreadCountAggregateInputType = {
    title?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    id?: true
    _all?: true
  }

  export type ThreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Thread to aggregate.
     */
    where?: ThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Threads
    **/
    _count?: true | ThreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThreadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThreadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThreadMaxAggregateInputType
  }

  export type GetThreadAggregateType<T extends ThreadAggregateArgs> = {
        [P in keyof T & keyof AggregateThread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThread[P]>
      : GetScalarType<T[P], AggregateThread[P]>
  }




  export type ThreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThreadWhereInput
    orderBy?: ThreadOrderByWithAggregationInput | ThreadOrderByWithAggregationInput[]
    by: ThreadScalarFieldEnum[] | ThreadScalarFieldEnum
    having?: ThreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThreadCountAggregateInputType | true
    _avg?: ThreadAvgAggregateInputType
    _sum?: ThreadSumAggregateInputType
    _min?: ThreadMinAggregateInputType
    _max?: ThreadMaxAggregateInputType
  }

  export type ThreadGroupByOutputType = {
    title: string
    createdAt: Date
    updatedAt: Date
    userId: number
    id: number
    _count: ThreadCountAggregateOutputType | null
    _avg: ThreadAvgAggregateOutputType | null
    _sum: ThreadSumAggregateOutputType | null
    _min: ThreadMinAggregateOutputType | null
    _max: ThreadMaxAggregateOutputType | null
  }

  type GetThreadGroupByPayload<T extends ThreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThreadGroupByOutputType[P]>
            : GetScalarType<T[P], ThreadGroupByOutputType[P]>
        }
      >
    >


  export type ThreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    id?: boolean
    messages?: boolean | Thread$messagesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ThreadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thread"]>

  export type ThreadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thread"]>

  export type ThreadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thread"]>

  export type ThreadSelectScalar = {
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    id?: boolean
  }

  export type ThreadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"title" | "createdAt" | "updatedAt" | "userId" | "id", ExtArgs["result"]["thread"]>
  export type ThreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | Thread$messagesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ThreadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ThreadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ThreadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ThreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Thread"
    objects: {
      messages: Prisma.$MessagePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      title: string
      createdAt: Date
      updatedAt: Date
      userId: number
      id: number
    }, ExtArgs["result"]["thread"]>
    composites: {}
  }

  type ThreadGetPayload<S extends boolean | null | undefined | ThreadDefaultArgs> = $Result.GetResult<Prisma.$ThreadPayload, S>

  type ThreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThreadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThreadCountAggregateInputType | true
    }

  export interface ThreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Thread'], meta: { name: 'Thread' } }
    /**
     * Find zero or one Thread that matches the filter.
     * @param {ThreadFindUniqueArgs} args - Arguments to find a Thread
     * @example
     * // Get one Thread
     * const thread = await prisma.thread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThreadFindUniqueArgs>(args: SelectSubset<T, ThreadFindUniqueArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Thread that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThreadFindUniqueOrThrowArgs} args - Arguments to find a Thread
     * @example
     * // Get one Thread
     * const thread = await prisma.thread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThreadFindUniqueOrThrowArgs>(args: SelectSubset<T, ThreadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadFindFirstArgs} args - Arguments to find a Thread
     * @example
     * // Get one Thread
     * const thread = await prisma.thread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThreadFindFirstArgs>(args?: SelectSubset<T, ThreadFindFirstArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadFindFirstOrThrowArgs} args - Arguments to find a Thread
     * @example
     * // Get one Thread
     * const thread = await prisma.thread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThreadFindFirstOrThrowArgs>(args?: SelectSubset<T, ThreadFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Threads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Threads
     * const threads = await prisma.thread.findMany()
     * 
     * // Get first 10 Threads
     * const threads = await prisma.thread.findMany({ take: 10 })
     * 
     * // Only select the `title`
     * const threadWithTitleOnly = await prisma.thread.findMany({ select: { title: true } })
     * 
     */
    findMany<T extends ThreadFindManyArgs>(args?: SelectSubset<T, ThreadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Thread.
     * @param {ThreadCreateArgs} args - Arguments to create a Thread.
     * @example
     * // Create one Thread
     * const Thread = await prisma.thread.create({
     *   data: {
     *     // ... data to create a Thread
     *   }
     * })
     * 
     */
    create<T extends ThreadCreateArgs>(args: SelectSubset<T, ThreadCreateArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Threads.
     * @param {ThreadCreateManyArgs} args - Arguments to create many Threads.
     * @example
     * // Create many Threads
     * const thread = await prisma.thread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThreadCreateManyArgs>(args?: SelectSubset<T, ThreadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Threads and returns the data saved in the database.
     * @param {ThreadCreateManyAndReturnArgs} args - Arguments to create many Threads.
     * @example
     * // Create many Threads
     * const thread = await prisma.thread.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Threads and only return the `title`
     * const threadWithTitleOnly = await prisma.thread.createManyAndReturn({
     *   select: { title: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThreadCreateManyAndReturnArgs>(args?: SelectSubset<T, ThreadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Thread.
     * @param {ThreadDeleteArgs} args - Arguments to delete one Thread.
     * @example
     * // Delete one Thread
     * const Thread = await prisma.thread.delete({
     *   where: {
     *     // ... filter to delete one Thread
     *   }
     * })
     * 
     */
    delete<T extends ThreadDeleteArgs>(args: SelectSubset<T, ThreadDeleteArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Thread.
     * @param {ThreadUpdateArgs} args - Arguments to update one Thread.
     * @example
     * // Update one Thread
     * const thread = await prisma.thread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThreadUpdateArgs>(args: SelectSubset<T, ThreadUpdateArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Threads.
     * @param {ThreadDeleteManyArgs} args - Arguments to filter Threads to delete.
     * @example
     * // Delete a few Threads
     * const { count } = await prisma.thread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThreadDeleteManyArgs>(args?: SelectSubset<T, ThreadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Threads
     * const thread = await prisma.thread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThreadUpdateManyArgs>(args: SelectSubset<T, ThreadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Threads and returns the data updated in the database.
     * @param {ThreadUpdateManyAndReturnArgs} args - Arguments to update many Threads.
     * @example
     * // Update many Threads
     * const thread = await prisma.thread.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Threads and only return the `title`
     * const threadWithTitleOnly = await prisma.thread.updateManyAndReturn({
     *   select: { title: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ThreadUpdateManyAndReturnArgs>(args: SelectSubset<T, ThreadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Thread.
     * @param {ThreadUpsertArgs} args - Arguments to update or create a Thread.
     * @example
     * // Update or create a Thread
     * const thread = await prisma.thread.upsert({
     *   create: {
     *     // ... data to create a Thread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thread we want to update
     *   }
     * })
     */
    upsert<T extends ThreadUpsertArgs>(args: SelectSubset<T, ThreadUpsertArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadCountArgs} args - Arguments to filter Threads to count.
     * @example
     * // Count the number of Threads
     * const count = await prisma.thread.count({
     *   where: {
     *     // ... the filter for the Threads we want to count
     *   }
     * })
    **/
    count<T extends ThreadCountArgs>(
      args?: Subset<T, ThreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThreadAggregateArgs>(args: Subset<T, ThreadAggregateArgs>): Prisma.PrismaPromise<GetThreadAggregateType<T>>

    /**
     * Group by Thread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThreadGroupByArgs['orderBy'] }
        : { orderBy?: ThreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Thread model
   */
  readonly fields: ThreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Thread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends Thread$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Thread$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Thread model
   */
  interface ThreadFieldRefs {
    readonly title: FieldRef<"Thread", 'String'>
    readonly createdAt: FieldRef<"Thread", 'DateTime'>
    readonly updatedAt: FieldRef<"Thread", 'DateTime'>
    readonly userId: FieldRef<"Thread", 'Int'>
    readonly id: FieldRef<"Thread", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Thread findUnique
   */
  export type ThreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Thread to fetch.
     */
    where: ThreadWhereUniqueInput
  }

  /**
   * Thread findUniqueOrThrow
   */
  export type ThreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Thread to fetch.
     */
    where: ThreadWhereUniqueInput
  }

  /**
   * Thread findFirst
   */
  export type ThreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Thread to fetch.
     */
    where?: ThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threads.
     */
    cursor?: ThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threads.
     */
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * Thread findFirstOrThrow
   */
  export type ThreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Thread to fetch.
     */
    where?: ThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threads.
     */
    cursor?: ThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threads.
     */
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * Thread findMany
   */
  export type ThreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter, which Threads to fetch.
     */
    where?: ThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadOrderByWithRelationInput | ThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Threads.
     */
    cursor?: ThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    distinct?: ThreadScalarFieldEnum | ThreadScalarFieldEnum[]
  }

  /**
   * Thread create
   */
  export type ThreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * The data needed to create a Thread.
     */
    data: XOR<ThreadCreateInput, ThreadUncheckedCreateInput>
  }

  /**
   * Thread createMany
   */
  export type ThreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Threads.
     */
    data: ThreadCreateManyInput | ThreadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Thread createManyAndReturn
   */
  export type ThreadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * The data used to create many Threads.
     */
    data: ThreadCreateManyInput | ThreadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Thread update
   */
  export type ThreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * The data needed to update a Thread.
     */
    data: XOR<ThreadUpdateInput, ThreadUncheckedUpdateInput>
    /**
     * Choose, which Thread to update.
     */
    where: ThreadWhereUniqueInput
  }

  /**
   * Thread updateMany
   */
  export type ThreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Threads.
     */
    data: XOR<ThreadUpdateManyMutationInput, ThreadUncheckedUpdateManyInput>
    /**
     * Filter which Threads to update
     */
    where?: ThreadWhereInput
    /**
     * Limit how many Threads to update.
     */
    limit?: number
  }

  /**
   * Thread updateManyAndReturn
   */
  export type ThreadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * The data used to update Threads.
     */
    data: XOR<ThreadUpdateManyMutationInput, ThreadUncheckedUpdateManyInput>
    /**
     * Filter which Threads to update
     */
    where?: ThreadWhereInput
    /**
     * Limit how many Threads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Thread upsert
   */
  export type ThreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * The filter to search for the Thread to update in case it exists.
     */
    where: ThreadWhereUniqueInput
    /**
     * In case the Thread found by the `where` argument doesn't exist, create a new Thread with this data.
     */
    create: XOR<ThreadCreateInput, ThreadUncheckedCreateInput>
    /**
     * In case the Thread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThreadUpdateInput, ThreadUncheckedUpdateInput>
  }

  /**
   * Thread delete
   */
  export type ThreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
    /**
     * Filter which Thread to delete.
     */
    where: ThreadWhereUniqueInput
  }

  /**
   * Thread deleteMany
   */
  export type ThreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Threads to delete
     */
    where?: ThreadWhereInput
    /**
     * Limit how many Threads to delete.
     */
    limit?: number
  }

  /**
   * Thread.messages
   */
  export type Thread$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Thread without action
   */
  export type ThreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thread
     */
    select?: ThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Thread
     */
    omit?: ThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreadInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    threadId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    threadId: number | null
  }

  export type MessageMinAggregateOutputType = {
    role: $Enums.RoleChat | null
    content: string | null
    thought: string | null
    createdAt: Date | null
    id: number | null
    threadId: number | null
  }

  export type MessageMaxAggregateOutputType = {
    role: $Enums.RoleChat | null
    content: string | null
    thought: string | null
    createdAt: Date | null
    id: number | null
    threadId: number | null
  }

  export type MessageCountAggregateOutputType = {
    role: number
    content: number
    thought: number
    createdAt: number
    id: number
    threadId: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    threadId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    threadId?: true
  }

  export type MessageMinAggregateInputType = {
    role?: true
    content?: true
    thought?: true
    createdAt?: true
    id?: true
    threadId?: true
  }

  export type MessageMaxAggregateInputType = {
    role?: true
    content?: true
    thought?: true
    createdAt?: true
    id?: true
    threadId?: true
  }

  export type MessageCountAggregateInputType = {
    role?: true
    content?: true
    thought?: true
    createdAt?: true
    id?: true
    threadId?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    role: $Enums.RoleChat
    content: string
    thought: string | null
    createdAt: Date
    id: number
    threadId: number
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role?: boolean
    content?: boolean
    thought?: boolean
    createdAt?: boolean
    id?: boolean
    threadId?: boolean
    thread?: boolean | ThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role?: boolean
    content?: boolean
    thought?: boolean
    createdAt?: boolean
    id?: boolean
    threadId?: boolean
    thread?: boolean | ThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role?: boolean
    content?: boolean
    thought?: boolean
    createdAt?: boolean
    id?: boolean
    threadId?: boolean
    thread?: boolean | ThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    role?: boolean
    content?: boolean
    thought?: boolean
    createdAt?: boolean
    id?: boolean
    threadId?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"role" | "content" | "thought" | "createdAt" | "id" | "threadId", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | ThreadDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | ThreadDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | ThreadDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      thread: Prisma.$ThreadPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      role: $Enums.RoleChat
      content: string
      thought: string | null
      createdAt: Date
      id: number
      threadId: number
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `content`
     * const messageWithContentOnly = await prisma.message.findMany({ select: { content: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `content`
     * const messageWithContentOnly = await prisma.message.createManyAndReturn({
     *   select: { content: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `content`
     * const messageWithContentOnly = await prisma.message.updateManyAndReturn({
     *   select: { content: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    thread<T extends ThreadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThreadDefaultArgs<ExtArgs>>): Prisma__ThreadClient<$Result.GetResult<Prisma.$ThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly role: FieldRef<"Message", 'RoleChat'>
    readonly content: FieldRef<"Message", 'String'>
    readonly thought: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly id: FieldRef<"Message", 'Int'>
    readonly threadId: FieldRef<"Message", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    userId: number | null
    email: string | null
    tanggalFeedback: Date | null
    subject: string | null
    message: string | null
    fullname: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    email: string | null
    tanggalFeedback: Date | null
    subject: string | null
    message: string | null
    fullname: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    userId: number
    email: number
    tanggalFeedback: number
    subject: number
    message: number
    fullname: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    tanggalFeedback?: true
    subject?: true
    message?: true
    fullname?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    tanggalFeedback?: true
    subject?: true
    message?: true
    fullname?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    tanggalFeedback?: true
    subject?: true
    message?: true
    fullname?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: number
    userId: number
    email: string
    tanggalFeedback: Date
    subject: string
    message: string
    fullname: string
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    tanggalFeedback?: boolean
    subject?: boolean
    message?: boolean
    fullname?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    tanggalFeedback?: boolean
    subject?: boolean
    message?: boolean
    fullname?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    tanggalFeedback?: boolean
    subject?: boolean
    message?: boolean
    fullname?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    userId?: boolean
    email?: boolean
    tanggalFeedback?: boolean
    subject?: boolean
    message?: boolean
    fullname?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "email" | "tanggalFeedback" | "subject" | "message" | "fullname", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      email: string
      tanggalFeedback: Date
      subject: string
      message: string
      fullname: string
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'Int'>
    readonly userId: FieldRef<"Feedback", 'Int'>
    readonly email: FieldRef<"Feedback", 'String'>
    readonly tanggalFeedback: FieldRef<"Feedback", 'DateTime'>
    readonly subject: FieldRef<"Feedback", 'String'>
    readonly message: FieldRef<"Feedback", 'String'>
    readonly fullname: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    resepId: number | null
    userId: number | null
    rating: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    resepId: number | null
    userId: number | null
    rating: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    resepId: number | null
    userId: number | null
    comment: string | null
    createdAt: Date | null
    rating: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    resepId: number | null
    userId: number | null
    comment: string | null
    createdAt: Date | null
    rating: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    resepId: number
    userId: number
    comment: number
    createdAt: number
    rating: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    resepId?: true
    userId?: true
    rating?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    resepId?: true
    userId?: true
    rating?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    resepId?: true
    userId?: true
    comment?: true
    createdAt?: true
    rating?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    resepId?: true
    userId?: true
    comment?: true
    createdAt?: true
    rating?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    resepId?: true
    userId?: true
    comment?: true
    createdAt?: true
    rating?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    resepId: number
    userId: number
    comment: string
    createdAt: Date
    rating: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    userId?: boolean
    comment?: boolean
    createdAt?: boolean
    rating?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    userId?: boolean
    comment?: boolean
    createdAt?: boolean
    rating?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resepId?: boolean
    userId?: boolean
    comment?: boolean
    createdAt?: boolean
    rating?: boolean
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    resepId?: boolean
    userId?: boolean
    comment?: boolean
    createdAt?: boolean
    rating?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resepId" | "userId" | "comment" | "createdAt" | "rating", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resep?: boolean | ResepDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      resep: Prisma.$ResepPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resepId: number
      userId: number
      comment: string
      createdAt: Date
      rating: number
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resep<T extends ResepDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResepDefaultArgs<ExtArgs>>): Prisma__ResepClient<$Result.GetResult<Prisma.$ResepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly resepId: FieldRef<"Comment", 'Int'>
    readonly userId: FieldRef<"Comment", 'Int'>
    readonly comment: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly rating: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    photo: 'photo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    phoneNumber: 'phoneNumber'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ResepScalarFieldEnum: {
    id: 'id',
    nama: 'nama',
    photoResep: 'photoResep',
    kategoriId: 'kategoriId',
    tanggalUnggahan: 'tanggalUnggahan',
    userId: 'userId',
    tanggalAcc: 'tanggalAcc',
    disetujuiOleh: 'disetujuiOleh',
    isApproved: 'isApproved',
    cookingTime: 'cookingTime',
    note: 'note',
    rating: 'rating',
    servingTime: 'servingTime',
    description: 'description',
    preparationTime: 'preparationTime'
  };

  export type ResepScalarFieldEnum = (typeof ResepScalarFieldEnum)[keyof typeof ResepScalarFieldEnum]


  export const SavedResepScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    resepId: 'resepId',
    savedAt: 'savedAt'
  };

  export type SavedResepScalarFieldEnum = (typeof SavedResepScalarFieldEnum)[keyof typeof SavedResepScalarFieldEnum]


  export const KategoriScalarFieldEnum: {
    id: 'id',
    nama: 'nama',
    createdAt: 'createdAt',
    parentId: 'parentId',
    updatedAt: 'updatedAt'
  };

  export type KategoriScalarFieldEnum = (typeof KategoriScalarFieldEnum)[keyof typeof KategoriScalarFieldEnum]


  export const BahanScalarFieldEnum: {
    id: 'id',
    resepId: 'resepId',
    nama: 'nama',
    jumlah: 'jumlah'
  };

  export type BahanScalarFieldEnum = (typeof BahanScalarFieldEnum)[keyof typeof BahanScalarFieldEnum]


  export const LangkahPembuatanScalarFieldEnum: {
    id: 'id',
    resepId: 'resepId',
    urutan: 'urutan',
    deskripsi: 'deskripsi'
  };

  export type LangkahPembuatanScalarFieldEnum = (typeof LangkahPembuatanScalarFieldEnum)[keyof typeof LangkahPembuatanScalarFieldEnum]


  export const ThreadScalarFieldEnum: {
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    id: 'id'
  };

  export type ThreadScalarFieldEnum = (typeof ThreadScalarFieldEnum)[keyof typeof ThreadScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    role: 'role',
    content: 'content',
    thought: 'thought',
    createdAt: 'createdAt',
    id: 'id',
    threadId: 'threadId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    email: 'email',
    tanggalFeedback: 'tanggalFeedback',
    subject: 'subject',
    message: 'message',
    fullname: 'fullname'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    resepId: 'resepId',
    userId: 'userId',
    comment: 'comment',
    createdAt: 'createdAt',
    rating: 'rating'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'StatusResep'
   */
  export type EnumStatusResepFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusResep'>
    


  /**
   * Reference to a field of type 'StatusResep[]'
   */
  export type ListEnumStatusResepFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusResep[]'>
    


  /**
   * Reference to a field of type 'RoleChat'
   */
  export type EnumRoleChatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleChat'>
    


  /**
   * Reference to a field of type 'RoleChat[]'
   */
  export type ListEnumRoleChatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleChat[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    photo?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    comment?: CommentListRelationFilter
    feedback?: FeedbackListRelationFilter
    resepDisetujui?: ResepListRelationFilter
    resepDiunggah?: ResepListRelationFilter
    savedResep?: SavedResepListRelationFilter
    Thread?: ThreadListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    photo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    comment?: CommentOrderByRelationAggregateInput
    feedback?: FeedbackOrderByRelationAggregateInput
    resepDisetujui?: ResepOrderByRelationAggregateInput
    resepDiunggah?: ResepOrderByRelationAggregateInput
    savedResep?: SavedResepOrderByRelationAggregateInput
    Thread?: ThreadOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    photo?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    comment?: CommentListRelationFilter
    feedback?: FeedbackListRelationFilter
    resepDisetujui?: ResepListRelationFilter
    resepDiunggah?: ResepListRelationFilter
    savedResep?: SavedResepListRelationFilter
    Thread?: ThreadListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    photo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    photo?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ResepWhereInput = {
    AND?: ResepWhereInput | ResepWhereInput[]
    OR?: ResepWhereInput[]
    NOT?: ResepWhereInput | ResepWhereInput[]
    id?: IntFilter<"Resep"> | number
    nama?: StringFilter<"Resep"> | string
    photoResep?: StringNullableFilter<"Resep"> | string | null
    kategoriId?: IntFilter<"Resep"> | number
    tanggalUnggahan?: DateTimeFilter<"Resep"> | Date | string
    userId?: IntFilter<"Resep"> | number
    tanggalAcc?: DateTimeNullableFilter<"Resep"> | Date | string | null
    disetujuiOleh?: IntNullableFilter<"Resep"> | number | null
    isApproved?: EnumStatusResepFilter<"Resep"> | $Enums.StatusResep
    cookingTime?: StringFilter<"Resep"> | string
    note?: StringNullableFilter<"Resep"> | string | null
    rating?: IntNullableFilter<"Resep"> | number | null
    servingTime?: StringFilter<"Resep"> | string
    description?: StringFilter<"Resep"> | string
    preparationTime?: StringFilter<"Resep"> | string
    bahanList?: BahanListRelationFilter
    comment?: CommentListRelationFilter
    langkahList?: LangkahPembuatanListRelationFilter
    admin?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    kategori?: XOR<KategoriScalarRelationFilter, KategoriWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    disimpanOleh?: SavedResepListRelationFilter
  }

  export type ResepOrderByWithRelationInput = {
    id?: SortOrder
    nama?: SortOrder
    photoResep?: SortOrderInput | SortOrder
    kategoriId?: SortOrder
    tanggalUnggahan?: SortOrder
    userId?: SortOrder
    tanggalAcc?: SortOrderInput | SortOrder
    disetujuiOleh?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    cookingTime?: SortOrder
    note?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    servingTime?: SortOrder
    description?: SortOrder
    preparationTime?: SortOrder
    bahanList?: BahanOrderByRelationAggregateInput
    comment?: CommentOrderByRelationAggregateInput
    langkahList?: LangkahPembuatanOrderByRelationAggregateInput
    admin?: UserOrderByWithRelationInput
    kategori?: KategoriOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    disimpanOleh?: SavedResepOrderByRelationAggregateInput
  }

  export type ResepWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResepWhereInput | ResepWhereInput[]
    OR?: ResepWhereInput[]
    NOT?: ResepWhereInput | ResepWhereInput[]
    nama?: StringFilter<"Resep"> | string
    photoResep?: StringNullableFilter<"Resep"> | string | null
    kategoriId?: IntFilter<"Resep"> | number
    tanggalUnggahan?: DateTimeFilter<"Resep"> | Date | string
    userId?: IntFilter<"Resep"> | number
    tanggalAcc?: DateTimeNullableFilter<"Resep"> | Date | string | null
    disetujuiOleh?: IntNullableFilter<"Resep"> | number | null
    isApproved?: EnumStatusResepFilter<"Resep"> | $Enums.StatusResep
    cookingTime?: StringFilter<"Resep"> | string
    note?: StringNullableFilter<"Resep"> | string | null
    rating?: IntNullableFilter<"Resep"> | number | null
    servingTime?: StringFilter<"Resep"> | string
    description?: StringFilter<"Resep"> | string
    preparationTime?: StringFilter<"Resep"> | string
    bahanList?: BahanListRelationFilter
    comment?: CommentListRelationFilter
    langkahList?: LangkahPembuatanListRelationFilter
    admin?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    kategori?: XOR<KategoriScalarRelationFilter, KategoriWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    disimpanOleh?: SavedResepListRelationFilter
  }, "id">

  export type ResepOrderByWithAggregationInput = {
    id?: SortOrder
    nama?: SortOrder
    photoResep?: SortOrderInput | SortOrder
    kategoriId?: SortOrder
    tanggalUnggahan?: SortOrder
    userId?: SortOrder
    tanggalAcc?: SortOrderInput | SortOrder
    disetujuiOleh?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    cookingTime?: SortOrder
    note?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    servingTime?: SortOrder
    description?: SortOrder
    preparationTime?: SortOrder
    _count?: ResepCountOrderByAggregateInput
    _avg?: ResepAvgOrderByAggregateInput
    _max?: ResepMaxOrderByAggregateInput
    _min?: ResepMinOrderByAggregateInput
    _sum?: ResepSumOrderByAggregateInput
  }

  export type ResepScalarWhereWithAggregatesInput = {
    AND?: ResepScalarWhereWithAggregatesInput | ResepScalarWhereWithAggregatesInput[]
    OR?: ResepScalarWhereWithAggregatesInput[]
    NOT?: ResepScalarWhereWithAggregatesInput | ResepScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Resep"> | number
    nama?: StringWithAggregatesFilter<"Resep"> | string
    photoResep?: StringNullableWithAggregatesFilter<"Resep"> | string | null
    kategoriId?: IntWithAggregatesFilter<"Resep"> | number
    tanggalUnggahan?: DateTimeWithAggregatesFilter<"Resep"> | Date | string
    userId?: IntWithAggregatesFilter<"Resep"> | number
    tanggalAcc?: DateTimeNullableWithAggregatesFilter<"Resep"> | Date | string | null
    disetujuiOleh?: IntNullableWithAggregatesFilter<"Resep"> | number | null
    isApproved?: EnumStatusResepWithAggregatesFilter<"Resep"> | $Enums.StatusResep
    cookingTime?: StringWithAggregatesFilter<"Resep"> | string
    note?: StringNullableWithAggregatesFilter<"Resep"> | string | null
    rating?: IntNullableWithAggregatesFilter<"Resep"> | number | null
    servingTime?: StringWithAggregatesFilter<"Resep"> | string
    description?: StringWithAggregatesFilter<"Resep"> | string
    preparationTime?: StringWithAggregatesFilter<"Resep"> | string
  }

  export type SavedResepWhereInput = {
    AND?: SavedResepWhereInput | SavedResepWhereInput[]
    OR?: SavedResepWhereInput[]
    NOT?: SavedResepWhereInput | SavedResepWhereInput[]
    id?: IntFilter<"SavedResep"> | number
    userId?: IntFilter<"SavedResep"> | number
    resepId?: IntFilter<"SavedResep"> | number
    savedAt?: DateTimeFilter<"SavedResep"> | Date | string
    resep?: XOR<ResepScalarRelationFilter, ResepWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SavedResepOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    resepId?: SortOrder
    savedAt?: SortOrder
    resep?: ResepOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SavedResepWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_resepId?: SavedResepUserIdResepIdCompoundUniqueInput
    AND?: SavedResepWhereInput | SavedResepWhereInput[]
    OR?: SavedResepWhereInput[]
    NOT?: SavedResepWhereInput | SavedResepWhereInput[]
    userId?: IntFilter<"SavedResep"> | number
    resepId?: IntFilter<"SavedResep"> | number
    savedAt?: DateTimeFilter<"SavedResep"> | Date | string
    resep?: XOR<ResepScalarRelationFilter, ResepWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_resepId">

  export type SavedResepOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    resepId?: SortOrder
    savedAt?: SortOrder
    _count?: SavedResepCountOrderByAggregateInput
    _avg?: SavedResepAvgOrderByAggregateInput
    _max?: SavedResepMaxOrderByAggregateInput
    _min?: SavedResepMinOrderByAggregateInput
    _sum?: SavedResepSumOrderByAggregateInput
  }

  export type SavedResepScalarWhereWithAggregatesInput = {
    AND?: SavedResepScalarWhereWithAggregatesInput | SavedResepScalarWhereWithAggregatesInput[]
    OR?: SavedResepScalarWhereWithAggregatesInput[]
    NOT?: SavedResepScalarWhereWithAggregatesInput | SavedResepScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SavedResep"> | number
    userId?: IntWithAggregatesFilter<"SavedResep"> | number
    resepId?: IntWithAggregatesFilter<"SavedResep"> | number
    savedAt?: DateTimeWithAggregatesFilter<"SavedResep"> | Date | string
  }

  export type KategoriWhereInput = {
    AND?: KategoriWhereInput | KategoriWhereInput[]
    OR?: KategoriWhereInput[]
    NOT?: KategoriWhereInput | KategoriWhereInput[]
    id?: IntFilter<"Kategori"> | number
    nama?: StringFilter<"Kategori"> | string
    createdAt?: DateTimeFilter<"Kategori"> | Date | string
    parentId?: IntNullableFilter<"Kategori"> | number | null
    updatedAt?: DateTimeNullableFilter<"Kategori"> | Date | string | null
    parent?: XOR<KategoriNullableScalarRelationFilter, KategoriWhereInput> | null
    subcategories?: KategoriListRelationFilter
    resep?: ResepListRelationFilter
  }

  export type KategoriOrderByWithRelationInput = {
    id?: SortOrder
    nama?: SortOrder
    createdAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    parent?: KategoriOrderByWithRelationInput
    subcategories?: KategoriOrderByRelationAggregateInput
    resep?: ResepOrderByRelationAggregateInput
  }

  export type KategoriWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KategoriWhereInput | KategoriWhereInput[]
    OR?: KategoriWhereInput[]
    NOT?: KategoriWhereInput | KategoriWhereInput[]
    nama?: StringFilter<"Kategori"> | string
    createdAt?: DateTimeFilter<"Kategori"> | Date | string
    parentId?: IntNullableFilter<"Kategori"> | number | null
    updatedAt?: DateTimeNullableFilter<"Kategori"> | Date | string | null
    parent?: XOR<KategoriNullableScalarRelationFilter, KategoriWhereInput> | null
    subcategories?: KategoriListRelationFilter
    resep?: ResepListRelationFilter
  }, "id">

  export type KategoriOrderByWithAggregationInput = {
    id?: SortOrder
    nama?: SortOrder
    createdAt?: SortOrder
    parentId?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: KategoriCountOrderByAggregateInput
    _avg?: KategoriAvgOrderByAggregateInput
    _max?: KategoriMaxOrderByAggregateInput
    _min?: KategoriMinOrderByAggregateInput
    _sum?: KategoriSumOrderByAggregateInput
  }

  export type KategoriScalarWhereWithAggregatesInput = {
    AND?: KategoriScalarWhereWithAggregatesInput | KategoriScalarWhereWithAggregatesInput[]
    OR?: KategoriScalarWhereWithAggregatesInput[]
    NOT?: KategoriScalarWhereWithAggregatesInput | KategoriScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kategori"> | number
    nama?: StringWithAggregatesFilter<"Kategori"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Kategori"> | Date | string
    parentId?: IntNullableWithAggregatesFilter<"Kategori"> | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Kategori"> | Date | string | null
  }

  export type BahanWhereInput = {
    AND?: BahanWhereInput | BahanWhereInput[]
    OR?: BahanWhereInput[]
    NOT?: BahanWhereInput | BahanWhereInput[]
    id?: IntFilter<"Bahan"> | number
    resepId?: IntFilter<"Bahan"> | number
    nama?: StringFilter<"Bahan"> | string
    jumlah?: StringFilter<"Bahan"> | string
    resep?: XOR<ResepScalarRelationFilter, ResepWhereInput>
  }

  export type BahanOrderByWithRelationInput = {
    id?: SortOrder
    resepId?: SortOrder
    nama?: SortOrder
    jumlah?: SortOrder
    resep?: ResepOrderByWithRelationInput
  }

  export type BahanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BahanWhereInput | BahanWhereInput[]
    OR?: BahanWhereInput[]
    NOT?: BahanWhereInput | BahanWhereInput[]
    resepId?: IntFilter<"Bahan"> | number
    nama?: StringFilter<"Bahan"> | string
    jumlah?: StringFilter<"Bahan"> | string
    resep?: XOR<ResepScalarRelationFilter, ResepWhereInput>
  }, "id">

  export type BahanOrderByWithAggregationInput = {
    id?: SortOrder
    resepId?: SortOrder
    nama?: SortOrder
    jumlah?: SortOrder
    _count?: BahanCountOrderByAggregateInput
    _avg?: BahanAvgOrderByAggregateInput
    _max?: BahanMaxOrderByAggregateInput
    _min?: BahanMinOrderByAggregateInput
    _sum?: BahanSumOrderByAggregateInput
  }

  export type BahanScalarWhereWithAggregatesInput = {
    AND?: BahanScalarWhereWithAggregatesInput | BahanScalarWhereWithAggregatesInput[]
    OR?: BahanScalarWhereWithAggregatesInput[]
    NOT?: BahanScalarWhereWithAggregatesInput | BahanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Bahan"> | number
    resepId?: IntWithAggregatesFilter<"Bahan"> | number
    nama?: StringWithAggregatesFilter<"Bahan"> | string
    jumlah?: StringWithAggregatesFilter<"Bahan"> | string
  }

  export type LangkahPembuatanWhereInput = {
    AND?: LangkahPembuatanWhereInput | LangkahPembuatanWhereInput[]
    OR?: LangkahPembuatanWhereInput[]
    NOT?: LangkahPembuatanWhereInput | LangkahPembuatanWhereInput[]
    id?: IntFilter<"LangkahPembuatan"> | number
    resepId?: IntFilter<"LangkahPembuatan"> | number
    urutan?: IntFilter<"LangkahPembuatan"> | number
    deskripsi?: StringFilter<"LangkahPembuatan"> | string
    resep?: XOR<ResepScalarRelationFilter, ResepWhereInput>
  }

  export type LangkahPembuatanOrderByWithRelationInput = {
    id?: SortOrder
    resepId?: SortOrder
    urutan?: SortOrder
    deskripsi?: SortOrder
    resep?: ResepOrderByWithRelationInput
  }

  export type LangkahPembuatanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LangkahPembuatanWhereInput | LangkahPembuatanWhereInput[]
    OR?: LangkahPembuatanWhereInput[]
    NOT?: LangkahPembuatanWhereInput | LangkahPembuatanWhereInput[]
    resepId?: IntFilter<"LangkahPembuatan"> | number
    urutan?: IntFilter<"LangkahPembuatan"> | number
    deskripsi?: StringFilter<"LangkahPembuatan"> | string
    resep?: XOR<ResepScalarRelationFilter, ResepWhereInput>
  }, "id">

  export type LangkahPembuatanOrderByWithAggregationInput = {
    id?: SortOrder
    resepId?: SortOrder
    urutan?: SortOrder
    deskripsi?: SortOrder
    _count?: LangkahPembuatanCountOrderByAggregateInput
    _avg?: LangkahPembuatanAvgOrderByAggregateInput
    _max?: LangkahPembuatanMaxOrderByAggregateInput
    _min?: LangkahPembuatanMinOrderByAggregateInput
    _sum?: LangkahPembuatanSumOrderByAggregateInput
  }

  export type LangkahPembuatanScalarWhereWithAggregatesInput = {
    AND?: LangkahPembuatanScalarWhereWithAggregatesInput | LangkahPembuatanScalarWhereWithAggregatesInput[]
    OR?: LangkahPembuatanScalarWhereWithAggregatesInput[]
    NOT?: LangkahPembuatanScalarWhereWithAggregatesInput | LangkahPembuatanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LangkahPembuatan"> | number
    resepId?: IntWithAggregatesFilter<"LangkahPembuatan"> | number
    urutan?: IntWithAggregatesFilter<"LangkahPembuatan"> | number
    deskripsi?: StringWithAggregatesFilter<"LangkahPembuatan"> | string
  }

  export type ThreadWhereInput = {
    AND?: ThreadWhereInput | ThreadWhereInput[]
    OR?: ThreadWhereInput[]
    NOT?: ThreadWhereInput | ThreadWhereInput[]
    title?: StringFilter<"Thread"> | string
    createdAt?: DateTimeFilter<"Thread"> | Date | string
    updatedAt?: DateTimeFilter<"Thread"> | Date | string
    userId?: IntFilter<"Thread"> | number
    id?: IntFilter<"Thread"> | number
    messages?: MessageListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ThreadOrderByWithRelationInput = {
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    id?: SortOrder
    messages?: MessageOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type ThreadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThreadWhereInput | ThreadWhereInput[]
    OR?: ThreadWhereInput[]
    NOT?: ThreadWhereInput | ThreadWhereInput[]
    title?: StringFilter<"Thread"> | string
    createdAt?: DateTimeFilter<"Thread"> | Date | string
    updatedAt?: DateTimeFilter<"Thread"> | Date | string
    userId?: IntFilter<"Thread"> | number
    messages?: MessageListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ThreadOrderByWithAggregationInput = {
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    id?: SortOrder
    _count?: ThreadCountOrderByAggregateInput
    _avg?: ThreadAvgOrderByAggregateInput
    _max?: ThreadMaxOrderByAggregateInput
    _min?: ThreadMinOrderByAggregateInput
    _sum?: ThreadSumOrderByAggregateInput
  }

  export type ThreadScalarWhereWithAggregatesInput = {
    AND?: ThreadScalarWhereWithAggregatesInput | ThreadScalarWhereWithAggregatesInput[]
    OR?: ThreadScalarWhereWithAggregatesInput[]
    NOT?: ThreadScalarWhereWithAggregatesInput | ThreadScalarWhereWithAggregatesInput[]
    title?: StringWithAggregatesFilter<"Thread"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Thread"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Thread"> | Date | string
    userId?: IntWithAggregatesFilter<"Thread"> | number
    id?: IntWithAggregatesFilter<"Thread"> | number
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    role?: EnumRoleChatFilter<"Message"> | $Enums.RoleChat
    content?: StringFilter<"Message"> | string
    thought?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    id?: IntFilter<"Message"> | number
    threadId?: IntFilter<"Message"> | number
    thread?: XOR<ThreadScalarRelationFilter, ThreadWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    role?: SortOrder
    content?: SortOrder
    thought?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    threadId?: SortOrder
    thread?: ThreadOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    role?: EnumRoleChatFilter<"Message"> | $Enums.RoleChat
    content?: StringFilter<"Message"> | string
    thought?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    threadId?: IntFilter<"Message"> | number
    thread?: XOR<ThreadScalarRelationFilter, ThreadWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    role?: SortOrder
    content?: SortOrder
    thought?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    threadId?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    role?: EnumRoleChatWithAggregatesFilter<"Message"> | $Enums.RoleChat
    content?: StringWithAggregatesFilter<"Message"> | string
    thought?: StringNullableWithAggregatesFilter<"Message"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    id?: IntWithAggregatesFilter<"Message"> | number
    threadId?: IntWithAggregatesFilter<"Message"> | number
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: IntFilter<"Feedback"> | number
    userId?: IntFilter<"Feedback"> | number
    email?: StringFilter<"Feedback"> | string
    tanggalFeedback?: DateTimeFilter<"Feedback"> | Date | string
    subject?: StringFilter<"Feedback"> | string
    message?: StringFilter<"Feedback"> | string
    fullname?: StringFilter<"Feedback"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    tanggalFeedback?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    fullname?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    userId?: IntFilter<"Feedback"> | number
    email?: StringFilter<"Feedback"> | string
    tanggalFeedback?: DateTimeFilter<"Feedback"> | Date | string
    subject?: StringFilter<"Feedback"> | string
    message?: StringFilter<"Feedback"> | string
    fullname?: StringFilter<"Feedback"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    tanggalFeedback?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    fullname?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feedback"> | number
    userId?: IntWithAggregatesFilter<"Feedback"> | number
    email?: StringWithAggregatesFilter<"Feedback"> | string
    tanggalFeedback?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    subject?: StringWithAggregatesFilter<"Feedback"> | string
    message?: StringWithAggregatesFilter<"Feedback"> | string
    fullname?: StringWithAggregatesFilter<"Feedback"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    resepId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    rating?: IntFilter<"Comment"> | number
    resep?: XOR<ResepScalarRelationFilter, ResepWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    resepId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
    resep?: ResepOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    resepId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    rating?: IntFilter<"Comment"> | number
    resep?: XOR<ResepScalarRelationFilter, ResepWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    resepId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    resepId?: IntWithAggregatesFilter<"Comment"> | number
    userId?: IntWithAggregatesFilter<"Comment"> | number
    comment?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    rating?: IntWithAggregatesFilter<"Comment"> | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepCreateNestedManyWithoutUserInput
    savedResep?: SavedResepCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepUncheckedCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepUncheckedCreateNestedManyWithoutUserInput
    savedResep?: SavedResepUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUncheckedUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUncheckedUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResepCreateInput = {
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanCreateNestedManyWithoutResepInput
    comment?: CommentCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanCreateNestedManyWithoutResepInput
    admin?: UserCreateNestedOneWithoutResepDisetujuiInput
    kategori: KategoriCreateNestedOneWithoutResepInput
    user: UserCreateNestedOneWithoutResepDiunggahInput
    disimpanOleh?: SavedResepCreateNestedManyWithoutResepInput
  }

  export type ResepUncheckedCreateInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanUncheckedCreateNestedManyWithoutResepInput
    comment?: CommentUncheckedCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanUncheckedCreateNestedManyWithoutResepInput
    disimpanOleh?: SavedResepUncheckedCreateNestedManyWithoutResepInput
  }

  export type ResepUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUpdateManyWithoutResepNestedInput
    comment?: CommentUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUpdateManyWithoutResepNestedInput
    admin?: UserUpdateOneWithoutResepDisetujuiNestedInput
    kategori?: KategoriUpdateOneRequiredWithoutResepNestedInput
    user?: UserUpdateOneRequiredWithoutResepDiunggahNestedInput
    disimpanOleh?: SavedResepUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUncheckedUpdateManyWithoutResepNestedInput
    comment?: CommentUncheckedUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUncheckedUpdateManyWithoutResepNestedInput
    disimpanOleh?: SavedResepUncheckedUpdateManyWithoutResepNestedInput
  }

  export type ResepCreateManyInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
  }

  export type ResepUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
  }

  export type ResepUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
  }

  export type SavedResepCreateInput = {
    savedAt?: Date | string
    resep: ResepCreateNestedOneWithoutDisimpanOlehInput
    user: UserCreateNestedOneWithoutSavedResepInput
  }

  export type SavedResepUncheckedCreateInput = {
    id?: number
    userId: number
    resepId: number
    savedAt?: Date | string
  }

  export type SavedResepUpdateInput = {
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resep?: ResepUpdateOneRequiredWithoutDisimpanOlehNestedInput
    user?: UserUpdateOneRequiredWithoutSavedResepNestedInput
  }

  export type SavedResepUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedResepCreateManyInput = {
    id?: number
    userId: number
    resepId: number
    savedAt?: Date | string
  }

  export type SavedResepUpdateManyMutationInput = {
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedResepUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KategoriCreateInput = {
    nama: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    parent?: KategoriCreateNestedOneWithoutSubcategoriesInput
    subcategories?: KategoriCreateNestedManyWithoutParentInput
    resep?: ResepCreateNestedManyWithoutKategoriInput
  }

  export type KategoriUncheckedCreateInput = {
    id?: number
    nama: string
    createdAt?: Date | string
    parentId?: number | null
    updatedAt?: Date | string | null
    subcategories?: KategoriUncheckedCreateNestedManyWithoutParentInput
    resep?: ResepUncheckedCreateNestedManyWithoutKategoriInput
  }

  export type KategoriUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: KategoriUpdateOneWithoutSubcategoriesNestedInput
    subcategories?: KategoriUpdateManyWithoutParentNestedInput
    resep?: ResepUpdateManyWithoutKategoriNestedInput
  }

  export type KategoriUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subcategories?: KategoriUncheckedUpdateManyWithoutParentNestedInput
    resep?: ResepUncheckedUpdateManyWithoutKategoriNestedInput
  }

  export type KategoriCreateManyInput = {
    id?: number
    nama: string
    createdAt?: Date | string
    parentId?: number | null
    updatedAt?: Date | string | null
  }

  export type KategoriUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KategoriUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BahanCreateInput = {
    nama: string
    jumlah: string
    resep: ResepCreateNestedOneWithoutBahanListInput
  }

  export type BahanUncheckedCreateInput = {
    id?: number
    resepId: number
    nama: string
    jumlah: string
  }

  export type BahanUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    jumlah?: StringFieldUpdateOperationsInput | string
    resep?: ResepUpdateOneRequiredWithoutBahanListNestedInput
  }

  export type BahanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    jumlah?: StringFieldUpdateOperationsInput | string
  }

  export type BahanCreateManyInput = {
    id?: number
    resepId: number
    nama: string
    jumlah: string
  }

  export type BahanUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    jumlah?: StringFieldUpdateOperationsInput | string
  }

  export type BahanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    jumlah?: StringFieldUpdateOperationsInput | string
  }

  export type LangkahPembuatanCreateInput = {
    urutan: number
    deskripsi: string
    resep: ResepCreateNestedOneWithoutLangkahListInput
  }

  export type LangkahPembuatanUncheckedCreateInput = {
    id?: number
    resepId: number
    urutan: number
    deskripsi: string
  }

  export type LangkahPembuatanUpdateInput = {
    urutan?: IntFieldUpdateOperationsInput | number
    deskripsi?: StringFieldUpdateOperationsInput | string
    resep?: ResepUpdateOneRequiredWithoutLangkahListNestedInput
  }

  export type LangkahPembuatanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    urutan?: IntFieldUpdateOperationsInput | number
    deskripsi?: StringFieldUpdateOperationsInput | string
  }

  export type LangkahPembuatanCreateManyInput = {
    id?: number
    resepId: number
    urutan: number
    deskripsi: string
  }

  export type LangkahPembuatanUpdateManyMutationInput = {
    urutan?: IntFieldUpdateOperationsInput | number
    deskripsi?: StringFieldUpdateOperationsInput | string
  }

  export type LangkahPembuatanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    urutan?: IntFieldUpdateOperationsInput | number
    deskripsi?: StringFieldUpdateOperationsInput | string
  }

  export type ThreadCreateInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutThreadInput
    user: UserCreateNestedOneWithoutThreadInput
  }

  export type ThreadUncheckedCreateInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    id?: number
    messages?: MessageUncheckedCreateNestedManyWithoutThreadInput
  }

  export type ThreadUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutThreadNestedInput
    user?: UserUpdateOneRequiredWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type ThreadCreateManyInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    id?: number
  }

  export type ThreadUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreadUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateInput = {
    role: $Enums.RoleChat
    content: string
    thought?: string | null
    createdAt?: Date | string
    thread: ThreadCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    role: $Enums.RoleChat
    content: string
    thought?: string | null
    createdAt?: Date | string
    id?: number
    threadId: number
  }

  export type MessageUpdateInput = {
    role?: EnumRoleChatFieldUpdateOperationsInput | $Enums.RoleChat
    content?: StringFieldUpdateOperationsInput | string
    thought?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thread?: ThreadUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    role?: EnumRoleChatFieldUpdateOperationsInput | $Enums.RoleChat
    content?: StringFieldUpdateOperationsInput | string
    thought?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    threadId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyInput = {
    role: $Enums.RoleChat
    content: string
    thought?: string | null
    createdAt?: Date | string
    id?: number
    threadId: number
  }

  export type MessageUpdateManyMutationInput = {
    role?: EnumRoleChatFieldUpdateOperationsInput | $Enums.RoleChat
    content?: StringFieldUpdateOperationsInput | string
    thought?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    role?: EnumRoleChatFieldUpdateOperationsInput | $Enums.RoleChat
    content?: StringFieldUpdateOperationsInput | string
    thought?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    threadId?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateInput = {
    email: string
    tanggalFeedback?: Date | string
    subject: string
    message: string
    fullname: string
    user: UserCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    userId: number
    email: string
    tanggalFeedback?: Date | string
    subject: string
    message: string
    fullname: string
  }

  export type FeedbackUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    tanggalFeedback?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    tanggalFeedback?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateManyInput = {
    id?: number
    userId: number
    email: string
    tanggalFeedback?: Date | string
    subject: string
    message: string
    fullname: string
  }

  export type FeedbackUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    tanggalFeedback?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    tanggalFeedback?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    comment: string
    createdAt?: Date | string
    rating?: number
    resep: ResepCreateNestedOneWithoutCommentInput
    user: UserCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    resepId: number
    userId: number
    comment: string
    createdAt?: Date | string
    rating?: number
  }

  export type CommentUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    resep?: ResepUpdateOneRequiredWithoutCommentNestedInput
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    resepId: number
    userId: number
    comment: string
    createdAt?: Date | string
    rating?: number
  }

  export type CommentUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type ResepListRelationFilter = {
    every?: ResepWhereInput
    some?: ResepWhereInput
    none?: ResepWhereInput
  }

  export type SavedResepListRelationFilter = {
    every?: SavedResepWhereInput
    some?: SavedResepWhereInput
    none?: SavedResepWhereInput
  }

  export type ThreadListRelationFilter = {
    every?: ThreadWhereInput
    some?: ThreadWhereInput
    none?: ThreadWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedResepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThreadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phoneNumber?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumStatusResepFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusResep | EnumStatusResepFieldRefInput<$PrismaModel>
    in?: $Enums.StatusResep[] | ListEnumStatusResepFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusResep[] | ListEnumStatusResepFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusResepFilter<$PrismaModel> | $Enums.StatusResep
  }

  export type BahanListRelationFilter = {
    every?: BahanWhereInput
    some?: BahanWhereInput
    none?: BahanWhereInput
  }

  export type LangkahPembuatanListRelationFilter = {
    every?: LangkahPembuatanWhereInput
    some?: LangkahPembuatanWhereInput
    none?: LangkahPembuatanWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type KategoriScalarRelationFilter = {
    is?: KategoriWhereInput
    isNot?: KategoriWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BahanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LangkahPembuatanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResepCountOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    photoResep?: SortOrder
    kategoriId?: SortOrder
    tanggalUnggahan?: SortOrder
    userId?: SortOrder
    tanggalAcc?: SortOrder
    disetujuiOleh?: SortOrder
    isApproved?: SortOrder
    cookingTime?: SortOrder
    note?: SortOrder
    rating?: SortOrder
    servingTime?: SortOrder
    description?: SortOrder
    preparationTime?: SortOrder
  }

  export type ResepAvgOrderByAggregateInput = {
    id?: SortOrder
    kategoriId?: SortOrder
    userId?: SortOrder
    disetujuiOleh?: SortOrder
    rating?: SortOrder
  }

  export type ResepMaxOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    photoResep?: SortOrder
    kategoriId?: SortOrder
    tanggalUnggahan?: SortOrder
    userId?: SortOrder
    tanggalAcc?: SortOrder
    disetujuiOleh?: SortOrder
    isApproved?: SortOrder
    cookingTime?: SortOrder
    note?: SortOrder
    rating?: SortOrder
    servingTime?: SortOrder
    description?: SortOrder
    preparationTime?: SortOrder
  }

  export type ResepMinOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    photoResep?: SortOrder
    kategoriId?: SortOrder
    tanggalUnggahan?: SortOrder
    userId?: SortOrder
    tanggalAcc?: SortOrder
    disetujuiOleh?: SortOrder
    isApproved?: SortOrder
    cookingTime?: SortOrder
    note?: SortOrder
    rating?: SortOrder
    servingTime?: SortOrder
    description?: SortOrder
    preparationTime?: SortOrder
  }

  export type ResepSumOrderByAggregateInput = {
    id?: SortOrder
    kategoriId?: SortOrder
    userId?: SortOrder
    disetujuiOleh?: SortOrder
    rating?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumStatusResepWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusResep | EnumStatusResepFieldRefInput<$PrismaModel>
    in?: $Enums.StatusResep[] | ListEnumStatusResepFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusResep[] | ListEnumStatusResepFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusResepWithAggregatesFilter<$PrismaModel> | $Enums.StatusResep
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusResepFilter<$PrismaModel>
    _max?: NestedEnumStatusResepFilter<$PrismaModel>
  }

  export type ResepScalarRelationFilter = {
    is?: ResepWhereInput
    isNot?: ResepWhereInput
  }

  export type SavedResepUserIdResepIdCompoundUniqueInput = {
    userId: number
    resepId: number
  }

  export type SavedResepCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resepId?: SortOrder
    savedAt?: SortOrder
  }

  export type SavedResepAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resepId?: SortOrder
  }

  export type SavedResepMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resepId?: SortOrder
    savedAt?: SortOrder
  }

  export type SavedResepMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resepId?: SortOrder
    savedAt?: SortOrder
  }

  export type SavedResepSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resepId?: SortOrder
  }

  export type KategoriNullableScalarRelationFilter = {
    is?: KategoriWhereInput | null
    isNot?: KategoriWhereInput | null
  }

  export type KategoriListRelationFilter = {
    every?: KategoriWhereInput
    some?: KategoriWhereInput
    none?: KategoriWhereInput
  }

  export type KategoriOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KategoriCountOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    createdAt?: SortOrder
    parentId?: SortOrder
    updatedAt?: SortOrder
  }

  export type KategoriAvgOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type KategoriMaxOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    createdAt?: SortOrder
    parentId?: SortOrder
    updatedAt?: SortOrder
  }

  export type KategoriMinOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    createdAt?: SortOrder
    parentId?: SortOrder
    updatedAt?: SortOrder
  }

  export type KategoriSumOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type BahanCountOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    nama?: SortOrder
    jumlah?: SortOrder
  }

  export type BahanAvgOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
  }

  export type BahanMaxOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    nama?: SortOrder
    jumlah?: SortOrder
  }

  export type BahanMinOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    nama?: SortOrder
    jumlah?: SortOrder
  }

  export type BahanSumOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
  }

  export type LangkahPembuatanCountOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    urutan?: SortOrder
    deskripsi?: SortOrder
  }

  export type LangkahPembuatanAvgOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    urutan?: SortOrder
  }

  export type LangkahPembuatanMaxOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    urutan?: SortOrder
    deskripsi?: SortOrder
  }

  export type LangkahPembuatanMinOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    urutan?: SortOrder
    deskripsi?: SortOrder
  }

  export type LangkahPembuatanSumOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    urutan?: SortOrder
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThreadCountOrderByAggregateInput = {
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    id?: SortOrder
  }

  export type ThreadAvgOrderByAggregateInput = {
    userId?: SortOrder
    id?: SortOrder
  }

  export type ThreadMaxOrderByAggregateInput = {
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    id?: SortOrder
  }

  export type ThreadMinOrderByAggregateInput = {
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    id?: SortOrder
  }

  export type ThreadSumOrderByAggregateInput = {
    userId?: SortOrder
    id?: SortOrder
  }

  export type EnumRoleChatFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleChat | EnumRoleChatFieldRefInput<$PrismaModel>
    in?: $Enums.RoleChat[] | ListEnumRoleChatFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleChat[] | ListEnumRoleChatFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleChatFilter<$PrismaModel> | $Enums.RoleChat
  }

  export type ThreadScalarRelationFilter = {
    is?: ThreadWhereInput
    isNot?: ThreadWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    role?: SortOrder
    content?: SortOrder
    thought?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    threadId?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    role?: SortOrder
    content?: SortOrder
    thought?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    threadId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    role?: SortOrder
    content?: SortOrder
    thought?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    threadId?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
  }

  export type EnumRoleChatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleChat | EnumRoleChatFieldRefInput<$PrismaModel>
    in?: $Enums.RoleChat[] | ListEnumRoleChatFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleChat[] | ListEnumRoleChatFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleChatWithAggregatesFilter<$PrismaModel> | $Enums.RoleChat
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleChatFilter<$PrismaModel>
    _max?: NestedEnumRoleChatFilter<$PrismaModel>
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    tanggalFeedback?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    fullname?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    tanggalFeedback?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    fullname?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    tanggalFeedback?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    fullname?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    resepId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ResepCreateNestedManyWithoutAdminInput = {
    create?: XOR<ResepCreateWithoutAdminInput, ResepUncheckedCreateWithoutAdminInput> | ResepCreateWithoutAdminInput[] | ResepUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutAdminInput | ResepCreateOrConnectWithoutAdminInput[]
    createMany?: ResepCreateManyAdminInputEnvelope
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
  }

  export type ResepCreateNestedManyWithoutUserInput = {
    create?: XOR<ResepCreateWithoutUserInput, ResepUncheckedCreateWithoutUserInput> | ResepCreateWithoutUserInput[] | ResepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutUserInput | ResepCreateOrConnectWithoutUserInput[]
    createMany?: ResepCreateManyUserInputEnvelope
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
  }

  export type SavedResepCreateNestedManyWithoutUserInput = {
    create?: XOR<SavedResepCreateWithoutUserInput, SavedResepUncheckedCreateWithoutUserInput> | SavedResepCreateWithoutUserInput[] | SavedResepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedResepCreateOrConnectWithoutUserInput | SavedResepCreateOrConnectWithoutUserInput[]
    createMany?: SavedResepCreateManyUserInputEnvelope
    connect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
  }

  export type ThreadCreateNestedManyWithoutUserInput = {
    create?: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput> | ThreadCreateWithoutUserInput[] | ThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutUserInput | ThreadCreateOrConnectWithoutUserInput[]
    createMany?: ThreadCreateManyUserInputEnvelope
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ResepUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<ResepCreateWithoutAdminInput, ResepUncheckedCreateWithoutAdminInput> | ResepCreateWithoutAdminInput[] | ResepUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutAdminInput | ResepCreateOrConnectWithoutAdminInput[]
    createMany?: ResepCreateManyAdminInputEnvelope
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
  }

  export type ResepUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ResepCreateWithoutUserInput, ResepUncheckedCreateWithoutUserInput> | ResepCreateWithoutUserInput[] | ResepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutUserInput | ResepCreateOrConnectWithoutUserInput[]
    createMany?: ResepCreateManyUserInputEnvelope
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
  }

  export type SavedResepUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SavedResepCreateWithoutUserInput, SavedResepUncheckedCreateWithoutUserInput> | SavedResepCreateWithoutUserInput[] | SavedResepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedResepCreateOrConnectWithoutUserInput | SavedResepCreateOrConnectWithoutUserInput[]
    createMany?: SavedResepCreateManyUserInputEnvelope
    connect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
  }

  export type ThreadUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput> | ThreadCreateWithoutUserInput[] | ThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutUserInput | ThreadCreateOrConnectWithoutUserInput[]
    createMany?: ThreadCreateManyUserInputEnvelope
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ResepUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ResepCreateWithoutAdminInput, ResepUncheckedCreateWithoutAdminInput> | ResepCreateWithoutAdminInput[] | ResepUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutAdminInput | ResepCreateOrConnectWithoutAdminInput[]
    upsert?: ResepUpsertWithWhereUniqueWithoutAdminInput | ResepUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ResepCreateManyAdminInputEnvelope
    set?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    disconnect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    delete?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    update?: ResepUpdateWithWhereUniqueWithoutAdminInput | ResepUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ResepUpdateManyWithWhereWithoutAdminInput | ResepUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ResepScalarWhereInput | ResepScalarWhereInput[]
  }

  export type ResepUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResepCreateWithoutUserInput, ResepUncheckedCreateWithoutUserInput> | ResepCreateWithoutUserInput[] | ResepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutUserInput | ResepCreateOrConnectWithoutUserInput[]
    upsert?: ResepUpsertWithWhereUniqueWithoutUserInput | ResepUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResepCreateManyUserInputEnvelope
    set?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    disconnect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    delete?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    update?: ResepUpdateWithWhereUniqueWithoutUserInput | ResepUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResepUpdateManyWithWhereWithoutUserInput | ResepUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResepScalarWhereInput | ResepScalarWhereInput[]
  }

  export type SavedResepUpdateManyWithoutUserNestedInput = {
    create?: XOR<SavedResepCreateWithoutUserInput, SavedResepUncheckedCreateWithoutUserInput> | SavedResepCreateWithoutUserInput[] | SavedResepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedResepCreateOrConnectWithoutUserInput | SavedResepCreateOrConnectWithoutUserInput[]
    upsert?: SavedResepUpsertWithWhereUniqueWithoutUserInput | SavedResepUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SavedResepCreateManyUserInputEnvelope
    set?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    disconnect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    delete?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    connect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    update?: SavedResepUpdateWithWhereUniqueWithoutUserInput | SavedResepUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SavedResepUpdateManyWithWhereWithoutUserInput | SavedResepUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SavedResepScalarWhereInput | SavedResepScalarWhereInput[]
  }

  export type ThreadUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput> | ThreadCreateWithoutUserInput[] | ThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutUserInput | ThreadCreateOrConnectWithoutUserInput[]
    upsert?: ThreadUpsertWithWhereUniqueWithoutUserInput | ThreadUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThreadCreateManyUserInputEnvelope
    set?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    disconnect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    delete?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    update?: ThreadUpdateWithWhereUniqueWithoutUserInput | ThreadUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThreadUpdateManyWithWhereWithoutUserInput | ThreadUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ResepUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ResepCreateWithoutAdminInput, ResepUncheckedCreateWithoutAdminInput> | ResepCreateWithoutAdminInput[] | ResepUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutAdminInput | ResepCreateOrConnectWithoutAdminInput[]
    upsert?: ResepUpsertWithWhereUniqueWithoutAdminInput | ResepUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ResepCreateManyAdminInputEnvelope
    set?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    disconnect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    delete?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    update?: ResepUpdateWithWhereUniqueWithoutAdminInput | ResepUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ResepUpdateManyWithWhereWithoutAdminInput | ResepUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ResepScalarWhereInput | ResepScalarWhereInput[]
  }

  export type ResepUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResepCreateWithoutUserInput, ResepUncheckedCreateWithoutUserInput> | ResepCreateWithoutUserInput[] | ResepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutUserInput | ResepCreateOrConnectWithoutUserInput[]
    upsert?: ResepUpsertWithWhereUniqueWithoutUserInput | ResepUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResepCreateManyUserInputEnvelope
    set?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    disconnect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    delete?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    update?: ResepUpdateWithWhereUniqueWithoutUserInput | ResepUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResepUpdateManyWithWhereWithoutUserInput | ResepUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResepScalarWhereInput | ResepScalarWhereInput[]
  }

  export type SavedResepUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SavedResepCreateWithoutUserInput, SavedResepUncheckedCreateWithoutUserInput> | SavedResepCreateWithoutUserInput[] | SavedResepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedResepCreateOrConnectWithoutUserInput | SavedResepCreateOrConnectWithoutUserInput[]
    upsert?: SavedResepUpsertWithWhereUniqueWithoutUserInput | SavedResepUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SavedResepCreateManyUserInputEnvelope
    set?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    disconnect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    delete?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    connect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    update?: SavedResepUpdateWithWhereUniqueWithoutUserInput | SavedResepUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SavedResepUpdateManyWithWhereWithoutUserInput | SavedResepUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SavedResepScalarWhereInput | SavedResepScalarWhereInput[]
  }

  export type ThreadUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput> | ThreadCreateWithoutUserInput[] | ThreadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadCreateOrConnectWithoutUserInput | ThreadCreateOrConnectWithoutUserInput[]
    upsert?: ThreadUpsertWithWhereUniqueWithoutUserInput | ThreadUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThreadCreateManyUserInputEnvelope
    set?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    disconnect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    delete?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    connect?: ThreadWhereUniqueInput | ThreadWhereUniqueInput[]
    update?: ThreadUpdateWithWhereUniqueWithoutUserInput | ThreadUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThreadUpdateManyWithWhereWithoutUserInput | ThreadUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
  }

  export type BahanCreateNestedManyWithoutResepInput = {
    create?: XOR<BahanCreateWithoutResepInput, BahanUncheckedCreateWithoutResepInput> | BahanCreateWithoutResepInput[] | BahanUncheckedCreateWithoutResepInput[]
    connectOrCreate?: BahanCreateOrConnectWithoutResepInput | BahanCreateOrConnectWithoutResepInput[]
    createMany?: BahanCreateManyResepInputEnvelope
    connect?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutResepInput = {
    create?: XOR<CommentCreateWithoutResepInput, CommentUncheckedCreateWithoutResepInput> | CommentCreateWithoutResepInput[] | CommentUncheckedCreateWithoutResepInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutResepInput | CommentCreateOrConnectWithoutResepInput[]
    createMany?: CommentCreateManyResepInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LangkahPembuatanCreateNestedManyWithoutResepInput = {
    create?: XOR<LangkahPembuatanCreateWithoutResepInput, LangkahPembuatanUncheckedCreateWithoutResepInput> | LangkahPembuatanCreateWithoutResepInput[] | LangkahPembuatanUncheckedCreateWithoutResepInput[]
    connectOrCreate?: LangkahPembuatanCreateOrConnectWithoutResepInput | LangkahPembuatanCreateOrConnectWithoutResepInput[]
    createMany?: LangkahPembuatanCreateManyResepInputEnvelope
    connect?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutResepDisetujuiInput = {
    create?: XOR<UserCreateWithoutResepDisetujuiInput, UserUncheckedCreateWithoutResepDisetujuiInput>
    connectOrCreate?: UserCreateOrConnectWithoutResepDisetujuiInput
    connect?: UserWhereUniqueInput
  }

  export type KategoriCreateNestedOneWithoutResepInput = {
    create?: XOR<KategoriCreateWithoutResepInput, KategoriUncheckedCreateWithoutResepInput>
    connectOrCreate?: KategoriCreateOrConnectWithoutResepInput
    connect?: KategoriWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResepDiunggahInput = {
    create?: XOR<UserCreateWithoutResepDiunggahInput, UserUncheckedCreateWithoutResepDiunggahInput>
    connectOrCreate?: UserCreateOrConnectWithoutResepDiunggahInput
    connect?: UserWhereUniqueInput
  }

  export type SavedResepCreateNestedManyWithoutResepInput = {
    create?: XOR<SavedResepCreateWithoutResepInput, SavedResepUncheckedCreateWithoutResepInput> | SavedResepCreateWithoutResepInput[] | SavedResepUncheckedCreateWithoutResepInput[]
    connectOrCreate?: SavedResepCreateOrConnectWithoutResepInput | SavedResepCreateOrConnectWithoutResepInput[]
    createMany?: SavedResepCreateManyResepInputEnvelope
    connect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
  }

  export type BahanUncheckedCreateNestedManyWithoutResepInput = {
    create?: XOR<BahanCreateWithoutResepInput, BahanUncheckedCreateWithoutResepInput> | BahanCreateWithoutResepInput[] | BahanUncheckedCreateWithoutResepInput[]
    connectOrCreate?: BahanCreateOrConnectWithoutResepInput | BahanCreateOrConnectWithoutResepInput[]
    createMany?: BahanCreateManyResepInputEnvelope
    connect?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutResepInput = {
    create?: XOR<CommentCreateWithoutResepInput, CommentUncheckedCreateWithoutResepInput> | CommentCreateWithoutResepInput[] | CommentUncheckedCreateWithoutResepInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutResepInput | CommentCreateOrConnectWithoutResepInput[]
    createMany?: CommentCreateManyResepInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LangkahPembuatanUncheckedCreateNestedManyWithoutResepInput = {
    create?: XOR<LangkahPembuatanCreateWithoutResepInput, LangkahPembuatanUncheckedCreateWithoutResepInput> | LangkahPembuatanCreateWithoutResepInput[] | LangkahPembuatanUncheckedCreateWithoutResepInput[]
    connectOrCreate?: LangkahPembuatanCreateOrConnectWithoutResepInput | LangkahPembuatanCreateOrConnectWithoutResepInput[]
    createMany?: LangkahPembuatanCreateManyResepInputEnvelope
    connect?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
  }

  export type SavedResepUncheckedCreateNestedManyWithoutResepInput = {
    create?: XOR<SavedResepCreateWithoutResepInput, SavedResepUncheckedCreateWithoutResepInput> | SavedResepCreateWithoutResepInput[] | SavedResepUncheckedCreateWithoutResepInput[]
    connectOrCreate?: SavedResepCreateOrConnectWithoutResepInput | SavedResepCreateOrConnectWithoutResepInput[]
    createMany?: SavedResepCreateManyResepInputEnvelope
    connect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumStatusResepFieldUpdateOperationsInput = {
    set?: $Enums.StatusResep
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BahanUpdateManyWithoutResepNestedInput = {
    create?: XOR<BahanCreateWithoutResepInput, BahanUncheckedCreateWithoutResepInput> | BahanCreateWithoutResepInput[] | BahanUncheckedCreateWithoutResepInput[]
    connectOrCreate?: BahanCreateOrConnectWithoutResepInput | BahanCreateOrConnectWithoutResepInput[]
    upsert?: BahanUpsertWithWhereUniqueWithoutResepInput | BahanUpsertWithWhereUniqueWithoutResepInput[]
    createMany?: BahanCreateManyResepInputEnvelope
    set?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
    disconnect?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
    delete?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
    connect?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
    update?: BahanUpdateWithWhereUniqueWithoutResepInput | BahanUpdateWithWhereUniqueWithoutResepInput[]
    updateMany?: BahanUpdateManyWithWhereWithoutResepInput | BahanUpdateManyWithWhereWithoutResepInput[]
    deleteMany?: BahanScalarWhereInput | BahanScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutResepNestedInput = {
    create?: XOR<CommentCreateWithoutResepInput, CommentUncheckedCreateWithoutResepInput> | CommentCreateWithoutResepInput[] | CommentUncheckedCreateWithoutResepInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutResepInput | CommentCreateOrConnectWithoutResepInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutResepInput | CommentUpsertWithWhereUniqueWithoutResepInput[]
    createMany?: CommentCreateManyResepInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutResepInput | CommentUpdateWithWhereUniqueWithoutResepInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutResepInput | CommentUpdateManyWithWhereWithoutResepInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LangkahPembuatanUpdateManyWithoutResepNestedInput = {
    create?: XOR<LangkahPembuatanCreateWithoutResepInput, LangkahPembuatanUncheckedCreateWithoutResepInput> | LangkahPembuatanCreateWithoutResepInput[] | LangkahPembuatanUncheckedCreateWithoutResepInput[]
    connectOrCreate?: LangkahPembuatanCreateOrConnectWithoutResepInput | LangkahPembuatanCreateOrConnectWithoutResepInput[]
    upsert?: LangkahPembuatanUpsertWithWhereUniqueWithoutResepInput | LangkahPembuatanUpsertWithWhereUniqueWithoutResepInput[]
    createMany?: LangkahPembuatanCreateManyResepInputEnvelope
    set?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
    disconnect?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
    delete?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
    connect?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
    update?: LangkahPembuatanUpdateWithWhereUniqueWithoutResepInput | LangkahPembuatanUpdateWithWhereUniqueWithoutResepInput[]
    updateMany?: LangkahPembuatanUpdateManyWithWhereWithoutResepInput | LangkahPembuatanUpdateManyWithWhereWithoutResepInput[]
    deleteMany?: LangkahPembuatanScalarWhereInput | LangkahPembuatanScalarWhereInput[]
  }

  export type UserUpdateOneWithoutResepDisetujuiNestedInput = {
    create?: XOR<UserCreateWithoutResepDisetujuiInput, UserUncheckedCreateWithoutResepDisetujuiInput>
    connectOrCreate?: UserCreateOrConnectWithoutResepDisetujuiInput
    upsert?: UserUpsertWithoutResepDisetujuiInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResepDisetujuiInput, UserUpdateWithoutResepDisetujuiInput>, UserUncheckedUpdateWithoutResepDisetujuiInput>
  }

  export type KategoriUpdateOneRequiredWithoutResepNestedInput = {
    create?: XOR<KategoriCreateWithoutResepInput, KategoriUncheckedCreateWithoutResepInput>
    connectOrCreate?: KategoriCreateOrConnectWithoutResepInput
    upsert?: KategoriUpsertWithoutResepInput
    connect?: KategoriWhereUniqueInput
    update?: XOR<XOR<KategoriUpdateToOneWithWhereWithoutResepInput, KategoriUpdateWithoutResepInput>, KategoriUncheckedUpdateWithoutResepInput>
  }

  export type UserUpdateOneRequiredWithoutResepDiunggahNestedInput = {
    create?: XOR<UserCreateWithoutResepDiunggahInput, UserUncheckedCreateWithoutResepDiunggahInput>
    connectOrCreate?: UserCreateOrConnectWithoutResepDiunggahInput
    upsert?: UserUpsertWithoutResepDiunggahInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResepDiunggahInput, UserUpdateWithoutResepDiunggahInput>, UserUncheckedUpdateWithoutResepDiunggahInput>
  }

  export type SavedResepUpdateManyWithoutResepNestedInput = {
    create?: XOR<SavedResepCreateWithoutResepInput, SavedResepUncheckedCreateWithoutResepInput> | SavedResepCreateWithoutResepInput[] | SavedResepUncheckedCreateWithoutResepInput[]
    connectOrCreate?: SavedResepCreateOrConnectWithoutResepInput | SavedResepCreateOrConnectWithoutResepInput[]
    upsert?: SavedResepUpsertWithWhereUniqueWithoutResepInput | SavedResepUpsertWithWhereUniqueWithoutResepInput[]
    createMany?: SavedResepCreateManyResepInputEnvelope
    set?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    disconnect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    delete?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    connect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    update?: SavedResepUpdateWithWhereUniqueWithoutResepInput | SavedResepUpdateWithWhereUniqueWithoutResepInput[]
    updateMany?: SavedResepUpdateManyWithWhereWithoutResepInput | SavedResepUpdateManyWithWhereWithoutResepInput[]
    deleteMany?: SavedResepScalarWhereInput | SavedResepScalarWhereInput[]
  }

  export type BahanUncheckedUpdateManyWithoutResepNestedInput = {
    create?: XOR<BahanCreateWithoutResepInput, BahanUncheckedCreateWithoutResepInput> | BahanCreateWithoutResepInput[] | BahanUncheckedCreateWithoutResepInput[]
    connectOrCreate?: BahanCreateOrConnectWithoutResepInput | BahanCreateOrConnectWithoutResepInput[]
    upsert?: BahanUpsertWithWhereUniqueWithoutResepInput | BahanUpsertWithWhereUniqueWithoutResepInput[]
    createMany?: BahanCreateManyResepInputEnvelope
    set?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
    disconnect?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
    delete?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
    connect?: BahanWhereUniqueInput | BahanWhereUniqueInput[]
    update?: BahanUpdateWithWhereUniqueWithoutResepInput | BahanUpdateWithWhereUniqueWithoutResepInput[]
    updateMany?: BahanUpdateManyWithWhereWithoutResepInput | BahanUpdateManyWithWhereWithoutResepInput[]
    deleteMany?: BahanScalarWhereInput | BahanScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutResepNestedInput = {
    create?: XOR<CommentCreateWithoutResepInput, CommentUncheckedCreateWithoutResepInput> | CommentCreateWithoutResepInput[] | CommentUncheckedCreateWithoutResepInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutResepInput | CommentCreateOrConnectWithoutResepInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutResepInput | CommentUpsertWithWhereUniqueWithoutResepInput[]
    createMany?: CommentCreateManyResepInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutResepInput | CommentUpdateWithWhereUniqueWithoutResepInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutResepInput | CommentUpdateManyWithWhereWithoutResepInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LangkahPembuatanUncheckedUpdateManyWithoutResepNestedInput = {
    create?: XOR<LangkahPembuatanCreateWithoutResepInput, LangkahPembuatanUncheckedCreateWithoutResepInput> | LangkahPembuatanCreateWithoutResepInput[] | LangkahPembuatanUncheckedCreateWithoutResepInput[]
    connectOrCreate?: LangkahPembuatanCreateOrConnectWithoutResepInput | LangkahPembuatanCreateOrConnectWithoutResepInput[]
    upsert?: LangkahPembuatanUpsertWithWhereUniqueWithoutResepInput | LangkahPembuatanUpsertWithWhereUniqueWithoutResepInput[]
    createMany?: LangkahPembuatanCreateManyResepInputEnvelope
    set?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
    disconnect?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
    delete?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
    connect?: LangkahPembuatanWhereUniqueInput | LangkahPembuatanWhereUniqueInput[]
    update?: LangkahPembuatanUpdateWithWhereUniqueWithoutResepInput | LangkahPembuatanUpdateWithWhereUniqueWithoutResepInput[]
    updateMany?: LangkahPembuatanUpdateManyWithWhereWithoutResepInput | LangkahPembuatanUpdateManyWithWhereWithoutResepInput[]
    deleteMany?: LangkahPembuatanScalarWhereInput | LangkahPembuatanScalarWhereInput[]
  }

  export type SavedResepUncheckedUpdateManyWithoutResepNestedInput = {
    create?: XOR<SavedResepCreateWithoutResepInput, SavedResepUncheckedCreateWithoutResepInput> | SavedResepCreateWithoutResepInput[] | SavedResepUncheckedCreateWithoutResepInput[]
    connectOrCreate?: SavedResepCreateOrConnectWithoutResepInput | SavedResepCreateOrConnectWithoutResepInput[]
    upsert?: SavedResepUpsertWithWhereUniqueWithoutResepInput | SavedResepUpsertWithWhereUniqueWithoutResepInput[]
    createMany?: SavedResepCreateManyResepInputEnvelope
    set?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    disconnect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    delete?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    connect?: SavedResepWhereUniqueInput | SavedResepWhereUniqueInput[]
    update?: SavedResepUpdateWithWhereUniqueWithoutResepInput | SavedResepUpdateWithWhereUniqueWithoutResepInput[]
    updateMany?: SavedResepUpdateManyWithWhereWithoutResepInput | SavedResepUpdateManyWithWhereWithoutResepInput[]
    deleteMany?: SavedResepScalarWhereInput | SavedResepScalarWhereInput[]
  }

  export type ResepCreateNestedOneWithoutDisimpanOlehInput = {
    create?: XOR<ResepCreateWithoutDisimpanOlehInput, ResepUncheckedCreateWithoutDisimpanOlehInput>
    connectOrCreate?: ResepCreateOrConnectWithoutDisimpanOlehInput
    connect?: ResepWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSavedResepInput = {
    create?: XOR<UserCreateWithoutSavedResepInput, UserUncheckedCreateWithoutSavedResepInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedResepInput
    connect?: UserWhereUniqueInput
  }

  export type ResepUpdateOneRequiredWithoutDisimpanOlehNestedInput = {
    create?: XOR<ResepCreateWithoutDisimpanOlehInput, ResepUncheckedCreateWithoutDisimpanOlehInput>
    connectOrCreate?: ResepCreateOrConnectWithoutDisimpanOlehInput
    upsert?: ResepUpsertWithoutDisimpanOlehInput
    connect?: ResepWhereUniqueInput
    update?: XOR<XOR<ResepUpdateToOneWithWhereWithoutDisimpanOlehInput, ResepUpdateWithoutDisimpanOlehInput>, ResepUncheckedUpdateWithoutDisimpanOlehInput>
  }

  export type UserUpdateOneRequiredWithoutSavedResepNestedInput = {
    create?: XOR<UserCreateWithoutSavedResepInput, UserUncheckedCreateWithoutSavedResepInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedResepInput
    upsert?: UserUpsertWithoutSavedResepInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSavedResepInput, UserUpdateWithoutSavedResepInput>, UserUncheckedUpdateWithoutSavedResepInput>
  }

  export type KategoriCreateNestedOneWithoutSubcategoriesInput = {
    create?: XOR<KategoriCreateWithoutSubcategoriesInput, KategoriUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: KategoriCreateOrConnectWithoutSubcategoriesInput
    connect?: KategoriWhereUniqueInput
  }

  export type KategoriCreateNestedManyWithoutParentInput = {
    create?: XOR<KategoriCreateWithoutParentInput, KategoriUncheckedCreateWithoutParentInput> | KategoriCreateWithoutParentInput[] | KategoriUncheckedCreateWithoutParentInput[]
    connectOrCreate?: KategoriCreateOrConnectWithoutParentInput | KategoriCreateOrConnectWithoutParentInput[]
    createMany?: KategoriCreateManyParentInputEnvelope
    connect?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
  }

  export type ResepCreateNestedManyWithoutKategoriInput = {
    create?: XOR<ResepCreateWithoutKategoriInput, ResepUncheckedCreateWithoutKategoriInput> | ResepCreateWithoutKategoriInput[] | ResepUncheckedCreateWithoutKategoriInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutKategoriInput | ResepCreateOrConnectWithoutKategoriInput[]
    createMany?: ResepCreateManyKategoriInputEnvelope
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
  }

  export type KategoriUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<KategoriCreateWithoutParentInput, KategoriUncheckedCreateWithoutParentInput> | KategoriCreateWithoutParentInput[] | KategoriUncheckedCreateWithoutParentInput[]
    connectOrCreate?: KategoriCreateOrConnectWithoutParentInput | KategoriCreateOrConnectWithoutParentInput[]
    createMany?: KategoriCreateManyParentInputEnvelope
    connect?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
  }

  export type ResepUncheckedCreateNestedManyWithoutKategoriInput = {
    create?: XOR<ResepCreateWithoutKategoriInput, ResepUncheckedCreateWithoutKategoriInput> | ResepCreateWithoutKategoriInput[] | ResepUncheckedCreateWithoutKategoriInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutKategoriInput | ResepCreateOrConnectWithoutKategoriInput[]
    createMany?: ResepCreateManyKategoriInputEnvelope
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
  }

  export type KategoriUpdateOneWithoutSubcategoriesNestedInput = {
    create?: XOR<KategoriCreateWithoutSubcategoriesInput, KategoriUncheckedCreateWithoutSubcategoriesInput>
    connectOrCreate?: KategoriCreateOrConnectWithoutSubcategoriesInput
    upsert?: KategoriUpsertWithoutSubcategoriesInput
    disconnect?: KategoriWhereInput | boolean
    delete?: KategoriWhereInput | boolean
    connect?: KategoriWhereUniqueInput
    update?: XOR<XOR<KategoriUpdateToOneWithWhereWithoutSubcategoriesInput, KategoriUpdateWithoutSubcategoriesInput>, KategoriUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type KategoriUpdateManyWithoutParentNestedInput = {
    create?: XOR<KategoriCreateWithoutParentInput, KategoriUncheckedCreateWithoutParentInput> | KategoriCreateWithoutParentInput[] | KategoriUncheckedCreateWithoutParentInput[]
    connectOrCreate?: KategoriCreateOrConnectWithoutParentInput | KategoriCreateOrConnectWithoutParentInput[]
    upsert?: KategoriUpsertWithWhereUniqueWithoutParentInput | KategoriUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: KategoriCreateManyParentInputEnvelope
    set?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
    disconnect?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
    delete?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
    connect?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
    update?: KategoriUpdateWithWhereUniqueWithoutParentInput | KategoriUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: KategoriUpdateManyWithWhereWithoutParentInput | KategoriUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: KategoriScalarWhereInput | KategoriScalarWhereInput[]
  }

  export type ResepUpdateManyWithoutKategoriNestedInput = {
    create?: XOR<ResepCreateWithoutKategoriInput, ResepUncheckedCreateWithoutKategoriInput> | ResepCreateWithoutKategoriInput[] | ResepUncheckedCreateWithoutKategoriInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutKategoriInput | ResepCreateOrConnectWithoutKategoriInput[]
    upsert?: ResepUpsertWithWhereUniqueWithoutKategoriInput | ResepUpsertWithWhereUniqueWithoutKategoriInput[]
    createMany?: ResepCreateManyKategoriInputEnvelope
    set?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    disconnect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    delete?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    update?: ResepUpdateWithWhereUniqueWithoutKategoriInput | ResepUpdateWithWhereUniqueWithoutKategoriInput[]
    updateMany?: ResepUpdateManyWithWhereWithoutKategoriInput | ResepUpdateManyWithWhereWithoutKategoriInput[]
    deleteMany?: ResepScalarWhereInput | ResepScalarWhereInput[]
  }

  export type KategoriUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<KategoriCreateWithoutParentInput, KategoriUncheckedCreateWithoutParentInput> | KategoriCreateWithoutParentInput[] | KategoriUncheckedCreateWithoutParentInput[]
    connectOrCreate?: KategoriCreateOrConnectWithoutParentInput | KategoriCreateOrConnectWithoutParentInput[]
    upsert?: KategoriUpsertWithWhereUniqueWithoutParentInput | KategoriUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: KategoriCreateManyParentInputEnvelope
    set?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
    disconnect?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
    delete?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
    connect?: KategoriWhereUniqueInput | KategoriWhereUniqueInput[]
    update?: KategoriUpdateWithWhereUniqueWithoutParentInput | KategoriUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: KategoriUpdateManyWithWhereWithoutParentInput | KategoriUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: KategoriScalarWhereInput | KategoriScalarWhereInput[]
  }

  export type ResepUncheckedUpdateManyWithoutKategoriNestedInput = {
    create?: XOR<ResepCreateWithoutKategoriInput, ResepUncheckedCreateWithoutKategoriInput> | ResepCreateWithoutKategoriInput[] | ResepUncheckedCreateWithoutKategoriInput[]
    connectOrCreate?: ResepCreateOrConnectWithoutKategoriInput | ResepCreateOrConnectWithoutKategoriInput[]
    upsert?: ResepUpsertWithWhereUniqueWithoutKategoriInput | ResepUpsertWithWhereUniqueWithoutKategoriInput[]
    createMany?: ResepCreateManyKategoriInputEnvelope
    set?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    disconnect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    delete?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    connect?: ResepWhereUniqueInput | ResepWhereUniqueInput[]
    update?: ResepUpdateWithWhereUniqueWithoutKategoriInput | ResepUpdateWithWhereUniqueWithoutKategoriInput[]
    updateMany?: ResepUpdateManyWithWhereWithoutKategoriInput | ResepUpdateManyWithWhereWithoutKategoriInput[]
    deleteMany?: ResepScalarWhereInput | ResepScalarWhereInput[]
  }

  export type ResepCreateNestedOneWithoutBahanListInput = {
    create?: XOR<ResepCreateWithoutBahanListInput, ResepUncheckedCreateWithoutBahanListInput>
    connectOrCreate?: ResepCreateOrConnectWithoutBahanListInput
    connect?: ResepWhereUniqueInput
  }

  export type ResepUpdateOneRequiredWithoutBahanListNestedInput = {
    create?: XOR<ResepCreateWithoutBahanListInput, ResepUncheckedCreateWithoutBahanListInput>
    connectOrCreate?: ResepCreateOrConnectWithoutBahanListInput
    upsert?: ResepUpsertWithoutBahanListInput
    connect?: ResepWhereUniqueInput
    update?: XOR<XOR<ResepUpdateToOneWithWhereWithoutBahanListInput, ResepUpdateWithoutBahanListInput>, ResepUncheckedUpdateWithoutBahanListInput>
  }

  export type ResepCreateNestedOneWithoutLangkahListInput = {
    create?: XOR<ResepCreateWithoutLangkahListInput, ResepUncheckedCreateWithoutLangkahListInput>
    connectOrCreate?: ResepCreateOrConnectWithoutLangkahListInput
    connect?: ResepWhereUniqueInput
  }

  export type ResepUpdateOneRequiredWithoutLangkahListNestedInput = {
    create?: XOR<ResepCreateWithoutLangkahListInput, ResepUncheckedCreateWithoutLangkahListInput>
    connectOrCreate?: ResepCreateOrConnectWithoutLangkahListInput
    upsert?: ResepUpsertWithoutLangkahListInput
    connect?: ResepWhereUniqueInput
    update?: XOR<XOR<ResepUpdateToOneWithWhereWithoutLangkahListInput, ResepUpdateWithoutLangkahListInput>, ResepUncheckedUpdateWithoutLangkahListInput>
  }

  export type MessageCreateNestedManyWithoutThreadInput = {
    create?: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput> | MessageCreateWithoutThreadInput[] | MessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutThreadInput | MessageCreateOrConnectWithoutThreadInput[]
    createMany?: MessageCreateManyThreadInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutThreadInput = {
    create?: XOR<UserCreateWithoutThreadInput, UserUncheckedCreateWithoutThreadInput>
    connectOrCreate?: UserCreateOrConnectWithoutThreadInput
    connect?: UserWhereUniqueInput
  }

  export type MessageUncheckedCreateNestedManyWithoutThreadInput = {
    create?: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput> | MessageCreateWithoutThreadInput[] | MessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutThreadInput | MessageCreateOrConnectWithoutThreadInput[]
    createMany?: MessageCreateManyThreadInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUpdateManyWithoutThreadNestedInput = {
    create?: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput> | MessageCreateWithoutThreadInput[] | MessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutThreadInput | MessageCreateOrConnectWithoutThreadInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutThreadInput | MessageUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: MessageCreateManyThreadInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutThreadInput | MessageUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutThreadInput | MessageUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutThreadNestedInput = {
    create?: XOR<UserCreateWithoutThreadInput, UserUncheckedCreateWithoutThreadInput>
    connectOrCreate?: UserCreateOrConnectWithoutThreadInput
    upsert?: UserUpsertWithoutThreadInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutThreadInput, UserUpdateWithoutThreadInput>, UserUncheckedUpdateWithoutThreadInput>
  }

  export type MessageUncheckedUpdateManyWithoutThreadNestedInput = {
    create?: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput> | MessageCreateWithoutThreadInput[] | MessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutThreadInput | MessageCreateOrConnectWithoutThreadInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutThreadInput | MessageUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: MessageCreateManyThreadInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutThreadInput | MessageUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutThreadInput | MessageUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ThreadCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ThreadCreateWithoutMessagesInput, ThreadUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ThreadCreateOrConnectWithoutMessagesInput
    connect?: ThreadWhereUniqueInput
  }

  export type EnumRoleChatFieldUpdateOperationsInput = {
    set?: $Enums.RoleChat
  }

  export type ThreadUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ThreadCreateWithoutMessagesInput, ThreadUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ThreadCreateOrConnectWithoutMessagesInput
    upsert?: ThreadUpsertWithoutMessagesInput
    connect?: ThreadWhereUniqueInput
    update?: XOR<XOR<ThreadUpdateToOneWithWhereWithoutMessagesInput, ThreadUpdateWithoutMessagesInput>, ThreadUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    upsert?: UserUpsertWithoutFeedbackInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbackInput, UserUpdateWithoutFeedbackInput>, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type ResepCreateNestedOneWithoutCommentInput = {
    create?: XOR<ResepCreateWithoutCommentInput, ResepUncheckedCreateWithoutCommentInput>
    connectOrCreate?: ResepCreateOrConnectWithoutCommentInput
    connect?: ResepWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type ResepUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<ResepCreateWithoutCommentInput, ResepUncheckedCreateWithoutCommentInput>
    connectOrCreate?: ResepCreateOrConnectWithoutCommentInput
    upsert?: ResepUpsertWithoutCommentInput
    connect?: ResepWhereUniqueInput
    update?: XOR<XOR<ResepUpdateToOneWithWhereWithoutCommentInput, ResepUpdateWithoutCommentInput>, ResepUncheckedUpdateWithoutCommentInput>
  }

  export type UserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentInput, UserUpdateWithoutCommentInput>, UserUncheckedUpdateWithoutCommentInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumStatusResepFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusResep | EnumStatusResepFieldRefInput<$PrismaModel>
    in?: $Enums.StatusResep[] | ListEnumStatusResepFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusResep[] | ListEnumStatusResepFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusResepFilter<$PrismaModel> | $Enums.StatusResep
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusResepWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusResep | EnumStatusResepFieldRefInput<$PrismaModel>
    in?: $Enums.StatusResep[] | ListEnumStatusResepFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusResep[] | ListEnumStatusResepFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusResepWithAggregatesFilter<$PrismaModel> | $Enums.StatusResep
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusResepFilter<$PrismaModel>
    _max?: NestedEnumStatusResepFilter<$PrismaModel>
  }

  export type NestedEnumRoleChatFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleChat | EnumRoleChatFieldRefInput<$PrismaModel>
    in?: $Enums.RoleChat[] | ListEnumRoleChatFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleChat[] | ListEnumRoleChatFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleChatFilter<$PrismaModel> | $Enums.RoleChat
  }

  export type NestedEnumRoleChatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleChat | EnumRoleChatFieldRefInput<$PrismaModel>
    in?: $Enums.RoleChat[] | ListEnumRoleChatFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleChat[] | ListEnumRoleChatFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleChatWithAggregatesFilter<$PrismaModel> | $Enums.RoleChat
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleChatFilter<$PrismaModel>
    _max?: NestedEnumRoleChatFilter<$PrismaModel>
  }

  export type CommentCreateWithoutUserInput = {
    comment: string
    createdAt?: Date | string
    rating?: number
    resep: ResepCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    resepId: number
    comment: string
    createdAt?: Date | string
    rating?: number
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    email: string
    tanggalFeedback?: Date | string
    subject: string
    message: string
    fullname: string
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: number
    email: string
    tanggalFeedback?: Date | string
    subject: string
    message: string
    fullname: string
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ResepCreateWithoutAdminInput = {
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanCreateNestedManyWithoutResepInput
    comment?: CommentCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanCreateNestedManyWithoutResepInput
    kategori: KategoriCreateNestedOneWithoutResepInput
    user: UserCreateNestedOneWithoutResepDiunggahInput
    disimpanOleh?: SavedResepCreateNestedManyWithoutResepInput
  }

  export type ResepUncheckedCreateWithoutAdminInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanUncheckedCreateNestedManyWithoutResepInput
    comment?: CommentUncheckedCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanUncheckedCreateNestedManyWithoutResepInput
    disimpanOleh?: SavedResepUncheckedCreateNestedManyWithoutResepInput
  }

  export type ResepCreateOrConnectWithoutAdminInput = {
    where: ResepWhereUniqueInput
    create: XOR<ResepCreateWithoutAdminInput, ResepUncheckedCreateWithoutAdminInput>
  }

  export type ResepCreateManyAdminInputEnvelope = {
    data: ResepCreateManyAdminInput | ResepCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type ResepCreateWithoutUserInput = {
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanCreateNestedManyWithoutResepInput
    comment?: CommentCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanCreateNestedManyWithoutResepInput
    admin?: UserCreateNestedOneWithoutResepDisetujuiInput
    kategori: KategoriCreateNestedOneWithoutResepInput
    disimpanOleh?: SavedResepCreateNestedManyWithoutResepInput
  }

  export type ResepUncheckedCreateWithoutUserInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanUncheckedCreateNestedManyWithoutResepInput
    comment?: CommentUncheckedCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanUncheckedCreateNestedManyWithoutResepInput
    disimpanOleh?: SavedResepUncheckedCreateNestedManyWithoutResepInput
  }

  export type ResepCreateOrConnectWithoutUserInput = {
    where: ResepWhereUniqueInput
    create: XOR<ResepCreateWithoutUserInput, ResepUncheckedCreateWithoutUserInput>
  }

  export type ResepCreateManyUserInputEnvelope = {
    data: ResepCreateManyUserInput | ResepCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SavedResepCreateWithoutUserInput = {
    savedAt?: Date | string
    resep: ResepCreateNestedOneWithoutDisimpanOlehInput
  }

  export type SavedResepUncheckedCreateWithoutUserInput = {
    id?: number
    resepId: number
    savedAt?: Date | string
  }

  export type SavedResepCreateOrConnectWithoutUserInput = {
    where: SavedResepWhereUniqueInput
    create: XOR<SavedResepCreateWithoutUserInput, SavedResepUncheckedCreateWithoutUserInput>
  }

  export type SavedResepCreateManyUserInputEnvelope = {
    data: SavedResepCreateManyUserInput | SavedResepCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ThreadCreateWithoutUserInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutThreadInput
  }

  export type ThreadUncheckedCreateWithoutUserInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    messages?: MessageUncheckedCreateNestedManyWithoutThreadInput
  }

  export type ThreadCreateOrConnectWithoutUserInput = {
    where: ThreadWhereUniqueInput
    create: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput>
  }

  export type ThreadCreateManyUserInputEnvelope = {
    data: ThreadCreateManyUserInput | ThreadCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    resepId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    rating?: IntFilter<"Comment"> | number
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: IntFilter<"Feedback"> | number
    userId?: IntFilter<"Feedback"> | number
    email?: StringFilter<"Feedback"> | string
    tanggalFeedback?: DateTimeFilter<"Feedback"> | Date | string
    subject?: StringFilter<"Feedback"> | string
    message?: StringFilter<"Feedback"> | string
    fullname?: StringFilter<"Feedback"> | string
  }

  export type ResepUpsertWithWhereUniqueWithoutAdminInput = {
    where: ResepWhereUniqueInput
    update: XOR<ResepUpdateWithoutAdminInput, ResepUncheckedUpdateWithoutAdminInput>
    create: XOR<ResepCreateWithoutAdminInput, ResepUncheckedCreateWithoutAdminInput>
  }

  export type ResepUpdateWithWhereUniqueWithoutAdminInput = {
    where: ResepWhereUniqueInput
    data: XOR<ResepUpdateWithoutAdminInput, ResepUncheckedUpdateWithoutAdminInput>
  }

  export type ResepUpdateManyWithWhereWithoutAdminInput = {
    where: ResepScalarWhereInput
    data: XOR<ResepUpdateManyMutationInput, ResepUncheckedUpdateManyWithoutAdminInput>
  }

  export type ResepScalarWhereInput = {
    AND?: ResepScalarWhereInput | ResepScalarWhereInput[]
    OR?: ResepScalarWhereInput[]
    NOT?: ResepScalarWhereInput | ResepScalarWhereInput[]
    id?: IntFilter<"Resep"> | number
    nama?: StringFilter<"Resep"> | string
    photoResep?: StringNullableFilter<"Resep"> | string | null
    kategoriId?: IntFilter<"Resep"> | number
    tanggalUnggahan?: DateTimeFilter<"Resep"> | Date | string
    userId?: IntFilter<"Resep"> | number
    tanggalAcc?: DateTimeNullableFilter<"Resep"> | Date | string | null
    disetujuiOleh?: IntNullableFilter<"Resep"> | number | null
    isApproved?: EnumStatusResepFilter<"Resep"> | $Enums.StatusResep
    cookingTime?: StringFilter<"Resep"> | string
    note?: StringNullableFilter<"Resep"> | string | null
    rating?: IntNullableFilter<"Resep"> | number | null
    servingTime?: StringFilter<"Resep"> | string
    description?: StringFilter<"Resep"> | string
    preparationTime?: StringFilter<"Resep"> | string
  }

  export type ResepUpsertWithWhereUniqueWithoutUserInput = {
    where: ResepWhereUniqueInput
    update: XOR<ResepUpdateWithoutUserInput, ResepUncheckedUpdateWithoutUserInput>
    create: XOR<ResepCreateWithoutUserInput, ResepUncheckedCreateWithoutUserInput>
  }

  export type ResepUpdateWithWhereUniqueWithoutUserInput = {
    where: ResepWhereUniqueInput
    data: XOR<ResepUpdateWithoutUserInput, ResepUncheckedUpdateWithoutUserInput>
  }

  export type ResepUpdateManyWithWhereWithoutUserInput = {
    where: ResepScalarWhereInput
    data: XOR<ResepUpdateManyMutationInput, ResepUncheckedUpdateManyWithoutUserInput>
  }

  export type SavedResepUpsertWithWhereUniqueWithoutUserInput = {
    where: SavedResepWhereUniqueInput
    update: XOR<SavedResepUpdateWithoutUserInput, SavedResepUncheckedUpdateWithoutUserInput>
    create: XOR<SavedResepCreateWithoutUserInput, SavedResepUncheckedCreateWithoutUserInput>
  }

  export type SavedResepUpdateWithWhereUniqueWithoutUserInput = {
    where: SavedResepWhereUniqueInput
    data: XOR<SavedResepUpdateWithoutUserInput, SavedResepUncheckedUpdateWithoutUserInput>
  }

  export type SavedResepUpdateManyWithWhereWithoutUserInput = {
    where: SavedResepScalarWhereInput
    data: XOR<SavedResepUpdateManyMutationInput, SavedResepUncheckedUpdateManyWithoutUserInput>
  }

  export type SavedResepScalarWhereInput = {
    AND?: SavedResepScalarWhereInput | SavedResepScalarWhereInput[]
    OR?: SavedResepScalarWhereInput[]
    NOT?: SavedResepScalarWhereInput | SavedResepScalarWhereInput[]
    id?: IntFilter<"SavedResep"> | number
    userId?: IntFilter<"SavedResep"> | number
    resepId?: IntFilter<"SavedResep"> | number
    savedAt?: DateTimeFilter<"SavedResep"> | Date | string
  }

  export type ThreadUpsertWithWhereUniqueWithoutUserInput = {
    where: ThreadWhereUniqueInput
    update: XOR<ThreadUpdateWithoutUserInput, ThreadUncheckedUpdateWithoutUserInput>
    create: XOR<ThreadCreateWithoutUserInput, ThreadUncheckedCreateWithoutUserInput>
  }

  export type ThreadUpdateWithWhereUniqueWithoutUserInput = {
    where: ThreadWhereUniqueInput
    data: XOR<ThreadUpdateWithoutUserInput, ThreadUncheckedUpdateWithoutUserInput>
  }

  export type ThreadUpdateManyWithWhereWithoutUserInput = {
    where: ThreadScalarWhereInput
    data: XOR<ThreadUpdateManyMutationInput, ThreadUncheckedUpdateManyWithoutUserInput>
  }

  export type ThreadScalarWhereInput = {
    AND?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
    OR?: ThreadScalarWhereInput[]
    NOT?: ThreadScalarWhereInput | ThreadScalarWhereInput[]
    title?: StringFilter<"Thread"> | string
    createdAt?: DateTimeFilter<"Thread"> | Date | string
    updatedAt?: DateTimeFilter<"Thread"> | Date | string
    userId?: IntFilter<"Thread"> | number
    id?: IntFilter<"Thread"> | number
  }

  export type BahanCreateWithoutResepInput = {
    nama: string
    jumlah: string
  }

  export type BahanUncheckedCreateWithoutResepInput = {
    id?: number
    nama: string
    jumlah: string
  }

  export type BahanCreateOrConnectWithoutResepInput = {
    where: BahanWhereUniqueInput
    create: XOR<BahanCreateWithoutResepInput, BahanUncheckedCreateWithoutResepInput>
  }

  export type BahanCreateManyResepInputEnvelope = {
    data: BahanCreateManyResepInput | BahanCreateManyResepInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutResepInput = {
    comment: string
    createdAt?: Date | string
    rating?: number
    user: UserCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutResepInput = {
    id?: number
    userId: number
    comment: string
    createdAt?: Date | string
    rating?: number
  }

  export type CommentCreateOrConnectWithoutResepInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutResepInput, CommentUncheckedCreateWithoutResepInput>
  }

  export type CommentCreateManyResepInputEnvelope = {
    data: CommentCreateManyResepInput | CommentCreateManyResepInput[]
    skipDuplicates?: boolean
  }

  export type LangkahPembuatanCreateWithoutResepInput = {
    urutan: number
    deskripsi: string
  }

  export type LangkahPembuatanUncheckedCreateWithoutResepInput = {
    id?: number
    urutan: number
    deskripsi: string
  }

  export type LangkahPembuatanCreateOrConnectWithoutResepInput = {
    where: LangkahPembuatanWhereUniqueInput
    create: XOR<LangkahPembuatanCreateWithoutResepInput, LangkahPembuatanUncheckedCreateWithoutResepInput>
  }

  export type LangkahPembuatanCreateManyResepInputEnvelope = {
    data: LangkahPembuatanCreateManyResepInput | LangkahPembuatanCreateManyResepInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutResepDisetujuiInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    resepDiunggah?: ResepCreateNestedManyWithoutUserInput
    savedResep?: SavedResepCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResepDisetujuiInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    resepDiunggah?: ResepUncheckedCreateNestedManyWithoutUserInput
    savedResep?: SavedResepUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResepDisetujuiInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResepDisetujuiInput, UserUncheckedCreateWithoutResepDisetujuiInput>
  }

  export type KategoriCreateWithoutResepInput = {
    nama: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    parent?: KategoriCreateNestedOneWithoutSubcategoriesInput
    subcategories?: KategoriCreateNestedManyWithoutParentInput
  }

  export type KategoriUncheckedCreateWithoutResepInput = {
    id?: number
    nama: string
    createdAt?: Date | string
    parentId?: number | null
    updatedAt?: Date | string | null
    subcategories?: KategoriUncheckedCreateNestedManyWithoutParentInput
  }

  export type KategoriCreateOrConnectWithoutResepInput = {
    where: KategoriWhereUniqueInput
    create: XOR<KategoriCreateWithoutResepInput, KategoriUncheckedCreateWithoutResepInput>
  }

  export type UserCreateWithoutResepDiunggahInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepCreateNestedManyWithoutAdminInput
    savedResep?: SavedResepCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResepDiunggahInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepUncheckedCreateNestedManyWithoutAdminInput
    savedResep?: SavedResepUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResepDiunggahInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResepDiunggahInput, UserUncheckedCreateWithoutResepDiunggahInput>
  }

  export type SavedResepCreateWithoutResepInput = {
    savedAt?: Date | string
    user: UserCreateNestedOneWithoutSavedResepInput
  }

  export type SavedResepUncheckedCreateWithoutResepInput = {
    id?: number
    userId: number
    savedAt?: Date | string
  }

  export type SavedResepCreateOrConnectWithoutResepInput = {
    where: SavedResepWhereUniqueInput
    create: XOR<SavedResepCreateWithoutResepInput, SavedResepUncheckedCreateWithoutResepInput>
  }

  export type SavedResepCreateManyResepInputEnvelope = {
    data: SavedResepCreateManyResepInput | SavedResepCreateManyResepInput[]
    skipDuplicates?: boolean
  }

  export type BahanUpsertWithWhereUniqueWithoutResepInput = {
    where: BahanWhereUniqueInput
    update: XOR<BahanUpdateWithoutResepInput, BahanUncheckedUpdateWithoutResepInput>
    create: XOR<BahanCreateWithoutResepInput, BahanUncheckedCreateWithoutResepInput>
  }

  export type BahanUpdateWithWhereUniqueWithoutResepInput = {
    where: BahanWhereUniqueInput
    data: XOR<BahanUpdateWithoutResepInput, BahanUncheckedUpdateWithoutResepInput>
  }

  export type BahanUpdateManyWithWhereWithoutResepInput = {
    where: BahanScalarWhereInput
    data: XOR<BahanUpdateManyMutationInput, BahanUncheckedUpdateManyWithoutResepInput>
  }

  export type BahanScalarWhereInput = {
    AND?: BahanScalarWhereInput | BahanScalarWhereInput[]
    OR?: BahanScalarWhereInput[]
    NOT?: BahanScalarWhereInput | BahanScalarWhereInput[]
    id?: IntFilter<"Bahan"> | number
    resepId?: IntFilter<"Bahan"> | number
    nama?: StringFilter<"Bahan"> | string
    jumlah?: StringFilter<"Bahan"> | string
  }

  export type CommentUpsertWithWhereUniqueWithoutResepInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutResepInput, CommentUncheckedUpdateWithoutResepInput>
    create: XOR<CommentCreateWithoutResepInput, CommentUncheckedCreateWithoutResepInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutResepInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutResepInput, CommentUncheckedUpdateWithoutResepInput>
  }

  export type CommentUpdateManyWithWhereWithoutResepInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutResepInput>
  }

  export type LangkahPembuatanUpsertWithWhereUniqueWithoutResepInput = {
    where: LangkahPembuatanWhereUniqueInput
    update: XOR<LangkahPembuatanUpdateWithoutResepInput, LangkahPembuatanUncheckedUpdateWithoutResepInput>
    create: XOR<LangkahPembuatanCreateWithoutResepInput, LangkahPembuatanUncheckedCreateWithoutResepInput>
  }

  export type LangkahPembuatanUpdateWithWhereUniqueWithoutResepInput = {
    where: LangkahPembuatanWhereUniqueInput
    data: XOR<LangkahPembuatanUpdateWithoutResepInput, LangkahPembuatanUncheckedUpdateWithoutResepInput>
  }

  export type LangkahPembuatanUpdateManyWithWhereWithoutResepInput = {
    where: LangkahPembuatanScalarWhereInput
    data: XOR<LangkahPembuatanUpdateManyMutationInput, LangkahPembuatanUncheckedUpdateManyWithoutResepInput>
  }

  export type LangkahPembuatanScalarWhereInput = {
    AND?: LangkahPembuatanScalarWhereInput | LangkahPembuatanScalarWhereInput[]
    OR?: LangkahPembuatanScalarWhereInput[]
    NOT?: LangkahPembuatanScalarWhereInput | LangkahPembuatanScalarWhereInput[]
    id?: IntFilter<"LangkahPembuatan"> | number
    resepId?: IntFilter<"LangkahPembuatan"> | number
    urutan?: IntFilter<"LangkahPembuatan"> | number
    deskripsi?: StringFilter<"LangkahPembuatan"> | string
  }

  export type UserUpsertWithoutResepDisetujuiInput = {
    update: XOR<UserUpdateWithoutResepDisetujuiInput, UserUncheckedUpdateWithoutResepDisetujuiInput>
    create: XOR<UserCreateWithoutResepDisetujuiInput, UserUncheckedCreateWithoutResepDisetujuiInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResepDisetujuiInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResepDisetujuiInput, UserUncheckedUpdateWithoutResepDisetujuiInput>
  }

  export type UserUpdateWithoutResepDisetujuiInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    resepDiunggah?: ResepUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResepDisetujuiInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    resepDiunggah?: ResepUncheckedUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KategoriUpsertWithoutResepInput = {
    update: XOR<KategoriUpdateWithoutResepInput, KategoriUncheckedUpdateWithoutResepInput>
    create: XOR<KategoriCreateWithoutResepInput, KategoriUncheckedCreateWithoutResepInput>
    where?: KategoriWhereInput
  }

  export type KategoriUpdateToOneWithWhereWithoutResepInput = {
    where?: KategoriWhereInput
    data: XOR<KategoriUpdateWithoutResepInput, KategoriUncheckedUpdateWithoutResepInput>
  }

  export type KategoriUpdateWithoutResepInput = {
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: KategoriUpdateOneWithoutSubcategoriesNestedInput
    subcategories?: KategoriUpdateManyWithoutParentNestedInput
  }

  export type KategoriUncheckedUpdateWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subcategories?: KategoriUncheckedUpdateManyWithoutParentNestedInput
  }

  export type UserUpsertWithoutResepDiunggahInput = {
    update: XOR<UserUpdateWithoutResepDiunggahInput, UserUncheckedUpdateWithoutResepDiunggahInput>
    create: XOR<UserCreateWithoutResepDiunggahInput, UserUncheckedCreateWithoutResepDiunggahInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResepDiunggahInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResepDiunggahInput, UserUncheckedUpdateWithoutResepDiunggahInput>
  }

  export type UserUpdateWithoutResepDiunggahInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUpdateManyWithoutAdminNestedInput
    savedResep?: SavedResepUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResepDiunggahInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUncheckedUpdateManyWithoutAdminNestedInput
    savedResep?: SavedResepUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SavedResepUpsertWithWhereUniqueWithoutResepInput = {
    where: SavedResepWhereUniqueInput
    update: XOR<SavedResepUpdateWithoutResepInput, SavedResepUncheckedUpdateWithoutResepInput>
    create: XOR<SavedResepCreateWithoutResepInput, SavedResepUncheckedCreateWithoutResepInput>
  }

  export type SavedResepUpdateWithWhereUniqueWithoutResepInput = {
    where: SavedResepWhereUniqueInput
    data: XOR<SavedResepUpdateWithoutResepInput, SavedResepUncheckedUpdateWithoutResepInput>
  }

  export type SavedResepUpdateManyWithWhereWithoutResepInput = {
    where: SavedResepScalarWhereInput
    data: XOR<SavedResepUpdateManyMutationInput, SavedResepUncheckedUpdateManyWithoutResepInput>
  }

  export type ResepCreateWithoutDisimpanOlehInput = {
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanCreateNestedManyWithoutResepInput
    comment?: CommentCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanCreateNestedManyWithoutResepInput
    admin?: UserCreateNestedOneWithoutResepDisetujuiInput
    kategori: KategoriCreateNestedOneWithoutResepInput
    user: UserCreateNestedOneWithoutResepDiunggahInput
  }

  export type ResepUncheckedCreateWithoutDisimpanOlehInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanUncheckedCreateNestedManyWithoutResepInput
    comment?: CommentUncheckedCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanUncheckedCreateNestedManyWithoutResepInput
  }

  export type ResepCreateOrConnectWithoutDisimpanOlehInput = {
    where: ResepWhereUniqueInput
    create: XOR<ResepCreateWithoutDisimpanOlehInput, ResepUncheckedCreateWithoutDisimpanOlehInput>
  }

  export type UserCreateWithoutSavedResepInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSavedResepInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepUncheckedCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSavedResepInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSavedResepInput, UserUncheckedCreateWithoutSavedResepInput>
  }

  export type ResepUpsertWithoutDisimpanOlehInput = {
    update: XOR<ResepUpdateWithoutDisimpanOlehInput, ResepUncheckedUpdateWithoutDisimpanOlehInput>
    create: XOR<ResepCreateWithoutDisimpanOlehInput, ResepUncheckedCreateWithoutDisimpanOlehInput>
    where?: ResepWhereInput
  }

  export type ResepUpdateToOneWithWhereWithoutDisimpanOlehInput = {
    where?: ResepWhereInput
    data: XOR<ResepUpdateWithoutDisimpanOlehInput, ResepUncheckedUpdateWithoutDisimpanOlehInput>
  }

  export type ResepUpdateWithoutDisimpanOlehInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUpdateManyWithoutResepNestedInput
    comment?: CommentUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUpdateManyWithoutResepNestedInput
    admin?: UserUpdateOneWithoutResepDisetujuiNestedInput
    kategori?: KategoriUpdateOneRequiredWithoutResepNestedInput
    user?: UserUpdateOneRequiredWithoutResepDiunggahNestedInput
  }

  export type ResepUncheckedUpdateWithoutDisimpanOlehInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUncheckedUpdateManyWithoutResepNestedInput
    comment?: CommentUncheckedUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUncheckedUpdateManyWithoutResepNestedInput
  }

  export type UserUpsertWithoutSavedResepInput = {
    update: XOR<UserUpdateWithoutSavedResepInput, UserUncheckedUpdateWithoutSavedResepInput>
    create: XOR<UserCreateWithoutSavedResepInput, UserUncheckedCreateWithoutSavedResepInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSavedResepInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSavedResepInput, UserUncheckedUpdateWithoutSavedResepInput>
  }

  export type UserUpdateWithoutSavedResepInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSavedResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUncheckedUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
  }

  export type KategoriCreateWithoutSubcategoriesInput = {
    nama: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    parent?: KategoriCreateNestedOneWithoutSubcategoriesInput
    resep?: ResepCreateNestedManyWithoutKategoriInput
  }

  export type KategoriUncheckedCreateWithoutSubcategoriesInput = {
    id?: number
    nama: string
    createdAt?: Date | string
    parentId?: number | null
    updatedAt?: Date | string | null
    resep?: ResepUncheckedCreateNestedManyWithoutKategoriInput
  }

  export type KategoriCreateOrConnectWithoutSubcategoriesInput = {
    where: KategoriWhereUniqueInput
    create: XOR<KategoriCreateWithoutSubcategoriesInput, KategoriUncheckedCreateWithoutSubcategoriesInput>
  }

  export type KategoriCreateWithoutParentInput = {
    nama: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    subcategories?: KategoriCreateNestedManyWithoutParentInput
    resep?: ResepCreateNestedManyWithoutKategoriInput
  }

  export type KategoriUncheckedCreateWithoutParentInput = {
    id?: number
    nama: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    subcategories?: KategoriUncheckedCreateNestedManyWithoutParentInput
    resep?: ResepUncheckedCreateNestedManyWithoutKategoriInput
  }

  export type KategoriCreateOrConnectWithoutParentInput = {
    where: KategoriWhereUniqueInput
    create: XOR<KategoriCreateWithoutParentInput, KategoriUncheckedCreateWithoutParentInput>
  }

  export type KategoriCreateManyParentInputEnvelope = {
    data: KategoriCreateManyParentInput | KategoriCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type ResepCreateWithoutKategoriInput = {
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanCreateNestedManyWithoutResepInput
    comment?: CommentCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanCreateNestedManyWithoutResepInput
    admin?: UserCreateNestedOneWithoutResepDisetujuiInput
    user: UserCreateNestedOneWithoutResepDiunggahInput
    disimpanOleh?: SavedResepCreateNestedManyWithoutResepInput
  }

  export type ResepUncheckedCreateWithoutKategoriInput = {
    id?: number
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanUncheckedCreateNestedManyWithoutResepInput
    comment?: CommentUncheckedCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanUncheckedCreateNestedManyWithoutResepInput
    disimpanOleh?: SavedResepUncheckedCreateNestedManyWithoutResepInput
  }

  export type ResepCreateOrConnectWithoutKategoriInput = {
    where: ResepWhereUniqueInput
    create: XOR<ResepCreateWithoutKategoriInput, ResepUncheckedCreateWithoutKategoriInput>
  }

  export type ResepCreateManyKategoriInputEnvelope = {
    data: ResepCreateManyKategoriInput | ResepCreateManyKategoriInput[]
    skipDuplicates?: boolean
  }

  export type KategoriUpsertWithoutSubcategoriesInput = {
    update: XOR<KategoriUpdateWithoutSubcategoriesInput, KategoriUncheckedUpdateWithoutSubcategoriesInput>
    create: XOR<KategoriCreateWithoutSubcategoriesInput, KategoriUncheckedCreateWithoutSubcategoriesInput>
    where?: KategoriWhereInput
  }

  export type KategoriUpdateToOneWithWhereWithoutSubcategoriesInput = {
    where?: KategoriWhereInput
    data: XOR<KategoriUpdateWithoutSubcategoriesInput, KategoriUncheckedUpdateWithoutSubcategoriesInput>
  }

  export type KategoriUpdateWithoutSubcategoriesInput = {
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: KategoriUpdateOneWithoutSubcategoriesNestedInput
    resep?: ResepUpdateManyWithoutKategoriNestedInput
  }

  export type KategoriUncheckedUpdateWithoutSubcategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resep?: ResepUncheckedUpdateManyWithoutKategoriNestedInput
  }

  export type KategoriUpsertWithWhereUniqueWithoutParentInput = {
    where: KategoriWhereUniqueInput
    update: XOR<KategoriUpdateWithoutParentInput, KategoriUncheckedUpdateWithoutParentInput>
    create: XOR<KategoriCreateWithoutParentInput, KategoriUncheckedCreateWithoutParentInput>
  }

  export type KategoriUpdateWithWhereUniqueWithoutParentInput = {
    where: KategoriWhereUniqueInput
    data: XOR<KategoriUpdateWithoutParentInput, KategoriUncheckedUpdateWithoutParentInput>
  }

  export type KategoriUpdateManyWithWhereWithoutParentInput = {
    where: KategoriScalarWhereInput
    data: XOR<KategoriUpdateManyMutationInput, KategoriUncheckedUpdateManyWithoutParentInput>
  }

  export type KategoriScalarWhereInput = {
    AND?: KategoriScalarWhereInput | KategoriScalarWhereInput[]
    OR?: KategoriScalarWhereInput[]
    NOT?: KategoriScalarWhereInput | KategoriScalarWhereInput[]
    id?: IntFilter<"Kategori"> | number
    nama?: StringFilter<"Kategori"> | string
    createdAt?: DateTimeFilter<"Kategori"> | Date | string
    parentId?: IntNullableFilter<"Kategori"> | number | null
    updatedAt?: DateTimeNullableFilter<"Kategori"> | Date | string | null
  }

  export type ResepUpsertWithWhereUniqueWithoutKategoriInput = {
    where: ResepWhereUniqueInput
    update: XOR<ResepUpdateWithoutKategoriInput, ResepUncheckedUpdateWithoutKategoriInput>
    create: XOR<ResepCreateWithoutKategoriInput, ResepUncheckedCreateWithoutKategoriInput>
  }

  export type ResepUpdateWithWhereUniqueWithoutKategoriInput = {
    where: ResepWhereUniqueInput
    data: XOR<ResepUpdateWithoutKategoriInput, ResepUncheckedUpdateWithoutKategoriInput>
  }

  export type ResepUpdateManyWithWhereWithoutKategoriInput = {
    where: ResepScalarWhereInput
    data: XOR<ResepUpdateManyMutationInput, ResepUncheckedUpdateManyWithoutKategoriInput>
  }

  export type ResepCreateWithoutBahanListInput = {
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    comment?: CommentCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanCreateNestedManyWithoutResepInput
    admin?: UserCreateNestedOneWithoutResepDisetujuiInput
    kategori: KategoriCreateNestedOneWithoutResepInput
    user: UserCreateNestedOneWithoutResepDiunggahInput
    disimpanOleh?: SavedResepCreateNestedManyWithoutResepInput
  }

  export type ResepUncheckedCreateWithoutBahanListInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    comment?: CommentUncheckedCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanUncheckedCreateNestedManyWithoutResepInput
    disimpanOleh?: SavedResepUncheckedCreateNestedManyWithoutResepInput
  }

  export type ResepCreateOrConnectWithoutBahanListInput = {
    where: ResepWhereUniqueInput
    create: XOR<ResepCreateWithoutBahanListInput, ResepUncheckedCreateWithoutBahanListInput>
  }

  export type ResepUpsertWithoutBahanListInput = {
    update: XOR<ResepUpdateWithoutBahanListInput, ResepUncheckedUpdateWithoutBahanListInput>
    create: XOR<ResepCreateWithoutBahanListInput, ResepUncheckedCreateWithoutBahanListInput>
    where?: ResepWhereInput
  }

  export type ResepUpdateToOneWithWhereWithoutBahanListInput = {
    where?: ResepWhereInput
    data: XOR<ResepUpdateWithoutBahanListInput, ResepUncheckedUpdateWithoutBahanListInput>
  }

  export type ResepUpdateWithoutBahanListInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    comment?: CommentUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUpdateManyWithoutResepNestedInput
    admin?: UserUpdateOneWithoutResepDisetujuiNestedInput
    kategori?: KategoriUpdateOneRequiredWithoutResepNestedInput
    user?: UserUpdateOneRequiredWithoutResepDiunggahNestedInput
    disimpanOleh?: SavedResepUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateWithoutBahanListInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    comment?: CommentUncheckedUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUncheckedUpdateManyWithoutResepNestedInput
    disimpanOleh?: SavedResepUncheckedUpdateManyWithoutResepNestedInput
  }

  export type ResepCreateWithoutLangkahListInput = {
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanCreateNestedManyWithoutResepInput
    comment?: CommentCreateNestedManyWithoutResepInput
    admin?: UserCreateNestedOneWithoutResepDisetujuiInput
    kategori: KategoriCreateNestedOneWithoutResepInput
    user: UserCreateNestedOneWithoutResepDiunggahInput
    disimpanOleh?: SavedResepCreateNestedManyWithoutResepInput
  }

  export type ResepUncheckedCreateWithoutLangkahListInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanUncheckedCreateNestedManyWithoutResepInput
    comment?: CommentUncheckedCreateNestedManyWithoutResepInput
    disimpanOleh?: SavedResepUncheckedCreateNestedManyWithoutResepInput
  }

  export type ResepCreateOrConnectWithoutLangkahListInput = {
    where: ResepWhereUniqueInput
    create: XOR<ResepCreateWithoutLangkahListInput, ResepUncheckedCreateWithoutLangkahListInput>
  }

  export type ResepUpsertWithoutLangkahListInput = {
    update: XOR<ResepUpdateWithoutLangkahListInput, ResepUncheckedUpdateWithoutLangkahListInput>
    create: XOR<ResepCreateWithoutLangkahListInput, ResepUncheckedCreateWithoutLangkahListInput>
    where?: ResepWhereInput
  }

  export type ResepUpdateToOneWithWhereWithoutLangkahListInput = {
    where?: ResepWhereInput
    data: XOR<ResepUpdateWithoutLangkahListInput, ResepUncheckedUpdateWithoutLangkahListInput>
  }

  export type ResepUpdateWithoutLangkahListInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUpdateManyWithoutResepNestedInput
    comment?: CommentUpdateManyWithoutResepNestedInput
    admin?: UserUpdateOneWithoutResepDisetujuiNestedInput
    kategori?: KategoriUpdateOneRequiredWithoutResepNestedInput
    user?: UserUpdateOneRequiredWithoutResepDiunggahNestedInput
    disimpanOleh?: SavedResepUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateWithoutLangkahListInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUncheckedUpdateManyWithoutResepNestedInput
    comment?: CommentUncheckedUpdateManyWithoutResepNestedInput
    disimpanOleh?: SavedResepUncheckedUpdateManyWithoutResepNestedInput
  }

  export type MessageCreateWithoutThreadInput = {
    role: $Enums.RoleChat
    content: string
    thought?: string | null
    createdAt?: Date | string
  }

  export type MessageUncheckedCreateWithoutThreadInput = {
    role: $Enums.RoleChat
    content: string
    thought?: string | null
    createdAt?: Date | string
    id?: number
  }

  export type MessageCreateOrConnectWithoutThreadInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput>
  }

  export type MessageCreateManyThreadInputEnvelope = {
    data: MessageCreateManyThreadInput | MessageCreateManyThreadInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutThreadInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentCreateNestedManyWithoutUserInput
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepCreateNestedManyWithoutUserInput
    savedResep?: SavedResepCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutThreadInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepUncheckedCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepUncheckedCreateNestedManyWithoutUserInput
    savedResep?: SavedResepUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutThreadInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutThreadInput, UserUncheckedCreateWithoutThreadInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutThreadInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutThreadInput, MessageUncheckedUpdateWithoutThreadInput>
    create: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutThreadInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutThreadInput, MessageUncheckedUpdateWithoutThreadInput>
  }

  export type MessageUpdateManyWithWhereWithoutThreadInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutThreadInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    role?: EnumRoleChatFilter<"Message"> | $Enums.RoleChat
    content?: StringFilter<"Message"> | string
    thought?: StringNullableFilter<"Message"> | string | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    id?: IntFilter<"Message"> | number
    threadId?: IntFilter<"Message"> | number
  }

  export type UserUpsertWithoutThreadInput = {
    update: XOR<UserUpdateWithoutThreadInput, UserUncheckedUpdateWithoutThreadInput>
    create: XOR<UserCreateWithoutThreadInput, UserUncheckedCreateWithoutThreadInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutThreadInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutThreadInput, UserUncheckedUpdateWithoutThreadInput>
  }

  export type UserUpdateWithoutThreadInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutThreadInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUncheckedUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUncheckedUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ThreadCreateWithoutMessagesInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutThreadInput
  }

  export type ThreadUncheckedCreateWithoutMessagesInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    id?: number
  }

  export type ThreadCreateOrConnectWithoutMessagesInput = {
    where: ThreadWhereUniqueInput
    create: XOR<ThreadCreateWithoutMessagesInput, ThreadUncheckedCreateWithoutMessagesInput>
  }

  export type ThreadUpsertWithoutMessagesInput = {
    update: XOR<ThreadUpdateWithoutMessagesInput, ThreadUncheckedUpdateWithoutMessagesInput>
    create: XOR<ThreadCreateWithoutMessagesInput, ThreadUncheckedCreateWithoutMessagesInput>
    where?: ThreadWhereInput
  }

  export type ThreadUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ThreadWhereInput
    data: XOR<ThreadUpdateWithoutMessagesInput, ThreadUncheckedUpdateWithoutMessagesInput>
  }

  export type ThreadUpdateWithoutMessagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateWithoutMessagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutFeedbackInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepCreateNestedManyWithoutUserInput
    savedResep?: SavedResepCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbackInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepUncheckedCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepUncheckedCreateNestedManyWithoutUserInput
    savedResep?: SavedResepUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpsertWithoutFeedbackInput = {
    update: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserUpdateWithoutFeedbackInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUncheckedUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUncheckedUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ResepCreateWithoutCommentInput = {
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanCreateNestedManyWithoutResepInput
    admin?: UserCreateNestedOneWithoutResepDisetujuiInput
    kategori: KategoriCreateNestedOneWithoutResepInput
    user: UserCreateNestedOneWithoutResepDiunggahInput
    disimpanOleh?: SavedResepCreateNestedManyWithoutResepInput
  }

  export type ResepUncheckedCreateWithoutCommentInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
    bahanList?: BahanUncheckedCreateNestedManyWithoutResepInput
    langkahList?: LangkahPembuatanUncheckedCreateNestedManyWithoutResepInput
    disimpanOleh?: SavedResepUncheckedCreateNestedManyWithoutResepInput
  }

  export type ResepCreateOrConnectWithoutCommentInput = {
    where: ResepWhereUniqueInput
    create: XOR<ResepCreateWithoutCommentInput, ResepUncheckedCreateWithoutCommentInput>
  }

  export type UserCreateWithoutCommentInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    feedback?: FeedbackCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepCreateNestedManyWithoutUserInput
    savedResep?: SavedResepCreateNestedManyWithoutUserInput
    Thread?: ThreadCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    photo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumber?: string | null
    feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    resepDisetujui?: ResepUncheckedCreateNestedManyWithoutAdminInput
    resepDiunggah?: ResepUncheckedCreateNestedManyWithoutUserInput
    savedResep?: SavedResepUncheckedCreateNestedManyWithoutUserInput
    Thread?: ThreadUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type ResepUpsertWithoutCommentInput = {
    update: XOR<ResepUpdateWithoutCommentInput, ResepUncheckedUpdateWithoutCommentInput>
    create: XOR<ResepCreateWithoutCommentInput, ResepUncheckedCreateWithoutCommentInput>
    where?: ResepWhereInput
  }

  export type ResepUpdateToOneWithWhereWithoutCommentInput = {
    where?: ResepWhereInput
    data: XOR<ResepUpdateWithoutCommentInput, ResepUncheckedUpdateWithoutCommentInput>
  }

  export type ResepUpdateWithoutCommentInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUpdateManyWithoutResepNestedInput
    admin?: UserUpdateOneWithoutResepDisetujuiNestedInput
    kategori?: KategoriUpdateOneRequiredWithoutResepNestedInput
    user?: UserUpdateOneRequiredWithoutResepDiunggahNestedInput
    disimpanOleh?: SavedResepUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUncheckedUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUncheckedUpdateManyWithoutResepNestedInput
    disimpanOleh?: SavedResepUncheckedUpdateManyWithoutResepNestedInput
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: FeedbackUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUpdateManyWithoutUserNestedInput
    Thread?: ThreadUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    resepDisetujui?: ResepUncheckedUpdateManyWithoutAdminNestedInput
    resepDiunggah?: ResepUncheckedUpdateManyWithoutUserNestedInput
    savedResep?: SavedResepUncheckedUpdateManyWithoutUserNestedInput
    Thread?: ThreadUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentCreateManyUserInput = {
    id?: number
    resepId: number
    comment: string
    createdAt?: Date | string
    rating?: number
  }

  export type FeedbackCreateManyUserInput = {
    id?: number
    email: string
    tanggalFeedback?: Date | string
    subject: string
    message: string
    fullname: string
  }

  export type ResepCreateManyAdminInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
  }

  export type ResepCreateManyUserInput = {
    id?: number
    nama: string
    photoResep?: string | null
    kategoriId: number
    tanggalUnggahan?: Date | string
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
  }

  export type SavedResepCreateManyUserInput = {
    id?: number
    resepId: number
    savedAt?: Date | string
  }

  export type ThreadCreateManyUserInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
  }

  export type CommentUpdateWithoutUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    resep?: ResepUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    tanggalFeedback?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    tanggalFeedback?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    tanggalFeedback?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
  }

  export type ResepUpdateWithoutAdminInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUpdateManyWithoutResepNestedInput
    comment?: CommentUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUpdateManyWithoutResepNestedInput
    kategori?: KategoriUpdateOneRequiredWithoutResepNestedInput
    user?: UserUpdateOneRequiredWithoutResepDiunggahNestedInput
    disimpanOleh?: SavedResepUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUncheckedUpdateManyWithoutResepNestedInput
    comment?: CommentUncheckedUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUncheckedUpdateManyWithoutResepNestedInput
    disimpanOleh?: SavedResepUncheckedUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
  }

  export type ResepUpdateWithoutUserInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUpdateManyWithoutResepNestedInput
    comment?: CommentUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUpdateManyWithoutResepNestedInput
    admin?: UserUpdateOneWithoutResepDisetujuiNestedInput
    kategori?: KategoriUpdateOneRequiredWithoutResepNestedInput
    disimpanOleh?: SavedResepUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUncheckedUpdateManyWithoutResepNestedInput
    comment?: CommentUncheckedUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUncheckedUpdateManyWithoutResepNestedInput
    disimpanOleh?: SavedResepUncheckedUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    kategoriId?: IntFieldUpdateOperationsInput | number
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
  }

  export type SavedResepUpdateWithoutUserInput = {
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resep?: ResepUpdateOneRequiredWithoutDisimpanOlehNestedInput
  }

  export type SavedResepUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedResepUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    resepId?: IntFieldUpdateOperationsInput | number
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreadUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type ThreadUncheckedUpdateManyWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type BahanCreateManyResepInput = {
    id?: number
    nama: string
    jumlah: string
  }

  export type CommentCreateManyResepInput = {
    id?: number
    userId: number
    comment: string
    createdAt?: Date | string
    rating?: number
  }

  export type LangkahPembuatanCreateManyResepInput = {
    id?: number
    urutan: number
    deskripsi: string
  }

  export type SavedResepCreateManyResepInput = {
    id?: number
    userId: number
    savedAt?: Date | string
  }

  export type BahanUpdateWithoutResepInput = {
    nama?: StringFieldUpdateOperationsInput | string
    jumlah?: StringFieldUpdateOperationsInput | string
  }

  export type BahanUncheckedUpdateWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    jumlah?: StringFieldUpdateOperationsInput | string
  }

  export type BahanUncheckedUpdateManyWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    jumlah?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutResepInput = {
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type LangkahPembuatanUpdateWithoutResepInput = {
    urutan?: IntFieldUpdateOperationsInput | number
    deskripsi?: StringFieldUpdateOperationsInput | string
  }

  export type LangkahPembuatanUncheckedUpdateWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    urutan?: IntFieldUpdateOperationsInput | number
    deskripsi?: StringFieldUpdateOperationsInput | string
  }

  export type LangkahPembuatanUncheckedUpdateManyWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    urutan?: IntFieldUpdateOperationsInput | number
    deskripsi?: StringFieldUpdateOperationsInput | string
  }

  export type SavedResepUpdateWithoutResepInput = {
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSavedResepNestedInput
  }

  export type SavedResepUncheckedUpdateWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedResepUncheckedUpdateManyWithoutResepInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KategoriCreateManyParentInput = {
    id?: number
    nama: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ResepCreateManyKategoriInput = {
    id?: number
    nama: string
    photoResep?: string | null
    tanggalUnggahan?: Date | string
    userId: number
    tanggalAcc?: Date | string | null
    disetujuiOleh?: number | null
    isApproved?: $Enums.StatusResep
    cookingTime: string
    note?: string | null
    rating?: number | null
    servingTime: string
    description: string
    preparationTime: string
  }

  export type KategoriUpdateWithoutParentInput = {
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subcategories?: KategoriUpdateManyWithoutParentNestedInput
    resep?: ResepUpdateManyWithoutKategoriNestedInput
  }

  export type KategoriUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subcategories?: KategoriUncheckedUpdateManyWithoutParentNestedInput
    resep?: ResepUncheckedUpdateManyWithoutKategoriNestedInput
  }

  export type KategoriUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResepUpdateWithoutKategoriInput = {
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUpdateManyWithoutResepNestedInput
    comment?: CommentUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUpdateManyWithoutResepNestedInput
    admin?: UserUpdateOneWithoutResepDisetujuiNestedInput
    user?: UserUpdateOneRequiredWithoutResepDiunggahNestedInput
    disimpanOleh?: SavedResepUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateWithoutKategoriInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
    bahanList?: BahanUncheckedUpdateManyWithoutResepNestedInput
    comment?: CommentUncheckedUpdateManyWithoutResepNestedInput
    langkahList?: LangkahPembuatanUncheckedUpdateManyWithoutResepNestedInput
    disimpanOleh?: SavedResepUncheckedUpdateManyWithoutResepNestedInput
  }

  export type ResepUncheckedUpdateManyWithoutKategoriInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    photoResep?: NullableStringFieldUpdateOperationsInput | string | null
    tanggalUnggahan?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    tanggalAcc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disetujuiOleh?: NullableIntFieldUpdateOperationsInput | number | null
    isApproved?: EnumStatusResepFieldUpdateOperationsInput | $Enums.StatusResep
    cookingTime?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    servingTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    preparationTime?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyThreadInput = {
    role: $Enums.RoleChat
    content: string
    thought?: string | null
    createdAt?: Date | string
    id?: number
  }

  export type MessageUpdateWithoutThreadInput = {
    role?: EnumRoleChatFieldUpdateOperationsInput | $Enums.RoleChat
    content?: StringFieldUpdateOperationsInput | string
    thought?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateWithoutThreadInput = {
    role?: EnumRoleChatFieldUpdateOperationsInput | $Enums.RoleChat
    content?: StringFieldUpdateOperationsInput | string
    thought?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUncheckedUpdateManyWithoutThreadInput = {
    role?: EnumRoleChatFieldUpdateOperationsInput | $Enums.RoleChat
    content?: StringFieldUpdateOperationsInput | string
    thought?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}